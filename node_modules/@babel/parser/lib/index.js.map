{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/options.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/util/whitespace.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/util/production-parameter.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/parser/util.ts","../src/parser/node.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n    estreeParseChainExpression(\n      node: N.Expression,\n      endLoc: Position,\n    ): N.EstreeChainExpression {\n      const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n      chain.expression = node;\n      return this.finishNodeAt(chain, \"ChainExpression\", endLoc);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      this.castNodeTo(expression, \"Literal\");\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = this.castNodeTo(directive, \"ExpressionStatement\");\n      stmt.expression = expression;\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    /**\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     * This hook will be implemented by the typescript plugin.\n     *\n     * Note: This hook should be manually invoked when we change the `type` of a given AST\n     * node, to ensure that the optional properties are correctly filled.\n     * @param node The AST node finished by finishNode\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillOptionalPropertiesForTSESLint(node: NodeType) {}\n\n    cloneEstreeStringLiteral(node: N.EstreeLiteral): N.EstreeLiteral {\n      const { start, end, loc, range, raw, value } = node;\n      const cloned = Object.create(node.constructor.prototype);\n      cloned.type = \"Literal\";\n      cloned.start = start;\n      cloned.end = end;\n      cloned.loc = loc;\n      cloned.range = range;\n      cloned.raw = raw;\n      cloned.value = value;\n      return cloned;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      return this.castNodeTo(node, \"PrivateIdentifier\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ):\n      | N.EstreeProperty\n      | N.EstreeMethodDefinition\n      | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      delete funcNode.kind;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      const valueNode = this.castNodeTo(\n        funcNode as N.MethodLike,\n        process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"typescript\") &&\n          !funcNode.body\n          ? \"TSEmptyBodyFunctionExpression\"\n          : \"FunctionExpression\",\n      );\n      (\n        node as unknown as Undone<\n          | N.EstreeProperty\n          | N.EstreeMethodDefinition\n          | N.EstreeTSAbstractMethodDefinition\n        >\n      ).value = valueNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          // @ts-expect-error remove abstract from TSAbstractMethodDefinition\n          delete node.abstract;\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      if (type === \"ObjectMethod\") {\n        if ((node as any as N.ObjectMethod).kind === \"method\") {\n          (node as any as N.EstreeProperty).kind = \"init\";\n        }\n        (node as any as N.EstreeProperty).shorthand = false;\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeProperty>,\n          \"Property\",\n        );\n      } else {\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeMethodDefinition>,\n          \"MethodDefinition\",\n        );\n      }\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        delete propertyNode.abstract;\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      if (accessorPropertyNode.abstract && this.hasPlugin(\"typescript\")) {\n        delete accessorPropertyNode.abstract;\n        this.castNodeTo(accessorPropertyNode, \"TSAbstractAccessorProperty\");\n      } else {\n        this.castNodeTo(accessorPropertyNode, \"AccessorProperty\");\n      }\n      return accessorPropertyNode;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        this.castNodeTo(node, \"Property\");\n      }\n\n      return node as any;\n    }\n\n    finishObjectProperty(node: Undone<N.ObjectProperty>): N.ObjectProperty {\n      (node as unknown as Undone<N.EstreeProperty>).kind = \"init\";\n      return this.finishNode(\n        node as unknown as Undone<N.EstreeProperty>,\n        \"Property\",\n      ) as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        this.castNodeTo(node, \"ImportExpression\");\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"OptionalCallExpression\") {\n        this.castNodeTo(node, \"CallExpression\");\n      } else {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            this.castNodeTo(node, \"ExportAllDeclaration\");\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    stopParseSubscript(base: N.Expression, state: N.ParseSubscriptState) {\n      const node = super.stopParseSubscript(base, state);\n      if (state.optionalChainMember) {\n        return this.estreeParseChainExpression(node, base.loc.end);\n      }\n      return node;\n    }\n\n    parseMember(\n      base: N.Expression,\n      startLoc: Position,\n      state: N.ParseSubscriptState,\n      computed: boolean,\n      optional: boolean,\n    ) {\n      const node = super.parseMember(base, startLoc, state, computed, optional);\n      if (node.type === \"OptionalMemberExpression\") {\n        this.castNodeTo(node, \"MemberExpression\");\n      } else {\n        node.optional = false;\n      }\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    castNodeTo<T extends N.Node[\"type\"]>(\n      node: N.Node,\n      type: T,\n    ): Extract<N.Node, { type: T }> {\n      const result = super.castNodeTo(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      this.fillOptionalPropertiesForTSESLint(cloned);\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Literal\") {\n        return this.cloneEstreeStringLiteral(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    // Override for TS-ESLint that does not allow optional AST properties\n    finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n      const result = super.finishNode(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  // TODO: Remove this in Babel 8\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.default = false;\n            delete node.exportKind;\n            return this.castNodeTo(\n              node as N.ExportNamedDeclaration,\n              \"DeclareExportDeclaration\",\n            );\n          } else {\n            return this.castNodeTo(\n              node as N.ExportAllDeclaration,\n              \"DeclareExportAllDeclaration\",\n            );\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareTypeAlias\");\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareOpaqueType\");\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = this.cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = this.cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.lookaheadCharCodeSince(this.state.pos);\n  }\n\n  lookaheadCharCodeSince(pos: number): number {\n    return this.input.charCodeAt(this.nextTokenStartSince(pos));\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      (next === charCodes.leftCurlyBrace ||\n        (next === charCodes.leftSquareBracket &&\n          this.hasPlugin(\"recordAndTuple\")))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type {\n  Comment,\n  Node as NodeType,\n  NodeBase,\n  EstreeLiteral,\n  Identifier,\n  Placeholder,\n  StringLiteral,\n} from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n\n  castNodeTo<T extends NodeType[\"type\"]>(\n    node: NodeType,\n    type: T,\n  ): Extract<NodeType, { type: T }> {\n    node.type = type;\n    return node as Extract<NodeType, { type: T }>;\n  }\n\n  cloneIdentifier<T extends Identifier | Placeholder>(node: T): T {\n    // We don't need to clone `typeAnnotations` and `optional`: because\n    // cloneIdentifier is only used in object shorthand and named import/export.\n    // Neither of them allow type annotations after the identifier or optional identifier\n    const { type, start, end, loc, range, name } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.name = name;\n    if (node.extra) cloned.extra = node.extra;\n    return cloned;\n  }\n\n  cloneStringLiteral<T extends StringLiteral | EstreeLiteral | Placeholder>(\n    node: T,\n  ): T {\n    const { type, start, end, loc, range, extra } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.extra = extra;\n    cloned.value = (node as StringLiteral).value;\n    return cloned;\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        this.castNodeTo(node, \"ObjectPattern\");\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        this.castNodeTo(node, \"ArrayPattern\");\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        this.castNodeTo(node, \"AssignmentPattern\");\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      this.castNodeTo(prop, \"RestElement\");\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement | null)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      this.castNodeTo(node, \"RestElement\");\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n      this.resetStartLocationFromNode(left, decorators[0]);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma)) {\n        node.options = this.tsParseImportTypeOptions();\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseImportTypeOptions(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      this.expect(tt.braceL);\n      const withProperty = this.startNode<N.ObjectProperty>();\n      if (this.isContextual(tt._with)) {\n        withProperty.method = false;\n        withProperty.key = this.parseIdentifier(true);\n        withProperty.computed = false;\n        withProperty.shorthand = false;\n      } else {\n        this.unexpected(null, tt._with);\n      }\n      this.expect(tt.colon);\n      withProperty.value = this.tsParseImportTypeWithPropertyValue();\n      node.properties = [this.finishObjectProperty(withProperty)];\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseImportTypeWithPropertyValue(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      const properties = [];\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const type = this.state.type;\n        if (tokenIsIdentifier(type) || type === tt.string) {\n          properties.push(super.parsePropertyDefinition(null));\n        } else {\n          this.unexpected();\n        }\n        this.eat(tt.comma);\n      }\n      node.properties = properties;\n      this.next(); // eat }\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: Undone<N.TsPropertySignature | N.TsMethodSignature>,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method = node as Undone<N.TsMethodSignature>;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property = node as Undone<N.TsPropertySignature>;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n        // Allow < here so that we can recover from get key<T> later\n        if (!this.match(tt.parenL) && !this.match(tt.lt)) {\n          this.unexpected(null, tt.parenL);\n        }\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include decorators/modifiers in range\n      const startLoc = decorators.length\n        ? decorators[0].loc.start\n        : this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (result.type === \"TSInstantiationExpression\") {\n            if (\n              this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis)\n            ) {\n              this.raise(\n                TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n                this.state.startLoc,\n              );\n            }\n            if (!this.match(tt.dot) && !this.match(tt.questionDot)) {\n              // If TSInstantiationExpression is not followed by . / ?.,\n              // it must be the end of a subscript chain. Note that `(` already forms\n              // call expression arguments\n              result.expression = super.stopParseSubscript(base, state);\n            }\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).attributes = [];\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).exportKind = \"value\";\n          (node as Undone<N.ExportNamedDeclaration>).source = null;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if ((node as N.Node).type === \"MethodDefinition\" && node.body == null) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract || method.type === \"TSAbstractMethodDefinition\") {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = this.cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n\n    /**\n     * This hook is defined in the ESTree plugin.\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     *\n     * @param node The AST node finished by finishNode\n     * @returns\n     */\n    fillOptionalPropertiesForTSESLint(node: N.Node): void {\n      switch (node.type) {\n        case \"ExpressionStatement\":\n          node.directive ??= undefined;\n          return;\n        case \"RestElement\":\n          node.value = undefined;\n        /* fallthrough */\n        case \"Identifier\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"ObjectPattern\":\n          node.decorators ??= [];\n          node.optional ??= false;\n          node.typeAnnotation ??= undefined;\n          return;\n        case \"TSParameterProperty\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSEmptyBodyFunctionExpression\":\n          node.body = null;\n        /* fallthrough */\n        case \"TSDeclareFunction\":\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"ClassMethod\":\n        case \"ClassPrivateMethod\":\n          node.declare ??= false;\n          node.returnType ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"Property\":\n          node.optional ??= false;\n          return;\n        case \"TSMethodSignature\":\n        case \"TSPropertySignature\":\n          node.optional ??= false;\n        /* fallthrough */\n        case \"TSIndexSignature\":\n          node.accessibility ??= undefined;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSAbstractPropertyDefinition\":\n        case \"PropertyDefinition\":\n        case \"TSAbstractAccessorProperty\":\n        case \"AccessorProperty\":\n          node.declare ??= false;\n          node.definite ??= false;\n          node.readonly ??= false;\n          node.typeAnnotation ??= undefined;\n        /* fallthrough */\n        case \"TSAbstractMethodDefinition\":\n        case \"MethodDefinition\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.optional ??= false;\n          return;\n        case \"ClassExpression\":\n          node.id ??= null;\n        /* fallthrough */\n        case \"ClassDeclaration\":\n          node.abstract ??= false;\n          node.declare ??= false;\n          node.decorators ??= [];\n          node.implements ??= [];\n          node.superTypeArguments ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"TSTypeAliasDeclaration\":\n        case \"VariableDeclaration\":\n          node.declare ??= false;\n          return;\n        case \"VariableDeclarator\":\n          node.definite ??= false;\n          return;\n        case \"TSEnumDeclaration\":\n          node.const ??= false;\n          node.declare ??= false;\n          return;\n        case \"TSEnumMember\":\n          node.computed ??= false;\n          return;\n        case \"TSImportType\":\n          node.qualifier ??= null;\n          node.options ??= null;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments ??= null;\n          }\n          return;\n        case \"TSInterfaceDeclaration\":\n          node.declare ??= false;\n          node.extends ??= [];\n          return;\n        case \"TSModuleDeclaration\":\n          node.declare ??= false;\n          node.global ??= node.kind === \"global\";\n          return;\n        case \"TSTypeParameter\":\n          node.const ??= false;\n          node.in ??= false;\n          node.out ??= false;\n          return;\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.ts                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.ts                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      if (cloned.type === \"Placeholder\") {\n        cloned.expectedNode = (node as N.Placeholder).expectedNode;\n      }\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Placeholder\") {\n        return this.cloneIdentifier(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    /* ============================================================ *\n     * parser/lval.ts                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.ts                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          this.castNodeTo(identifier, \"V8IntrinsicIdentifier\");\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (\n          topicToken === \"#\" &&\n          pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n        ) {\n          throw new Error(\n            `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n          );\n        }\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'recordAndTuple' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    } else {\n      const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n      if (syntaxType != null) {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          return this.stopParseSubscript(base, state);\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        return this.stopParseSubscript(base, state);\n      }\n    }\n  }\n\n  stopParseSubscript(\n    this: Parser,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n  ) {\n    state.stop = true;\n    return base;\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as Undone<N.OptionalMemberExpression>).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      (node as Undone<N.OptionalCallExpression>).optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING) {\n          if (type === tt.decimal) {\n            return this.parseDecimalLiteral(this.state.value);\n          } else if (type === tt.bracketBarL || type === tt.bracketHashL) {\n            return this.parseArrayLike(\n              this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n              /* canBePattern */ false,\n              /* isTuple */ true,\n            );\n          } else if (type === tt.braceBarL || type === tt.braceHashL) {\n            return this.parseObjectLike(\n              this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n              /* isPattern */ false,\n              /* isRecord */ true,\n            );\n          }\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishObjectProperty(prop);\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = this.cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishObjectProperty(prop);\n    }\n  }\n\n  finishObjectProperty(node: Undone<N.ObjectProperty>) {\n    return this.finishNode(node, \"ObjectProperty\");\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.ExpressionStatement): N.Directive {\n    const directive = this.castNodeTo(stmt, \"Directive\");\n\n    const directiveLiteral = this.castNodeTo(\n      stmt.expression,\n      \"DirectiveLiteral\",\n    );\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directive.value = directiveLiteral;\n    delete stmt.expression;\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  allowsForUsing(): boolean {\n    const { type, containsEsc, end } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `for( using of` must start either a for-lhs-of statement\n      // or a for lexical declaration\n      const nextCharAfterOf = this.lookaheadCharCodeSince(end);\n      if (\n        nextCharAfterOf !== charCodes.equalsTo &&\n        nextCharAfterOf !== charCodes.colon &&\n        // recover from `for(using of;...);`\n        nextCharAfterOf !== charCodes.semicolon\n      ) {\n        return false;\n      }\n    }\n    if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n    return false;\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.allowsForUsing());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = this.cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = this.cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = this.cloneIdentifier(imported as N.Identifier);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","node","type","prefix","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationExport","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","YieldNotInGeneratorFunction","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","Object","assign","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","defineProperty","enumerable","configurable","toParseErrorConstructor","toMessage","reasonCode","syntaxPlugin","hasMissingPlugin","oldReasonCodes","AccessorCannotDeclareThisParameter","AccessorCannotHaveTypeParameters","ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference","SetAccessorCannotHaveOptionalParameter","SetAccessorCannotHaveRestParameter","SetAccessorCannotHaveReturnType","loc","details","error","SyntaxError","pos","clone","overrides","_overrides$loc","get","set","writable","ParseErrorEnum","argument","Array","isArray","parseErrorTemplates","ParseErrorConstructors","keys","template","_ref","rest","_objectWithoutPropertiesLoose","_excluded","Errors","PipelineOperatorErrors","createDefaultOptions","sourceType","sourceFilename","undefined","startIndex","startColumn","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","allowYieldOutsideFunction","plugins","strictMode","ranges","tokens","createImportExpressions","createParenthesizedExpressions","errorRecovery","attachComment","annexB","getOptions","opts","options","Error","toUnenumerable","object","toESTreeLocation","estree","superClass","ESTreeParserMixin","parse","file","optionFlags","parseRegExpLiteral","pattern","flags","regex","RegExp","_","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","estreeParseChainExpression","endLoc","chain","startNodeAtNode","expression","finishNodeAt","directiveToStmt","directive","castNodeTo","raw","extra","expressionValue","stmt","rawValue","fillOptionalPropertiesForTSESLint","cloneEstreeStringLiteral","range","cloned","create","prototype","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","parseMethod","isGenerator","isConstructor","allowDirectSuper","inClassScope","funcNode","startNode","typeParameters","resetStartLocationFromNode","valueNode","computed","shorthand","finishNode","nameIsConstructor","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseClassAccessorProperty","accessorPropertyNode","abstract","hasPlugin","parseObjectProperty","prop","startLoc","isPattern","refExpressionErrors","finishObjectProperty","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","_ref2","source","arguments","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","stopParseSubscript","base","optionalChainMember","parseMember","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","result","cloneIdentifier","cloneStringLiteral","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","push","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","placeholder","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","ScopeFlag","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","getScopeHandler","shouldParseTypes","finishToken","val","addComment","comment","matches","exec","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","match","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","forEach","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowInTopLevelContext","cb","curContext","oldContext","flowParseTypeParameterInstantiationInExpression","reScan_lt","oldNoAnonFunctionType","noAnonFunctionType","reScan_lt_gt","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","startNodeAt","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","nodeStart","callProperties","properties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","out","isInexactToken","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","containsEsc","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","maybeInArrowParameters","nextCh","lookaheadCharCode","setOptionalParametersError","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","stack","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","includes","offsetToSourcePos","parseParenItem","newNode","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","classBody","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","curPosition","getTokenFromCode","input","charCodeAt","finishOp","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","elements","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassMethod","allowsDirectSuper","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","isAccessor","parseFunctionParamType","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","ch","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","isLookaheadContextual","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","tryParse","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","aborted","async","failState","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","sourceToOffsetPos","parseSubscripts","noCalls","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","parseSubscript","subscriptState","isLookaheadToken_lt","stop","typeArguments","parseNewCallee","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","slice","indexOf","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","jsxParseOpeningElementAfterName","nextTokenStart","afterNext","readToken_lt","readToken_gt","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","lineBreak","lineBreakG","isNewLine","hasNewLine","skipWhiteSpace","skipWhiteSpaceInLine","isWhitespace","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","chunkStart","canStartJSXElement","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","jsxReadString","quote","startPos","codePointAtPos","codePoint","readInt","fromCodePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","replaceToken","skipSpace","prevType","splice","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","len","isConst","wasConst","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","sourcePos","offsetPos","pluginConfig","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","commentWS","lastElement","CommentsParser","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","commentEnd","containingNode","finalizeComment","trailingNode","commentStart","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","State","errors","potentialArrowAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","ct","firstInvalidTemplateEscapePos","strictErrors","tokensLength","v","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","hasTopLevelAwait","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","firstInvalidLoc","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","strictNumericEscape","octalStr","octal","parseInt","forceLen","n","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","total","e","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","createLookaheadState","old","curr","nextTokenStartSince","lastIndex","lookaheadCharCodeSince","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","cp","trail","setStrict","toParseError","clear","skipLineComment","startSkip","spaceStart","loop","commentWhitespace","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readToken_dot","readNumber","readToken_slash","width","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","isBigInt","replace","startsWithDot","isFloat","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","isDecimal","parseFloat","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","oldClassScope","from","declarePrivateName","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","addExtra","isUnparsedContextual","nameStart","nameEnd","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","allowAsi","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","NodePrototype","__clone","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","toAssignableListItem","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","ParseBindingListFlags","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseBindingElement","parseBindingRestProperty","parseBindingProperty","parsePropertyName","checkLVal","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidHeritageClauseType","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenOnSameLineAndCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","tsParseImportTypeOptions","qualifier","tsParseEntityName","tsParseEntityNameFlags","tsParseTypeArguments","withProperty","tsParseImportTypeWithPropertyValue","parsePropertyDefinition","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedType","tsExpectThenParseType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restStartLoc","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInTopLevelContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseEnumBody","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","nodeImportEquals","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldStrict","oldInAbstractClass","maybeTakeDecorators","hasEstreePlugin","methodFn","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","_node$directive","_node$decorators","_node$optional","_node$typeAnnotation","_node$accessibility","_node$decorators2","_node$override","_node$readonly","_node$static","_node$declare","_node$returnType","_node$typeParameters","_node$optional2","_node$optional3","_node$accessibility2","_node$readonly2","_node$static2","_node$declare2","_node$definite","_node$readonly3","_node$typeAnnotation2","_node$accessibility3","_node$decorators3","_node$override2","_node$optional4","_node$id","_node$abstract","_node$declare3","_node$decorators4","_node$implements","_node$superTypeArgume","_node$typeParameters2","_node$declare4","_node$definite2","_node$const","_node$declare5","_node$computed","_node$qualifier","_node$options","_node$declare6","_node$extends","_node$declare7","_node$global","_node$const2","_node$in","_node$out","superTypeArguments","in","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","stmtPlaceholder","parseBlock","createNewLexicalScope","parseFunctionId","requireId","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","PIPELINE_PROPOSALS","TOPIC_TOKENS","validatePlugins","pluginsMap","decoratorsBeforeExport","allowCallParenthesized","_pluginsMap$get2","proposalList","p","tokenList","_pluginsMap$get","syntaxType","moduleAttributesVersionPluginOption","version","deprecatedAssertSyntax","RECORD_AND_TUPLE_SYNTAX_TYPES","missingPlugins","mixinPlugins","mixinPluginNames","ExpressionParser","checkProto","isRecord","sawProto","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","isYield","parseYield","ownExpressionErrors","parseMaybeConditional","isAmbiguousPrefixOrIdentifier","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","recordAwaitIfAllowed","parseAwait","update","isDelete","parseUpdate","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseNoCallExpr","tag","quasi","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","substitutions","maybeAsyncOrAccessorProp","keyName","_params","parseObjectMethod","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","isAwaitAllowed","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","ParamKind","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifierOrBrace","allowsForUsing","nextCharAfterOf","startsAwaitUsing","parseModuleItem","ParseStatementFlag","parseStatementListItem","allowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","ParseFunctionFlag","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","maybeContextualKw","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_ref$specifiers","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","find","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginList"],"mappings":"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AC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CA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"}