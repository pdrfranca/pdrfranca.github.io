{
  "version": 3,
  "sources": ["../../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSizeLimit.js", "../../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSize.js", "../../@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js", "../../@tsparticles/plugin-absorbers/browser/Enums/AbsorberClickMode.js", "../../@tsparticles/plugin-absorbers/browser/AbsorberInstance.js", "../../@tsparticles/plugin-absorbers/browser/Absorbers.js", "../../@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js", "../../@tsparticles/plugin-absorbers/browser/index.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js", "../../@tsparticles/updater-destroy/browser/Enums/DestroyMode.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Split.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js", "../../@tsparticles/updater-destroy/browser/Utils.js", "../../@tsparticles/updater-destroy/browser/DestroyUpdater.js", "../../@tsparticles/updater-destroy/browser/index.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js", "../../@tsparticles/plugin-emitters/browser/Enums/EmitterClickMode.js", "../../@tsparticles/plugin-emitters/browser/EmitterInstance.js", "../../@tsparticles/plugin-emitters/browser/Emitters.js", "../../@tsparticles/plugin-emitters/browser/EmittersPlugin.js", "../../@tsparticles/plugin-emitters/browser/ShapeManager.js", "../../@tsparticles/plugin-emitters/browser/EmitterShapeBase.js", "../../@tsparticles/plugin-emitters/browser/index.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/index.js", "../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js", "../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js", "../../@tsparticles/plugin-emitters-shape-square/browser/index.js", "../../@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js", "../../@tsparticles/interaction-external-trail/browser/TrailMaker.js", "../../@tsparticles/interaction-external-trail/browser/index.js", "../../@tsparticles/updater-roll/browser/RollMode.js", "../../@tsparticles/updater-roll/browser/Utils.js", "../../@tsparticles/updater-roll/browser/Options/Classes/RollLight.js", "../../@tsparticles/updater-roll/browser/Options/Classes/Roll.js", "../../@tsparticles/updater-roll/browser/RollUpdater.js", "../../@tsparticles/updater-roll/browser/index.js", "../../@tsparticles/move-base/browser/Utils.js", "../../@tsparticles/move-base/browser/BaseMover.js", "../../@tsparticles/move-base/browser/index.js", "../../@tsparticles/shape-circle/browser/Utils.js", "../../@tsparticles/shape-circle/browser/CircleDrawer.js", "../../@tsparticles/shape-circle/browser/index.js", "../../@tsparticles/updater-color/browser/ColorUpdater.js", "../../@tsparticles/updater-color/browser/index.js", "../../@tsparticles/plugin-hex-color/browser/HexColorManager.js", "../../@tsparticles/plugin-hex-color/browser/index.js", "../../@tsparticles/plugin-hsl-color/browser/HslColorManager.js", "../../@tsparticles/plugin-hsl-color/browser/index.js", "../../@tsparticles/updater-opacity/browser/OpacityUpdater.js", "../../@tsparticles/updater-opacity/browser/index.js", "../../@tsparticles/updater-out-modes/browser/Utils.js", "../../@tsparticles/updater-out-modes/browser/BounceOutMode.js", "../../@tsparticles/updater-out-modes/browser/DestroyOutMode.js", "../../@tsparticles/updater-out-modes/browser/NoneOutMode.js", "../../@tsparticles/updater-out-modes/browser/OutOutMode.js", "../../@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js", "../../@tsparticles/updater-out-modes/browser/index.js", "../../@tsparticles/plugin-rgb-color/browser/RgbColorManager.js", "../../@tsparticles/plugin-rgb-color/browser/index.js", "../../@tsparticles/updater-size/browser/SizeUpdater.js", "../../@tsparticles/updater-size/browser/index.js", "../../@tsparticles/basic/browser/index.js", "../../@tsparticles/plugin-easing-quad/browser/index.js", "../../@tsparticles/shape-emoji/browser/Utils.js", "../../@tsparticles/shape-emoji/browser/EmojiDrawer.js", "../../@tsparticles/shape-emoji/browser/index.js", "../../@tsparticles/interaction-external-attract/browser/Utils.js", "../../@tsparticles/interaction-external-attract/browser/Options/Classes/Attract.js", "../../@tsparticles/interaction-external-attract/browser/Attractor.js", "../../@tsparticles/interaction-external-attract/browser/index.js", "../../@tsparticles/interaction-external-bounce/browser/Utils.js", "../../@tsparticles/interaction-external-bounce/browser/Options/Classes/Bounce.js", "../../@tsparticles/interaction-external-bounce/browser/Bouncer.js", "../../@tsparticles/interaction-external-bounce/browser/index.js", "../../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleBase.js", "../../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleDiv.js", "../../@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js", "../../@tsparticles/interaction-external-bubble/browser/Enums.js", "../../@tsparticles/interaction-external-bubble/browser/Utils.js", "../../@tsparticles/interaction-external-bubble/browser/Bubbler.js", "../../@tsparticles/interaction-external-bubble/browser/index.js", "../../@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js", "../../@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js", "../../@tsparticles/interaction-external-connect/browser/Utils.js", "../../@tsparticles/interaction-external-connect/browser/Connector.js", "../../@tsparticles/interaction-external-connect/browser/index.js", "../../@tsparticles/interaction-external-grab/browser/Options/Classes/GrabLinks.js", "../../@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js", "../../@tsparticles/interaction-external-grab/browser/Utils.js", "../../@tsparticles/interaction-external-grab/browser/Grabber.js", "../../@tsparticles/interaction-external-grab/browser/index.js", "../../@tsparticles/interaction-external-pause/browser/Pauser.js", "../../@tsparticles/interaction-external-pause/browser/index.js", "../../@tsparticles/interaction-external-push/browser/Options/Classes/Push.js", "../../@tsparticles/interaction-external-push/browser/Pusher.js", "../../@tsparticles/interaction-external-push/browser/index.js", "../../@tsparticles/interaction-external-remove/browser/Options/Classes/Remove.js", "../../@tsparticles/interaction-external-remove/browser/Remover.js", "../../@tsparticles/interaction-external-remove/browser/index.js", "../../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseBase.js", "../../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseDiv.js", "../../@tsparticles/interaction-external-repulse/browser/Options/Classes/Repulse.js", "../../@tsparticles/interaction-external-repulse/browser/Repulser.js", "../../@tsparticles/interaction-external-repulse/browser/index.js", "../../@tsparticles/interaction-external-slow/browser/Options/Classes/Slow.js", "../../@tsparticles/interaction-external-slow/browser/Slower.js", "../../@tsparticles/interaction-external-slow/browser/index.js", "../../@tsparticles/shape-image/browser/Utils.js", "../../@tsparticles/shape-image/browser/GifUtils/Constants.js", "../../@tsparticles/shape-image/browser/GifUtils/ByteStream.js", "../../@tsparticles/shape-image/browser/GifUtils/Enums/DisposalMethod.js", "../../@tsparticles/shape-image/browser/GifUtils/Types/GIFDataHeaders.js", "../../@tsparticles/shape-image/browser/GifUtils/Utils.js", "../../@tsparticles/shape-image/browser/ImageDrawer.js", "../../@tsparticles/shape-image/browser/Options/Classes/Preload.js", "../../@tsparticles/shape-image/browser/ImagePreloader.js", "../../@tsparticles/shape-image/browser/index.js", "../../@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js", "../../@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js", "../../@tsparticles/updater-life/browser/Options/Classes/Life.js", "../../@tsparticles/updater-life/browser/Utils.js", "../../@tsparticles/updater-life/browser/LifeUpdater.js", "../../@tsparticles/updater-life/browser/index.js", "../../@tsparticles/shape-line/browser/Utils.js", "../../@tsparticles/shape-line/browser/LineDrawer.js", "../../@tsparticles/shape-line/browser/index.js", "../../@tsparticles/move-parallax/browser/ParallaxMover.js", "../../@tsparticles/move-parallax/browser/index.js", "../../@tsparticles/interaction-particles-attract/browser/Attractor.js", "../../@tsparticles/interaction-particles-attract/browser/index.js", "../../@tsparticles/interaction-particles-collisions/browser/Absorb.js", "../../@tsparticles/interaction-particles-collisions/browser/Bounce.js", "../../@tsparticles/interaction-particles-collisions/browser/Destroy.js", "../../@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js", "../../@tsparticles/interaction-particles-collisions/browser/Collider.js", "../../@tsparticles/interaction-particles-collisions/browser/index.js", "../../@tsparticles/interaction-particles-links/browser/CircleWarp.js", "../../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js", "../../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js", "../../@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js", "../../@tsparticles/interaction-particles-links/browser/Linker.js", "../../@tsparticles/interaction-particles-links/browser/interaction.js", "../../@tsparticles/interaction-particles-links/browser/Utils.js", "../../@tsparticles/interaction-particles-links/browser/LinkInstance.js", "../../@tsparticles/interaction-particles-links/browser/LinksPlugin.js", "../../@tsparticles/interaction-particles-links/browser/plugin.js", "../../@tsparticles/interaction-particles-links/browser/index.js", "../../@tsparticles/shape-polygon/browser/Utils.js", "../../@tsparticles/shape-polygon/browser/PolygonDrawerBase.js", "../../@tsparticles/shape-polygon/browser/PolygonDrawer.js", "../../@tsparticles/shape-polygon/browser/TriangleDrawer.js", "../../@tsparticles/shape-polygon/browser/index.js", "../../@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js", "../../@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js", "../../@tsparticles/updater-rotate/browser/RotateUpdater.js", "../../@tsparticles/updater-rotate/browser/index.js", "../../@tsparticles/shape-square/browser/Utils.js", "../../@tsparticles/shape-square/browser/SquareDrawer.js", "../../@tsparticles/shape-square/browser/index.js", "../../@tsparticles/shape-star/browser/Utils.js", "../../@tsparticles/shape-star/browser/StarDrawer.js", "../../@tsparticles/shape-star/browser/index.js", "../../@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js", "../../@tsparticles/updater-stroke-color/browser/index.js", "../../@tsparticles/slim/browser/index.js", "../../@tsparticles/shape-text/browser/Utils.js", "../../@tsparticles/shape-text/browser/TextDrawer.js", "../../@tsparticles/shape-text/browser/index.js", "../../@tsparticles/updater-tilt/browser/TiltDirection.js", "../../@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js", "../../@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js", "../../@tsparticles/updater-tilt/browser/TiltUpdater.js", "../../@tsparticles/updater-tilt/browser/index.js", "../../@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js", "../../@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js", "../../@tsparticles/updater-twinkle/browser/TwinkleUpdater.js", "../../@tsparticles/updater-twinkle/browser/index.js", "../../@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js", "../../@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js", "../../@tsparticles/updater-wobble/browser/Utils.js", "../../@tsparticles/updater-wobble/browser/WobbleUpdater.js", "../../@tsparticles/updater-wobble/browser/index.js", "../../tsparticles/browser/index.js"],
  "sourcesContent": ["import { isNull } from \"@tsparticles/engine\";\nexport class AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull, isNumber } from \"@tsparticles/engine\";\nimport { AbsorberSizeLimit } from \"./AbsorberSizeLimit.js\";\nexport class AbsorberSize extends ValueWithRandom {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if (isNumber(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { AbsorberSize } from \"./AbsorberSize.js\";\nexport class Absorber {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#000000\";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n", "export var AbsorberClickMode;\n(function (AbsorberClickMode) {\n    AbsorberClickMode[\"absorber\"] = \"absorber\";\n})(AbsorberClickMode || (AbsorberClickMode = {}));\n", "import { RotateDirection, Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, originPoint, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, engine, options, position) {\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this._container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this._container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,\n                    y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this._absorbers = absorbers;\n        this._container = container;\n        this._engine = engine;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this._engine, this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this._container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(originPoint.x, originPoint.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this._container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n", "import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { AbsorberInstance } from \"./AbsorberInstance.js\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this._container, this._engine, options, position);\n        this.array.push(absorber);\n        return Promise.resolve(absorber);\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === AbsorberClickMode.absorber) {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this._container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this._container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this._container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { Absorbers } from \"./Absorbers.js\";\nexport class AbsorbersPlugin {\n    constructor(engine) {\n        this.id = \"absorbers\";\n        this._engine = engine;\n    }\n    async getPlugin(container) {\n        return Promise.resolve(new Absorbers(container, this._engine));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\n", "import { AbsorbersPlugin } from \"./AbsorbersPlugin.js\";\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addPlugin(new AbsorbersPlugin(engine), refresh);\n}\nexport * from \"./AbsorberContainer.js\";\nexport * from \"./Enums/AbsorberClickMode.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n", "export var DestroyMode;\n(function (DestroyMode) {\n    DestroyMode[\"none\"] = \"none\";\n    DestroyMode[\"split\"] = \"split\";\n})(DestroyMode || (DestroyMode = {}));\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n", "import { OptionsColor, deepExtend, executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { DestroyBounds } from \"./DestroyBounds.js\";\nimport { DestroyMode } from \"../../Enums/DestroyMode.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = DestroyMode.none;\n        this.split = new Split();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n", "import { PixelMode, getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: PixelMode.precise,\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n", "import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { DestroyMode } from \"./Enums/DestroyMode.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === DestroyMode.split) {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n", "import { DestroyUpdater } from \"./DestroyUpdater.js\";\nexport async function loadDestroyUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"destroy\", container => {\n        return Promise.resolve(new DestroyUpdater(engine, container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { deepExtend, isNull } from \"@tsparticles/engine\";\nimport { EmitterShapeReplace } from \"./EmitterShapeReplace.js\";\nexport class EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = \"square\";\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { PixelMode, isNull } from \"@tsparticles/engine\";\nexport class EmitterSize {\n    constructor() {\n        this.mode = PixelMode.percent;\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { EmitterLife } from \"./EmitterLife.js\";\nimport { EmitterRate } from \"./EmitterRate.js\";\nimport { EmitterShape } from \"./EmitterShape.js\";\nimport { EmitterSize } from \"./EmitterSize.js\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "export var EmitterClickMode;\n(function (EmitterClickMode) {\n    EmitterClickMode[\"emitter\"] = \"emitter\";\n})(EmitterClickMode || (EmitterClickMode = {}));\n", "import { PixelMode, Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this._engine, this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: PixelMode.precise,\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: PixelMode.percent,\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { EmitterInstance } from \"./EmitterInstance.js\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== EmitterClickMode.emitter) {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { Emitters } from \"./Emitters.js\";\nexport class EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return Promise.resolve(new Emitters(this._engine, container));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map(s => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map(s => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode)));\n    }\n}\n", "const shapeGeneratorss = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShapeGenerator(name, generator) {\n        if (!this.getShapeGenerator(name)) {\n            shapeGeneratorss.set(name, generator);\n        }\n    }\n    getShapeGenerator(name) {\n        return shapeGeneratorss.get(name);\n    }\n    getSupportedShapeGenerators() {\n        return shapeGeneratorss.keys();\n    }\n}\n", "export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n", "import { EmittersPlugin } from \"./EmittersPlugin.js\";\nimport { ShapeManager } from \"./ShapeManager.js\";\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n", "import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n", "import { EmittersCircleShapeGenerator } from \"./EmittersCircleShapeGenerator.js\";\nexport async function loadEmittersShapeCircle(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"circle\", new EmittersCircleShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { double, getRandom, half } from \"@tsparticles/engine\";\nconst sides = 4;\nvar Sides;\n(function (Sides) {\n    Sides[Sides[\"TopLeft\"] = 0] = \"TopLeft\";\n    Sides[Sides[\"TopRight\"] = 1] = \"TopRight\";\n    Sides[Sides[\"BottomRight\"] = 2] = \"BottomRight\";\n    Sides[Sides[\"BottomLeft\"] = 3] = \"BottomLeft\";\n})(Sides || (Sides = {}));\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - half);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - half) * double;\n            switch (side) {\n                case Sides.TopLeft:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case Sides.TopRight:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case Sides.BottomRight:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case Sides.BottomLeft:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n", "import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n", "import { EmittersSquareShapeGenerator } from \"./EmittersSquareShapeGenerator.js\";\nexport async function loadEmittersShapeSquare(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"square\", new EmittersSquareShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { deepExtend, isNull, } from \"@tsparticles/engine\";\nexport class Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Trail } from \"./Options/Classes/Trail.js\";\nconst trailMode = \"trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && isInArray(trailMode, events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && isInArray(trailMode, events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new Trail();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n", "import { TrailMaker } from \"./TrailMaker.js\";\nexport async function loadExternalTrailInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalTrail\", container => {\n        return Promise.resolve(new TrailMaker(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Trail.js\";\nexport * from \"./Options/Interfaces/ITrail.js\";\n", "export var RollMode;\n(function (RollMode) {\n    RollMode[\"both\"] = \"both\";\n    RollMode[\"horizontal\"] = \"horizontal\";\n    RollMode[\"vertical\"] = \"vertical\";\n})(RollMode || (RollMode = {}));\n", "import { AlterType, getRandom, getRangeValue, half, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { RollMode } from \"./RollMode.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(engine, particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === RollMode.horizontal || rollOpt.mode === RollMode.both,\n        vertical: rollOpt.mode === RollMode.vertical || rollOpt.mode === RollMode.both,\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(engine, rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= half ? AlterType.darken : AlterType.enlighten;\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: AlterType.darken,\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: AlterType.enlighten,\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { RollLight } from \"./RollLight.js\";\nimport { RollMode } from \"../../RollMode.js\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = RollMode.vertical;\n        this.speed = 25;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { initParticle, updateRoll } from \"./Utils.js\";\nimport { Roll } from \"./Options/Classes/Roll.js\";\nexport class RollUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(this._engine, particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater.js\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"roll\", () => {\n        return Promise.resolve(new RollUpdater(engine));\n    }, refresh);\n}\n", "import { RotateDirection, clamp, getDistance, getDistances, getRandom, getRangeValue, } from \"@tsparticles/engine\";\nconst half = 0.5, double = 2, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01, doublePI = Math.PI * double;\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const spinClockwise = particle.spin.direction === RotateDirection.clockwise, updateFunc = {\n        x: spinClockwise ? Math.cos : Math.sin,\n        y: spinClockwise ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n        particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise,\n        angle: getRandom() * doublePI,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n", "import { getRangeMax, getRangeValue } from \"@tsparticles/engine\";\nimport { applyDistance, getProximitySpeedFactor, initSpin, move, spin } from \"./Utils.js\";\nconst diffFactor = 2, defaultSizeFactor = 1, defaultDeltaFactor = 1;\nexport class BaseMover {\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio;\n        particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio;\n        particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio;\n        const slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = (baseSpeed * sizeFactor * slowFactor * deltaFactor) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n", "import { BaseMover } from \"./BaseMover.js\";\nexport async function loadBaseMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"base\", () => {\n        return Promise.resolve(new BaseMover());\n    }, refresh);\n}\n", "const double = 2, doublePI = Math.PI * double, minAngle = 0, origin = { x: 0, y: 0 };\nexport function drawCircle(data) {\n    const { context, particle, radius } = data;\n    if (!particle.circleRange) {\n        particle.circleRange = { min: minAngle, max: doublePI };\n    }\n    const circleRange = particle.circleRange;\n    context.arc(origin.x, origin.y, radius, circleRange.min, circleRange.max, false);\n}\n", "import { degToRad, isObject } from \"@tsparticles/engine\";\nimport { drawCircle } from \"./Utils.js\";\nconst sides = 12, maxAngle = 360, minAngle = 0;\nexport class CircleDrawer {\n    constructor() {\n        this.validTypes = [\"circle\"];\n    }\n    draw(data) {\n        drawCircle(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: maxAngle,\n            min: minAngle,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: minAngle,\n                max: degToRad(angle),\n            }\n            : { min: degToRad(angle.min), max: degToRad(angle.max) };\n    }\n}\n", "import { CircleDrawer } from \"./CircleDrawer.js\";\nexport async function loadCircleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new CircleDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nexport class ColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(this._engine, particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this._container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle.color, delta);\n    }\n}\n", "import { ColorUpdater } from \"./ColorUpdater.js\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"color\", container => {\n        return Promise.resolve(new ColorUpdater(container, engine));\n    }, refresh);\n}\n", "var RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 4] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nconst shorthandHexRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, hexRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, hexRadix = 16, defaultAlpha = 1, alphaFactor = 0xff;\nexport class HexColorManager {\n    constructor() {\n        this.key = \"hex\";\n        this.stringPrefix = \"#\";\n    }\n    handleColor(color) {\n        return this._parseString(color.value);\n    }\n    handleRangeColor(color) {\n        return this._parseString(color.value);\n    }\n    parseString(input) {\n        return this._parseString(input);\n    }\n    _parseString(hexColor) {\n        if (typeof hexColor !== \"string\") {\n            return;\n        }\n        if (!hexColor?.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const hexFixed = hexColor.replace(shorthandHexRegex, (_, r, g, b, a) => {\n            return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n        }), result = hexRegex.exec(hexFixed);\n        return result\n            ? {\n                a: result[RgbIndexes.a] !== undefined\n                    ? parseInt(result[RgbIndexes.a], hexRadix) / alphaFactor\n                    : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], hexRadix),\n                g: parseInt(result[RgbIndexes.g], hexRadix),\n                r: parseInt(result[RgbIndexes.r], hexRadix),\n            }\n            : undefined;\n    }\n}\n", "import { HexColorManager } from \"./HexColorManager.js\";\nexport async function loadHexColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HexColorManager(), refresh);\n}\n", "import { getRangeValue, hslToRgb, hslaToRgba, parseAlpha, } from \"@tsparticles/engine\";\nvar HslIndexes;\n(function (HslIndexes) {\n    HslIndexes[HslIndexes[\"h\"] = 1] = \"h\";\n    HslIndexes[HslIndexes[\"s\"] = 2] = \"s\";\n    HslIndexes[HslIndexes[\"l\"] = 3] = \"l\";\n    HslIndexes[HslIndexes[\"a\"] = 5] = \"a\";\n})(HslIndexes || (HslIndexes = {}));\nexport class HslColorManager {\n    constructor() {\n        this.key = \"hsl\";\n        this.stringPrefix = \"hsl\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return hslToRgb(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return hslToRgb({\n                h: getRangeValue(hslColor.h),\n                l: getRangeValue(hslColor.l),\n                s: getRangeValue(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsl\")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*[\\s,]\\s*(\\d+)%\\s*[\\s,]\\s*(\\d+)%\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), minLength = 4, defaultAlpha = 1, radix = 10;\n        return result\n            ? hslaToRgba({\n                a: result.length > minLength ? parseAlpha(result[HslIndexes.a]) : defaultAlpha,\n                h: parseInt(result[HslIndexes.h], radix),\n                l: parseInt(result[HslIndexes.l], radix),\n                s: parseInt(result[HslIndexes.s], radix),\n            })\n            : undefined;\n    }\n}\n", "import { HslColorManager } from \"./HslColorManager.js\";\nexport async function loadHslColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HslColorManager(), refresh);\n}\n", "import { getRandom, getRangeValue, initParticleNumericAnimationValue, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity, pxRatio = 1;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, pxRatio);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / percentDenominator) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const none = 0;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? none) <= none ||\n                ((particle.opacity.maxLoops ?? none) > none &&\n                    (particle.opacity.loops ?? none) < (particle.opacity.maxLoops ?? none))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.opacity) {\n            return;\n        }\n        updateAnimation(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);\n    }\n}\n", "import { OpacityUpdater } from \"./OpacityUpdater.js\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"opacity\", container => {\n        return Promise.resolve(new OpacityUpdater(container));\n    }, refresh);\n}\n", "import { OutMode, OutModeDirection, getRangeValue } from \"@tsparticles/engine\";\nconst minVelocity = 0, boundsMin = 0;\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.left && data.direction !== OutModeDirection.right)) {\n        return;\n    }\n    if (data.bounds.right < boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.right &&\n        data.bounds.right >= data.canvasSize.width &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.left && data.bounds.left <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.bottom && data.direction !== OutModeDirection.top)) {\n        return;\n    }\n    if (data.bounds.bottom < boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.top && data.bounds.top <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\n", "import { OutMode, calculateBounds, } from \"@tsparticles/engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils.js\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            OutMode.bounce,\n            OutMode.split,\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const plugin of container.plugins.values()) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n", "import { OutMode, ParticleOutType, Vector, getDistances, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.destroy];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.normal:\n            case ParticleOutType.outside:\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case ParticleOutType.inside: {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;\n                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||\n                    (vy < minVelocity && dy > particle.moveCenter.radius) ||\n                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||\n                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, particle.group, true);\n    }\n}\n", "import { OutMode, OutModeDirection, Vector, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.none];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === OutModeDirection.left || direction === OutModeDirection.right)) ??\n            (particle.options.move.distance.vertical &&\n                (direction === OutModeDirection.top || direction === OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, ParticleOutType, Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"@tsparticles/engine\";\nconst minVelocity = 0, minDistance = 0;\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.out];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.inside: {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= minVelocity && dx >= minDistance) ||\n                    (vy <= minVelocity && dy >= minDistance) ||\n                    (vx >= minVelocity && dx <= minDistance) ||\n                    (vy >= minVelocity && dy <= minDistance)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case ParticleOutType.outside: {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case ParticleOutType.normal: {\n                        const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === OutModeDirection.right &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === OutModeDirection.bottom &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, } from \"@tsparticles/engine\";\nimport { BounceOutMode } from \"./BounceOutMode.js\";\nimport { DestroyOutMode } from \"./DestroyOutMode.js\";\nimport { NoneOutMode } from \"./NoneOutMode.js\";\nimport { OutOutMode } from \"./OutOutMode.js\";\nconst checkOutMode = (outModes, outMode) => {\n    return (outModes.default === outMode ||\n        outModes.bottom === outMode ||\n        outModes.left === outMode ||\n        outModes.right === outMode ||\n        outModes.top === outMode);\n};\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this._addUpdaterIfMissing = (particle, outMode, getUpdater) => {\n            const outModes = particle.options.move.outModes;\n            if (!this.updaters.has(outMode) && checkOutMode(outModes, outMode)) {\n                this.updaters.set(outMode, getUpdater(this.container));\n            }\n        };\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters.values()) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.container = container;\n        this.updaters = new Map();\n    }\n    init(particle) {\n        this._addUpdaterIfMissing(particle, OutMode.bounce, container => new BounceOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.out, container => new OutOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.destroy, container => new DestroyOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.none, container => new NoneOutMode(container));\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, OutModeDirection.bottom);\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, OutModeDirection.left);\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, OutModeDirection.right);\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, OutModeDirection.top);\n    }\n}\n", "import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater.js\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"outModes\", container => {\n        return Promise.resolve(new OutOfCanvasUpdater(container));\n    }, refresh);\n}\n", "import { getRangeValue, parseAlpha, } from \"@tsparticles/engine\";\nvar RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 5] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), radix = 10, minLength = 4, defaultAlpha = 1;\n        return result\n            ? {\n                a: result.length > minLength ? parseAlpha(result[RgbIndexes.a]) : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], radix),\n                g: parseInt(result[RgbIndexes.g], radix),\n                r: parseInt(result[RgbIndexes.r], radix),\n            }\n            : undefined;\n    }\n}\n", "import { RgbColorManager } from \"./RgbColorManager.js\";\nexport async function loadRgbColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new RgbColorManager(), refresh);\n}\n", "import { getRandom, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nconst minLoops = 0;\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / percentDenominator) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? minLoops) <= minLoops ||\n                ((particle.size.maxLoops ?? minLoops) > minLoops &&\n                    (particle.size.loops ?? minLoops) < (particle.size.maxLoops ?? minLoops))));\n    }\n    reset(particle) {\n        particle.size.loops = minLoops;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAnimation(particle, particle.size, true, particle.options.size.animation.destroy, delta);\n    }\n}\n", "import { SizeUpdater } from \"./SizeUpdater.js\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"size\", () => {\n        return Promise.resolve(new SizeUpdater());\n    }, refresh);\n}\n", "import { loadBaseMover } from \"@tsparticles/move-base\";\nimport { loadCircleShape } from \"@tsparticles/shape-circle\";\nimport { loadColorUpdater } from \"@tsparticles/updater-color\";\nimport { loadHexColorPlugin } from \"@tsparticles/plugin-hex-color\";\nimport { loadHslColorPlugin } from \"@tsparticles/plugin-hsl-color\";\nimport { loadOpacityUpdater } from \"@tsparticles/updater-opacity\";\nimport { loadOutModesUpdater } from \"@tsparticles/updater-out-modes\";\nimport { loadRgbColorPlugin } from \"@tsparticles/plugin-rgb-color\";\nimport { loadSizeUpdater } from \"@tsparticles/updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadHexColorPlugin(engine, false);\n    await loadHslColorPlugin(engine, false);\n    await loadRgbColorPlugin(engine, false);\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n", "import { EasingType } from \"@tsparticles/engine\";\nexport async function loadEasingQuadPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addEasing(EasingType.easeInQuad, value => value ** 2, false);\n    await engine.addEasing(EasingType.easeOutQuad, value => 1 - (1 - value) ** 2, false);\n    await engine.addEasing(EasingType.easeInOutQuad, value => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2), false);\n    await engine.refresh(refresh);\n}\n", "export function drawEmoji(data, image) {\n    const { context, opacity } = data, half = 0.5, previousAlpha = context.globalAlpha;\n    if (!image) {\n        return;\n    }\n    const diameter = image.width, radius = diameter * half;\n    context.globalAlpha = opacity;\n    context.drawImage(image, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n", "import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"', noPadding = 0;\nexport class EmojiDrawer {\n    constructor() {\n        this.validTypes = [\"emoji\"];\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, data] of this._emojiShapeDict) {\n            if (data instanceof ImageBitmap) {\n                data?.close();\n            }\n            this._emojiShapeDict.delete(key);\n        }\n    }\n    draw(data) {\n        const key = data.particle.emojiDataKey;\n        if (!key) {\n            return;\n        }\n        const image = this._emojiShapeDict.get(key);\n        if (!image) {\n            return;\n        }\n        drawEmoji(data, image);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (!validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map(t => options.particles.shape.options[t])\n            .find(t => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        particle.emojiDataKey = undefined;\n    }\n    particleInit(_container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData);\n        if (!emoji) {\n            return;\n        }\n        const emojiOptions = typeof emoji === \"string\"\n            ? {\n                font: shapeData.font ?? defaultFont,\n                padding: shapeData.padding ?? noPadding,\n                value: emoji,\n            }\n            : {\n                font: defaultFont,\n                padding: noPadding,\n                ...shapeData,\n                ...emoji,\n            }, font = emojiOptions.font, value = emojiOptions.value;\n        const key = `${value}_${font}`;\n        if (this._emojiShapeDict.has(key)) {\n            particle.emojiDataKey = key;\n            return;\n        }\n        const padding = emojiOptions.padding * double, maxSize = getRangeMax(particle.size.value), fullSize = maxSize + padding, canvasSize = fullSize * double;\n        let image;\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas;\n        }\n        this._emojiShapeDict.set(key, image);\n        particle.emojiDataKey = key;\n    }\n}\n", "import { EmojiDrawer } from \"./EmojiDrawer.js\";\nexport async function loadEmojiShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new EmojiDrawer(), refresh);\n}\n", "import { Circle, Vector, clamp, getDistances, } from \"@tsparticles/engine\";\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(engine, container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = clamp(engine.getEasing(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nexport function clickAttract(engine, container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nexport function hoverAttract(engine, container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = EasingType.easeOutQuad;\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { clickAttract, hoverAttract } from \"./Utils.js\";\nimport { Attract } from \"./Options/Classes/Attract.js\";\nconst attractMode = \"attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== attractMode) {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;\n        if (mouseMoveStatus && hoverEnabled && isInArray(attractMode, hoverMode)) {\n            hoverAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n        else if (clickEnabled && isInArray(attractMode, clickMode)) {\n            clickAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(attractMode, hoverMode) || isInArray(attractMode, clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalAttract\", container => {\n        return Promise.resolve(new Attractor(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Attract.js\";\nexport * from \"./Options/Interfaces/IAttract.js\";\n", "import { Circle, DivType, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, rectBounce, } from \"@tsparticles/engine\";\nconst squareExp = 2, half = 0.5, halfPI = Math.PI * half, double = 2, toleranceFactor = 10, minRadius = 0;\nfunction processBounce(container, position, radius, area, enabledCb) {\n    const query = container.particles.quadTree.query(area, enabledCb);\n    for (const particle of query) {\n        if (area instanceof Circle) {\n            circleBounce(circleBounceDataFromParticle(particle), {\n                position,\n                radius,\n                mass: radius ** squareExp * halfPI,\n                velocity: Vector.origin,\n                factor: Vector.origin,\n            });\n        }\n        else if (area instanceof Rectangle) {\n            rectBounce(particle, calculateBounds(position, radius));\n        }\n    }\n}\nfunction singleSelectorBounce(container, selector, div, bounceCb) {\n    const query = document.querySelectorAll(selector);\n    if (!query.length) {\n        return;\n    }\n    query.forEach(item => {\n        const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n            x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n        }, radius = elem.offsetWidth * half * pxRatio, tolerance = toleranceFactor * pxRatio, area = div.type === DivType.circle\n            ? new Circle(pos.x, pos.y, radius + tolerance)\n            : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * double, elem.offsetHeight * pxRatio + tolerance * double);\n        bounceCb(pos, radius, area);\n    });\n}\nexport function divBounce(container, divs, bounceMode, enabledCb) {\n    divModeExecute(bounceMode, divs, (selector, div) => singleSelectorBounce(container, selector, div, (pos, radius, area) => processBounce(container, pos, radius, area, enabledCb)));\n}\nexport function mouseBounce(container, enabledCb) {\n    const pxRatio = container.retina.pixelRatio, tolerance = toleranceFactor * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n    if (!radius || radius < minRadius || !mousePos) {\n        return;\n    }\n    processBounce(container, mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance), enabledCb);\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { divBounce, mouseBounce } from \"./Utils.js\";\nimport { Bounce } from \"./Options/Classes/Bounce.js\";\nconst bounceMode = \"bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(bounceMode, hoverMode)) {\n            mouseBounce(this.container, p => this.isEnabled(p));\n        }\n        else {\n            divBounce(this.container, divs, bounceMode, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((!!mouse.position && events.onHover.enable && isInArray(bounceMode, events.onHover.mode)) ||\n            isDivModeEnabled(bounceMode, divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Bouncer } from \"./Bouncer.js\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBounce\", container => {\n        return Promise.resolve(new Bouncer(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Bounce.js\";\nexport * from \"./Options/Interfaces/IBounce.js\";\n", "import { OptionsColor, executeOnSingleOrMultiple, isArray, isNull, } from \"@tsparticles/engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, color => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nimport { BubbleDiv } from \"./BubbleDiv.js\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "export var ProcessBubbleType;\n(function (ProcessBubbleType) {\n    ProcessBubbleType[\"color\"] = \"color\";\n    ProcessBubbleType[\"opacity\"] = \"opacity\";\n    ProcessBubbleType[\"size\"] = \"size\";\n})(ProcessBubbleType || (ProcessBubbleType = {}));\n", "import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { ProcessBubbleType } from \"./Enums.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: ProcessBubbleType.size,\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: ProcessBubbleType.opacity,\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(this._engine, bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        this._engine = engine;\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n", "import { Bubbler } from \"./Bubbler.js\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBubble\", container => {\n        return Promise.resolve(new Bubbler(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/BubbleBase.js\";\nexport * from \"./Options/Classes/BubbleDiv.js\";\nexport * from \"./Options/Classes/Bubble.js\";\nexport * from \"./Options/Interfaces/IBubbleBase.js\";\nexport * from \"./Options/Interfaces/IBubbleDiv.js\";\nexport * from \"./Options/Interfaces/IBubble.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { ConnectLinks } from \"./ConnectLinks.js\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw(ctx => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n", "import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Connector } from \"./Connector.js\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalConnect\", container => {\n        return Promise.resolve(new Connector(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Connect.js\";\nexport * from \"./Options/Classes/ConnectLinks.js\";\nexport * from \"./Options/Interfaces/IConnect.js\";\nexport * from \"./Options/Interfaces/IConnectLinks.js\";\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { GrabLinks } from \"./GrabLinks.js\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n    }\n}\n", "import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw(ctx => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n", "import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Grabber } from \"./Grabber.js\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalGrab\", container => {\n        return Promise.resolve(new Grabber(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Grab.js\";\nexport * from \"./Options/Classes/GrabLinks.js\";\nexport * from \"./Options/Interfaces/IGrab.js\";\nexport * from \"./Options/Interfaces/IGrabLinks.js\";\n", "import { ExternalInteractorBase } from \"@tsparticles/engine\";\nconst pauseMode = \"pause\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pauseMode) {\n                return;\n            }\n            const container = this.container;\n            if (container.animationStatus) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n", "import { Pauser } from \"./Pauser.js\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPause\", container => {\n        return Promise.resolve(new Pauser(container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map(t => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"@tsparticles/engine\";\nimport { Push } from \"./Options/Classes/Push.js\";\nconst pushMode = \"push\", minQuantity = 0;\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pushMode) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= minQuantity) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            void container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Pusher } from \"./Pusher.js\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPush\", container => {\n        return Promise.resolve(new Pusher(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Push.js\";\nexport * from \"./Options/Interfaces/IPush.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, } from \"@tsparticles/engine\";\nimport { Remove } from \"./Options/Classes/Remove.js\";\nconst removeMode = \"remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== removeMode) {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Remover } from \"./Remover.js\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRemove\", container => {\n        return Promise.resolve(new Remover(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Remove.js\";\nexport * from \"./Options/Interfaces/IRemove.js\";\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = EasingType.easeOutQuad;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nimport { RepulseDiv } from \"./RepulseDiv.js\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, isDivModeEnabled, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Repulse } from \"./Options/Classes/Repulse.js\";\nconst repulseMode = \"repulse\", minDistance = 0, repulseRadiusFactor = 6, repulseRadiusPower = 3, squarePower = 2, minRadius = 0, minSpeed = 0, easingOffset = 1, half = 0.5;\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse ?? { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < minDistance) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / repulseRadiusFactor, repulseRadiusPower), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, p => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** squarePower, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < minRadius || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, p => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const { easing, speed, factor, maxSpeed } = repulseOptions, easingFunc = this._engine.getEasing(easing), velocity = (divRepulse?.speed ?? speed) * factor;\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), repulseFactor = clamp(easingFunc(easingOffset - distance / repulseRadius) * velocity, minSpeed, maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * repulseFactor, !distance ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== repulseMode) {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(repulseMode, hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(repulseMode, clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(repulseMode, divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(repulseMode, divs);\n        if (!(divRepulse || (hover.enable && !!mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(repulseMode, hoverMode) || isInArray(repulseMode, clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Repulser } from \"./Repulser.js\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRepulse\", container => {\n        return Promise.resolve(new Repulser(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/RepulseBase.js\";\nexport * from \"./Options/Classes/RepulseDiv.js\";\nexport * from \"./Options/Classes/Repulse.js\";\nexport * from \"./Options/Interfaces/IRepulseBase.js\";\nexport * from \"./Options/Interfaces/IRepulseDiv.js\";\nexport * from \"./Options/Interfaces/IRepulse.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ExternalInteractorBase, getDistance, isInArray, } from \"@tsparticles/engine\";\nimport { Slow } from \"./Options/Classes/Slow.js\";\nconst slowMode = \"slow\", minRadius = 0;\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(slowMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < minRadius || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n", "import { Slower } from \"./Slower.js\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalSlow\", container => {\n        return Promise.resolve(new Slower(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Slow.js\";\nexport * from \"./Options/Interfaces/ISlow.js\";\n", "import { errorPrefix, getLogger, getStyleFromHsl } from \"@tsparticles/engine\";\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(stringStart, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise(resolve => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener(\"error\", () => void errorHandler());\n        img.src = url;\n    });\n}\n", "export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n", "export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n", "export var DisposalMethod;\n(function (DisposalMethod) {\n    DisposalMethod[DisposalMethod[\"Replace\"] = 0] = \"Replace\";\n    DisposalMethod[DisposalMethod[\"Combine\"] = 1] = \"Combine\";\n    DisposalMethod[DisposalMethod[\"RestoreBackground\"] = 2] = \"RestoreBackground\";\n    DisposalMethod[DisposalMethod[\"RestorePrevious\"] = 3] = \"RestorePrevious\";\n    DisposalMethod[DisposalMethod[\"UndefinedA\"] = 4] = \"UndefinedA\";\n    DisposalMethod[DisposalMethod[\"UndefinedB\"] = 5] = \"UndefinedB\";\n    DisposalMethod[DisposalMethod[\"UndefinedC\"] = 6] = \"UndefinedC\";\n    DisposalMethod[DisposalMethod[\"UndefinedD\"] = 7] = \"UndefinedD\";\n})(DisposalMethod || (DisposalMethod = {}));\n", "export var GIFDataHeaders;\n(function (GIFDataHeaders) {\n    GIFDataHeaders[GIFDataHeaders[\"Extension\"] = 33] = \"Extension\";\n    GIFDataHeaders[GIFDataHeaders[\"ApplicationExtension\"] = 255] = \"ApplicationExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"GraphicsControlExtension\"] = 249] = \"GraphicsControlExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"PlainTextExtension\"] = 1] = \"PlainTextExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"CommentExtension\"] = 254] = \"CommentExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"Image\"] = 44] = \"Image\";\n    GIFDataHeaders[GIFDataHeaders[\"EndOfFile\"] = 59] = \"EndOfFile\";\n})(GIFDataHeaders || (GIFDataHeaders = {}));\n", "import { loadImage } from \"../Utils.js\";\nimport { InterlaceOffsets, InterlaceSteps } from \"./Constants.js\";\nimport { ByteStream } from \"./ByteStream.js\";\nimport { DisposalMethod } from \"./Enums/DisposalMethod.js\";\nimport { GIFDataHeaders } from \"./Types/GIFDataHeaders.js\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.GraphicsControlExtension: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case GIFDataHeaders.ApplicationExtension: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case GIFDataHeaders.CommentExtension: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case GIFDataHeaders.PlainTextExtension: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.EndOfFile:\n            return true;\n        case GIFDataHeaders.Image:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case GIFDataHeaders.Extension:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: DisposalMethod.Replace,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nexport function drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case DisposalMethod.UndefinedA:\n        case DisposalMethod.UndefinedB:\n        case DisposalMethod.UndefinedC:\n        case DisposalMethod.UndefinedD:\n        case DisposalMethod.Replace:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case DisposalMethod.Combine:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case DisposalMethod.RestoreBackground:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case DisposalMethod.RestorePrevious:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n", "import { errorPrefix } from \"@tsparticles/engine\";\nimport { replaceImageColor } from \"./Utils.js\";\nimport { drawGif } from \"./GifUtils/Utils.js\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.validTypes = [\"image\", \"images\"];\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            void this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        void (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height\n                        ? imageData.width / imageData.height\n                        : (image.ratio ?? defaultRatio),\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.shapeFill = imageShape.fill;\n            particle.shapeClose = imageShape.close;\n        })();\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { Preload } from \"./Options/Classes/Preload.js\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    async getPlugin() {\n        await Promise.resolve();\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source?.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find(t => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { ImageDrawer } from \"./ImageDrawer.js\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nimport { loadGifImage } from \"./GifUtils/Utils.js\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape(new ImageDrawer(engine), refresh);\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n", "import { getRangeValue, millisecondsToSeconds, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nexport function updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;\n        life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;\n    }\n}\n", "import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nimport { updateLife } from \"./Utils.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n", "import { LifeUpdater } from \"./LifeUpdater.js\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"life\", async (container) => {\n        return Promise.resolve(new LifeUpdater(container));\n    }, refresh);\n}\n", "export function drawLine(data) {\n    const { context, particle, radius } = data, shapeData = particle.shapeData, centerY = 0;\n    context.moveTo(-radius, centerY);\n    context.lineTo(radius, centerY);\n    context.lineCap = shapeData?.cap ?? \"butt\";\n}\n", "import { drawLine } from \"./Utils.js\";\nconst sides = 1;\nexport class LineDrawer {\n    constructor() {\n        this.validTypes = [\"line\"];\n    }\n    draw(data) {\n        drawLine(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { LineDrawer } from \"./LineDrawer.js\";\nexport async function loadLineShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new LineDrawer(), refresh);\n}\n", "import { isSsr } from \"@tsparticles/engine\";\nconst half = 0.5;\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width * half,\n            y: canvasSize.height * half,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n", "import { ParallaxMover } from \"./ParallaxMover.js\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"parallax\", () => {\n        return Promise.resolve(new ParallaxMover());\n    }, refresh);\n}\n", "import { ParticlesInteractorBase, getDistances, getRangeValue, } from \"@tsparticles/engine\";\nconst attractFactor = 1000, identity = 1;\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesAttract\", container => {\n        return Promise.resolve(new Attractor(container));\n    }, refresh);\n}\n", "import { clamp } from \"@tsparticles/engine\";\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n", "import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"@tsparticles/engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n", "import { bounce } from \"./Bounce.js\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n", "import { CollisionMode } from \"@tsparticles/engine\";\nimport { absorb } from \"./Absorb.js\";\nimport { bounce } from \"./Bounce.js\";\nimport { destroy } from \"./Destroy.js\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case CollisionMode.absorb: {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case CollisionMode.bounce: {\n            bounce(p1, p2);\n            break;\n        }\n        case CollisionMode.destroy: {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n", "import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n", "import { Collider } from \"./Collider.js\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesCollisions\", container => {\n        return Promise.resolve(new Collider(container));\n    }, refresh);\n}\n", "import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nimport { LinksShadow } from \"./LinksShadow.js\";\nimport { LinksTriangle } from \"./LinksTriangle.js\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n", "import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._setColor = p1 => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this._linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this._linkContainer = container;\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        this._linkContainer.particles.linksColor = undefined;\n        this._linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some(t => t.destination === p2) ||\n                p2.links.some(t => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Linker } from \"./Linker.js\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", async (container) => {\n        return Promise.resolve(new Linker(container, engine));\n    }, refresh);\n}\n", "import { drawLine, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"@tsparticles/engine\";\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, engine, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(engine, shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map(t => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n", "import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\nexport class LinkInstance {\n    constructor(container, engine) {\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw(ctx => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(this._engine, twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    engine: this._engine,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw(ctx => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter(t => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex(l => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._container = container;\n        this._engine = engine;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter(l => options.links &&\n            (options.links.frequency >= maxFrequency ||\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this._container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n", "import { LinkInstance } from \"./LinkInstance.js\";\nexport class LinksPlugin {\n    constructor(engine) {\n        this.id = \"links\";\n        this._engine = engine;\n    }\n    getPlugin(container) {\n        return Promise.resolve(new LinkInstance(container, this._engine));\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { LinksPlugin } from \"./LinksPlugin.js\";\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\n", "import { loadLinksInteraction } from \"./interaction.js\";\nimport { loadLinksPlugin } from \"./plugin.js\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links.js\";\nexport * from \"./Options/Classes/LinksShadow.js\";\nexport * from \"./Options/Classes/LinksTriangle.js\";\nexport * from \"./Options/Interfaces/ILinks.js\";\nexport * from \"./Options/Interfaces/ILinksShadow.js\";\nexport * from \"./Options/Interfaces/ILinksTriangle.js\";\n", "import { degToRad } from \"@tsparticles/engine\";\nconst piDeg = 180, origin = { x: 0, y: 0 }, sidesOffset = 2;\nexport function drawPolygon(data, start, side) {\n    const { context } = data, sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (piDeg * (decimalSides - sidesOffset)) / decimalSides, interiorAngle = Math.PI - degToRad(interiorAngleDegrees);\n    if (!context) {\n        return;\n    }\n    context.beginPath();\n    context.translate(start.x, start.y);\n    context.moveTo(origin.x, origin.y);\n    for (let i = 0; i < sideCount; i++) {\n        context.lineTo(side.length, origin.y);\n        context.translate(side.length, origin.y);\n        context.rotate(interiorAngle);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawPolygon } from \"./Utils.js\";\nconst defaultSides = 5;\nexport class PolygonDrawerBase {\n    draw(data) {\n        const { particle, radius } = data, start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius);\n        drawPolygon(data, start, side);\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? defaultSides));\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst sidesCenterFactor = 3.5, yFactor = 2.66, sidesFactor = 3;\nexport class PolygonDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"polygon\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / sidesCenterFactor),\n            y: -radius / (yFactor / sidesCenterFactor),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * yFactor) / (sides / sidesFactor),\n        };\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst yFactor = 1.66, sides = 3, double = 2;\nexport class TriangleDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"triangle\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / yFactor,\n        };\n    }\n    getSidesCount() {\n        return sides;\n    }\n    getSidesData(particle, radius) {\n        const diameter = radius * double;\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: diameter,\n        };\n    }\n}\n", "import { PolygonDrawer } from \"./PolygonDrawer.js\";\nimport { TriangleDrawer } from \"./TriangleDrawer.js\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { RotateDirection, ValueWithRandom, isNull, } from \"@tsparticles/engine\";\nimport { RotateAnimation } from \"./RotateAnimation.js\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = RotateDirection.clockwise;\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, RotateDirection, degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: degToRad(getRangeValue(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === RotateDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            rotateDirection = index > minIndex ? RotateDirection.counterClockwise : RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.rotate.status = AnimationStatus.decreasing;\n                break;\n            case RotateDirection.clockwise:\n                particle.rotate.status = AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && (!!rotate.value || rotate.animation.enable || rotate.path);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        particle.isRotating = !!particle.rotate;\n        if (!particle.rotate) {\n            return;\n        }\n        updateAnimation(particle, particle.rotate, false, DestroyType.none, delta);\n        particle.rotation = particle.rotate.value;\n    }\n}\n", "import { RotateUpdater } from \"./RotateUpdater.js\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"rotate\", container => {\n        return Promise.resolve(new RotateUpdater(container));\n    }, refresh);\n}\n", "const fixFactorSquared = 2, fixFactor = Math.sqrt(fixFactorSquared), double = 2;\nexport function drawSquare(data) {\n    const { context, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double;\n    context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n}\n", "import { drawSquare } from \"./Utils.js\";\nconst sides = 4;\nexport class SquareDrawer {\n    constructor() {\n        this.validTypes = [\"edge\", \"square\"];\n    }\n    draw(data) {\n        drawSquare(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { SquareDrawer } from \"./SquareDrawer.js\";\nexport async function loadSquareShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new SquareDrawer(), refresh);\n}\n", "const defaultInset = 2, origin = { x: 0, y: 0 };\nexport function drawStar(data) {\n    const { context, particle, radius } = data, sides = particle.sides, inset = particle.starInset ?? defaultInset;\n    context.moveTo(origin.x, origin.y - radius);\n    for (let i = 0; i < sides; i++) {\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius * inset);\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawStar } from \"./Utils.js\";\nconst defaultInset = 2, defaultSides = 5;\nexport class StarDrawer {\n    constructor() {\n        this.validTypes = [\"star\"];\n    }\n    draw(data) {\n        drawStar(data);\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? defaultSides));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData;\n        particle.starInset = getRangeValue(star?.inset ?? defaultInset);\n    }\n}\n", "import { StarDrawer } from \"./StarDrawer.js\";\nexport async function loadStarShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new StarDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const container = this._container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(this._engine, stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n    }\n}\n", "import { StrokeColorUpdater } from \"./StrokeColorUpdater.js\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"strokeColor\", container => {\n        return Promise.resolve(new StrokeColorUpdater(container, engine));\n    }, refresh);\n}\n", "import { loadBasic } from \"@tsparticles/basic\";\nimport { loadEasingQuadPlugin } from \"@tsparticles/plugin-easing-quad\";\nimport { loadEmojiShape } from \"@tsparticles/shape-emoji\";\nimport { loadExternalAttractInteraction } from \"@tsparticles/interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"@tsparticles/interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"@tsparticles/interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"@tsparticles/interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"@tsparticles/interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"@tsparticles/interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"@tsparticles/interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"@tsparticles/interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"@tsparticles/interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"@tsparticles/interaction-external-slow\";\nimport { loadImageShape } from \"@tsparticles/shape-image\";\nimport { loadLifeUpdater } from \"@tsparticles/updater-life\";\nimport { loadLineShape } from \"@tsparticles/shape-line\";\nimport { loadParallaxMover } from \"@tsparticles/move-parallax\";\nimport { loadParticlesAttractInteraction } from \"@tsparticles/interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"@tsparticles/interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"@tsparticles/interaction-particles-links\";\nimport { loadPolygonShape } from \"@tsparticles/shape-polygon\";\nimport { loadRotateUpdater } from \"@tsparticles/updater-rotate\";\nimport { loadSquareShape } from \"@tsparticles/shape-square\";\nimport { loadStarShape } from \"@tsparticles/shape-star\";\nimport { loadStrokeColorUpdater } from \"@tsparticles/updater-stroke-color\";\nexport async function loadSlim(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin(engine, false);\n    await loadEmojiShape(engine, false);\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n", "import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n", "import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport class TextDrawer {\n    constructor() {\n        this.validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\n    }\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map(t => options.particles.shape.options[t])\n                .find(t => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !this.validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n", "import { TextDrawer } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TextDrawer(), refresh);\n}\n", "export var TiltDirection;\n(function (TiltDirection) {\n    TiltDirection[\"clockwise\"] = \"clockwise\";\n    TiltDirection[\"counterClockwise\"] = \"counter-clockwise\";\n    TiltDirection[\"random\"] = \"random\";\n})(TiltDirection || (TiltDirection = {}));\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nimport { TiltDirection } from \"../../TiltDirection.js\";\nimport { TiltAnimation } from \"./TiltAnimation.js\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = TiltDirection.clockwise;\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, degToRad, getRandom, getRangeValue, half, updateAnimation, } from \"@tsparticles/engine\";\nimport { Tilt } from \"./Options/Classes/Tilt.js\";\nimport { TiltDirection } from \"./TiltDirection.js\";\nconst identity = 1, double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: degToRad(getRangeValue(tiltOptions.value)),\n            sinDirection: getRandom() >= half ? identity : -identity,\n            cosDirection: getRandom() >= half ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === TiltDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            tiltDirection = index > minIndex ? TiltDirection.counterClockwise : TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.tilt.status = AnimationStatus.decreasing;\n                break;\n            case TiltDirection.clockwise:\n                particle.tilt.status = AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity =\n                (getRangeValue(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        updateAnimation(particle, particle.tilt, false, DestroyType.none, delta);\n        await Promise.resolve();\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater.js\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"tilt\", container => {\n        return Promise.resolve(new TiltUpdater(container));\n    }, refresh);\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n", "import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(this._engine, twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n", "import { TwinkleUpdater } from \"./TwinkleUpdater.js\";\nexport async function loadTwinkleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"twinkle\", () => {\n        return Promise.resolve(new TwinkleUpdater(engine));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { isNull, isNumber, setRangeValue, } from \"@tsparticles/engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed.js\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n", "import { getRandom, getRangeValue, } from \"@tsparticles/engine\";\nimport { Wobble } from \"./Options/Classes/Wobble.js\";\nimport { updateWobble } from \"./Utils.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * doublePI,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            getRangeValue(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater.js\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"wobble\", container => {\n        return Promise.resolve(new WobbleUpdater(container));\n    }, refresh);\n}\n", "import { loadAbsorbersPlugin } from \"@tsparticles/plugin-absorbers\";\nimport { loadDestroyUpdater } from \"@tsparticles/updater-destroy\";\nimport { loadEmittersPlugin } from \"@tsparticles/plugin-emitters\";\nimport { loadEmittersShapeCircle } from \"@tsparticles/plugin-emitters-shape-circle\";\nimport { loadEmittersShapeSquare } from \"@tsparticles/plugin-emitters-shape-square\";\nimport { loadExternalTrailInteraction } from \"@tsparticles/interaction-external-trail\";\nimport { loadRollUpdater } from \"@tsparticles/updater-roll\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { loadTextShape } from \"@tsparticles/shape-text\";\nimport { loadTiltUpdater } from \"@tsparticles/updater-tilt\";\nimport { loadTwinkleUpdater } from \"@tsparticles/updater-twinkle\";\nimport { loadWobbleUpdater } from \"@tsparticles/updater-wobble\";\nexport async function loadFull(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadTextShape(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadEmittersShapeCircle(engine, false);\n    await loadEmittersShapeSquare(engine, false);\n    await loadSlim(engine, refresh);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACO,IAAM,oBAAN,MAAwB;AAAA,EAC3B,cAAc;AACV,SAAK,SAAS;AACd,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;ACfO,IAAM,eAAN,cAA2B,gBAAgB;AAAA,EAC9C,cAAc;AACV,UAAM;AACN,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,QAAQ,IAAI,kBAAkB;AAAA,EACvC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,UAAM,KAAK,IAAI;AACf,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,SAAS,KAAK,KAAK,GAAG;AACtB,WAAK,MAAM,SAAS,KAAK;AAAA,IAC7B,OACK;AACD,WAAK,MAAM,KAAK,KAAK,KAAK;AAAA,IAC9B;AAAA,EACJ;AACJ;;;ACtBO,IAAM,WAAN,MAAe;AAAA,EAClB,cAAc;AACV,SAAK,QAAQ,IAAI,aAAa;AAC9B,SAAK,MAAM,QAAQ;AACnB,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,OAAO,IAAI,aAAa;AAAA,EACjC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AAAA,IAC3D;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,SAAK,OAAO,KAAK;AACjB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,CAAC;AACjB,UAAI,KAAK,SAAS,MAAM,QAAW;AAC/B,aAAK,SAAS,IAAI,cAAc,KAAK,SAAS,CAAC;AAAA,MACnD;AACA,UAAI,KAAK,SAAS,MAAM,QAAW;AAC/B,aAAK,SAAS,IAAI,cAAc,KAAK,SAAS,CAAC;AAAA,MACnD;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IAC5B;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;AC7CO,IAAI;AAAA,CACV,SAAUA,oBAAmB;AAC1B,EAAAA,mBAAkB,UAAU,IAAI;AACpC,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;;;ACDhD,IAAM,YAAY;AAAlB,IAAqB,eAAe;AAApC,IAA2C,iBAAiB;AAA5D,IAA+D,YAAY;AAA3E,IAA8E,UAAU;AAAxF,IAA2F,WAAW;AAAtG,IAAyGC,UAAS;AAAlH,IAAqH,WAAW,KAAK,KAAKA;AAA1I,IAAkJ,cAAc;AACzJ,IAAM,mBAAN,MAAuB;AAAA,EAC1B,YAAY,WAAW,WAAW,QAAQ,SAAS,UAAU;AAJjE;AAKQ,SAAK,gBAAgB,MAAM;AACvB,YAAM,gBAAgB,mCAAmC;AAAA,QACrD,MAAM,KAAK,WAAW,OAAO;AAAA,QAC7B,UAAU,KAAK,QAAQ;AAAA,MAC3B,CAAC;AACD,aAAO,OAAO,OAAO,cAAc,GAAG,cAAc,CAAC;AAAA,IACzD;AACA,SAAK,0BAA0B,CAAC,UAAU,MAAM;AAC5C,UAAI,SAAS,WAAW;AACpB;AAAA,MACJ;AACA,YAAMC,aAAY,KAAK,YAAY,aAAaA,WAAU,OAAO;AACjE,UAAI,SAAS,kBAAkB;AAC3B,cAAM,cAAc,6BAA6B,EAAE,MAAM,WAAW,CAAC;AACrE,iBAAS,SAAS,MAAM,WAAW;AACnC,iBAAS,SAAS,MAAM,SAAS,eAAe;AAChD,iBAAS,gBAAgB;AACzB,iBAAS,mBAAmB;AAAA,MAChC;AACA,UAAI,KAAK,QAAQ,QAAQ;AACrB,YAAI,SAAS,kBAAkB,QAAW;AACtC,mBAAS,gBAAgB,OAAO;AAChC,mBAAS,cAAc,SAAS,YAAY,SAAS,YAAY,GAAG,KAAK,QAAQ;AACjF,mBAAS,cAAc,QAAQ,UAAU,IAAI;AAAA,QACjD;AACA,YAAI,SAAS,cAAc,UAAU,KAAK,QAAQ,CAAC,KAAK,QAAQ,SAAS;AACrE,gBAAM,UAAU,KAAK,IAAI,WAAW,OAAO,WAAW,MAAM,GAAG,SAAS,GAAG,eAAe,KAAK,eAAe;AAC9G,mBAAS,cAAc,SAAS,WAAW,UAAU,UAAU,IAAI,eAAe;AAAA,QACtF;AACA,YAAI,SAAS,2BAA2B,QAAW;AAC/C,mBAAS,yBACL,SAAS,SAAS,KAAK,cAAc,gBAAgB,YAAY,gBAAgB;AAAA,QACzF;AACA,cAAM,cAAc,SAAS,cAAc,QAAQ,aAAa,SAAS,cAAc,OAAO,iBAAiB,SAAS;AACxH,iBAAS,SAAS,MAAM,OAAO,MAAM;AACrC,cAAM,aAAa;AAAA,UACf,GAAG,mBAAmB,gBAAgB,YAAY,KAAK,MAAM,KAAK;AAAA,UAClE,GAAG,mBAAmB,gBAAgB,YAAY,KAAK,MAAM,KAAK;AAAA,QACtE;AACA,iBAAS,SAAS,IAAI,KAAK,SAAS,IAAI,cAAc,WAAW,EAAE,UAAU;AAC7E,iBAAS,SAAS,IAAI,KAAK,SAAS,IAAI,cAAc,WAAW,EAAE,UAAU;AAC7E,iBAAS,cAAc,UAAU,EAAE;AACnC,iBAAS,cAAc,UAChB,SAAS,OAAO,aAAa,eAAeA,WAAU,OAAO,aAAc,qBAC1EA,WAAU,OAAO;AAAA,MAC7B,OACK;AACD,cAAM,OAAO,OAAO;AACpB,aAAK,SAAS,EAAE;AAChB,aAAK,QAAQ,EAAE;AACf,iBAAS,SAAS,MAAM,IAAI;AAAA,MAChC;AAAA,IACJ;AACA,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,kBAAkB,WAAW,OAAO,OAAO,SAAS,GAAG,SAAS,CAAC,IAAI;AAC1E,QAAI,mBAAmB,UAAU;AAC7B,WAAK,UAAU;AAAA,IACnB,OACK;AACD,WAAK,UAAU,IAAI,SAAS;AAC5B,WAAK,QAAQ,KAAK,OAAO;AAAA,IAC7B;AACA,SAAK,WAAW;AAChB,SAAK,OAAO,KAAK,QAAQ;AACzB,SAAK,UAAU,KAAK,QAAQ;AAC5B,SAAK,OAAO,cAAc,KAAK,QAAQ,KAAK,KAAK,IAAI,UAAU,OAAO;AACtE,SAAK,OAAO,KAAK,OAAO,KAAK,QAAQ,KAAK,UAAU,UAAU,OAAO;AACrE,UAAM,QAAQ,KAAK,QAAQ,KAAK;AAChC,SAAK,QAAQ;AAAA,MACT,QAAQ,MAAM,SAAS,UAAU,OAAO,aAAa,UAAU,OAAO;AAAA,MACtE,MAAM,MAAM;AAAA,IAChB;AACA,SAAK,QAAQ,gBAAgB,KAAK,SAAS,KAAK,QAAQ,KAAK,KAAK;AAAA,MAC9D,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AACA,SAAK,aAAW,UAAK,oBAAL,mBAAsB,WAAU,KAAK,cAAc;AAAA,EACvE;AAAA,EACA,QAAQ,UAAU;AACd,UAAM,YAAY,KAAK,YAAY,UAAU,KAAK;AAClD,QAAI,QAAQ,WAAW;AACnB,YAAM,QAAQ,UAAU,cAAc;AACtC,UAAI,MAAM,YAAY,MAAM,cAAc;AACtC,cAAM,YAAY,YAAY,KAAK,UAAU,MAAM,YAAY;AAC/D,YAAI,aAAa,KAAK,MAAM;AACxB,eAAK,WAAW;AAAA,QACpB;AAAA,MACJ,OACK;AACD,aAAK,WAAW;AAAA,MACpB;AACA,UAAI,KAAK,YAAY,MAAM,UAAU;AACjC,aAAK,SAAS,IAAI,MAAM,SAAS;AACjC,aAAK,SAAS,IAAI,MAAM,SAAS;AAAA,MACrC;AAAA,IACJ;AACA,UAAM,MAAM,SAAS,YAAY,GAAG,EAAE,IAAI,IAAI,SAAS,IAAI,aAAa,KAAK,UAAU,GAAG,GAAG,IAAI,OAAO,OAAO,IAAI,EAAE;AACrH,MAAE,SAAU,KAAK,OAAO,KAAK,IAAI,UAAU,SAAS,IAAK,UAAU,OAAO;AAC1E,QAAI,WAAW,KAAK,OAAO,SAAS,UAAU,GAAG;AAC7C,YAAM,aAAa,SAAS,UAAU,IAAI,eAAe,UAAU,OAAO;AAC1E,UAAK,KAAK,OAAO,SAAS,UAAU,KAAK,WAAW,KAAK,OAAO,SAAS,UAAU,KAC9E,SAAS,kBAAkB,UAAa,SAAS,cAAc,SAAS,gBAAiB;AAC1F,YAAI,QAAQ,SAAS;AACjB,mBAAS,QAAQ;AAAA,QACrB,OACK;AACD,mBAAS,mBAAmB;AAC5B,eAAK,wBAAwB,UAAU,CAAC;AAAA,QAC5C;AAAA,MACJ,OACK;AACD,YAAI,QAAQ,SAAS;AACjB,mBAAS,KAAK,SAAS;AAAA,QAC3B;AACA,aAAK,wBAAwB,UAAU,CAAC;AAAA,MAC5C;AACA,UAAI,KAAK,MAAM,UAAU,aAAa,KAAK,OAAO,KAAK,MAAM,QAAQ;AACjE,aAAK,QAAQ;AAAA,MACjB;AACA,UAAI,KAAK,MAAM,QAAQ,WAAW,KAAK,OAAO,KAAK,MAAM,MAAM;AAC3D,aAAK,QAAQ,aAAa,KAAK,QAAQ,KAAK,UAAU,UAAU,OAAO;AAAA,MAC3E;AAAA,IACJ,OACK;AACD,WAAK,wBAAwB,UAAU,CAAC;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,KAAK,SAAS;AACV,YAAQ,UAAU,KAAK,SAAS,GAAG,KAAK,SAAS,CAAC;AAClD,YAAQ,UAAU;AAClB,YAAQ,IAAI,YAAY,GAAG,YAAY,GAAG,KAAK,MAAM,UAAU,UAAU,KAAK;AAC9E,YAAQ,UAAU;AAClB,YAAQ,YAAY,gBAAgB,KAAK,OAAO,KAAK,OAAO;AAC5D,YAAQ,KAAK;AAAA,EACjB;AAAA,EACA,SAAS;AACL,UAAM,kBAAkB,KAAK;AAC7B,SAAK,WACD,mBAAmB,cAAc,iBAAiB,KAAK,WAAW,OAAO,MAAM,OAAO,MAAM,IACtF,kBACA,KAAK,cAAc;AAAA,EACjC;AACJ;;;ACnJA,IAAM,eAAe;AACd,IAAM,YAAN,MAAgB;AAAA,EACnB,YAAY,WAAW,QAAQ;AAC3B,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,QAAQ,CAAC;AACd,SAAK,YAAY,CAAC;AAClB,SAAK,yBAAyB,CAAC;AAC/B,cAAU,cAAc,CAAC,cAAc,cAAc,UAAa,SAAS,SAAS,IAC9E,KAAK,MAAM,aAAa,YAAY,IACpC,KAAK,MAAM,KAAK,OAAK,EAAE,SAAS,SAAS;AAC/C,cAAU,cAAc,OAAO,SAAS,aAAa,KAAK,YAAY,SAAS,QAAQ;AAAA,EAC3F;AAAA,EACA,MAAM,YAAY,SAAS,UAAU;AACjC,UAAM,WAAW,IAAI,iBAAiB,MAAM,KAAK,YAAY,KAAK,SAAS,SAAS,QAAQ;AAC5F,SAAK,MAAM,KAAK,QAAQ;AACxB,WAAO,QAAQ,QAAQ,QAAQ;AAAA,EACnC;AAAA,EACA,KAAK,SAAS;AACV,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,KAAK,OAAO;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,UAAM,kBAAkB,KAAK,WAAW,gBAAgB,KAAK;AAC7D,QAAI,SAAS,kBAAkB,UAAU;AACrC,YAAM,uBAAuB,yBAAyB,aAAa,GAAG,mBAAmB,wBAAwB,yBAAyB,eAAe,GAAG,YAAY,KAAK,WAAW,cAAc,MAAM;AAC5M,WAAK,KAAK,YAAY,kBAAkB,SAAS;AAAA,IACrD;AAAA,EACJ;AAAA,EACA,MAAM,OAAO;AACT,SAAK,YAAY,KAAK,WAAW,cAAc;AAC/C,SAAK,yBAAyB,KAAK,WAAW,cAAc,cAAc,MAAM;AAChF,UAAM,WAAW,0BAA0B,KAAK,WAAW,OAAO,aAAa;AAC3E,YAAM,KAAK,YAAY,QAAQ;AAAA,IACnC,CAAC;AACD,QAAI,oBAAoB,OAAO;AAC3B,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC9B,OACK;AACD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,eAAe,UAAU;AACrB,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,QAAQ,QAAQ;AACzB,UAAI,SAAS,WAAW;AACpB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,eAAe,UAAU;AACrB,UAAM,QAAQ,KAAK,MAAM,QAAQ,QAAQ,GAAG,cAAc;AAC1D,QAAI,SAAS,cAAc;AACvB,WAAK,MAAM,OAAO,OAAO,WAAW;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,SAAS;AACL,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,OAAO;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,OAAO;AACH,SAAK,QAAQ,CAAC;AAAA,EAClB;AACJ;;;AChEO,IAAM,kBAAN,MAAsB;AAAA,EACzB,YAAY,QAAQ;AAChB,SAAK,KAAK;AACV,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,MAAM,UAAU,WAAW;AACvB,WAAO,QAAQ,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,CAAC;AAAA,EACjE;AAAA,EACA,YAAY,SAAS,QAAQ;AAZjC;AAaQ,QAAI,CAAC,KAAK,YAAY,OAAO,KAAK,CAAC,KAAK,YAAY,MAAM,GAAG;AACzD;AAAA,IACJ;AACA,QAAI,iCAAQ,WAAW;AACnB,cAAQ,YAAY,0BAA0B,OAAO,WAAW,cAAY;AACxE,cAAM,MAAM,IAAI,SAAS;AACzB,YAAI,KAAK,QAAQ;AACjB,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,YAAQ,cAAc,MAAM,YAAY,2BAA0B,4CAAQ,kBAAR,mBAAuB,UAAvB,mBAA8B,WAAW,cAAY;AACnH,YAAM,MAAM,IAAI,SAAS;AACzB,UAAI,KAAK,QAAQ;AACjB,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,YAAY,SAAS;AA7BzB;AA8BQ,QAAI,CAAC,SAAS;AACV,aAAO;AAAA,IACX;AACA,UAAM,YAAY,QAAQ;AAC1B,QAAI,QAAQ,SAAS,GAAG;AACpB,aAAO,CAAC,CAAC,UAAU;AAAA,IACvB,WACS,WAAW;AAChB,aAAO;AAAA,IACX,aACS,yBAAQ,kBAAR,mBAAuB,WAAvB,mBAA+B,YAA/B,mBAAwC,SAC7C,UAAU,kBAAkB,UAAU,QAAQ,cAAc,OAAO,QAAQ,IAAI,GAAG;AAClF,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;;;AC7CA,eAAsB,oBAAoB,QAAQ,UAAU,MAAM;AAC9D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,UAAU,IAAI,gBAAgB,MAAM,GAAG,OAAO;AAC/D;;;ACHO,IAAM,gBAAN,MAAoB;AAAA,EACvB,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,cAAc,KAAK,MAAM;AAAA,IAC3C;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,cAAc,KAAK,IAAI;AAAA,IACvC;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,QAAQ,QAAW;AACxB,WAAK,MAAM,cAAc,KAAK,GAAG;AAAA,IACrC;AAAA,EACJ;AACJ;;;ACnBO,IAAI;AAAA,CACV,SAAUC,cAAa;AACpB,EAAAA,aAAY,MAAM,IAAI;AACtB,EAAAA,aAAY,OAAO,IAAI;AAC3B,GAAG,gBAAgB,cAAc,CAAC,EAAE;;;ACH7B,IAAM,cAAN,cAA0B,gBAAgB;AAAA,EAC7C,cAAc;AACV,UAAM;AACN,SAAK,QAAQ;AAAA,EACjB;AACJ;;;ACLO,IAAM,YAAN,cAAwB,gBAAgB;AAAA,EAC3C,cAAc;AACV,UAAM;AACN,SAAK,QAAQ,EAAE,KAAK,GAAG,KAAK,EAAE;AAAA,EAClC;AACJ;;;ACHO,IAAM,QAAN,MAAY;AAAA,EACf,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,SAAS,IAAI,YAAY;AAC9B,SAAK,OAAO,IAAI,UAAU;AAC1B,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AAAA,IAC3D;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,SAAK,OAAO,KAAK,KAAK,MAAM;AAC5B,SAAK,KAAK,KAAK,KAAK,IAAI;AACxB,SAAK,YAAY,0BAA0B,KAAK,WAAW,eAAa;AACpE,aAAO,WAAW,CAAC,GAAG,SAAS;AAAA,IACnC,CAAC;AACD,QAAI,KAAK,eAAe,QAAW;AAC/B,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,KAAK,aAAa;AAClB,WAAK,cAAc,KAAK,eAAe,CAAC;AACxC,UAAI,KAAK,YAAY,MAAM,QAAW;AAClC,aAAK,YAAY,IAAI,KAAK,YAAY;AAAA,MAC1C;AACA,UAAI,KAAK,YAAY,MAAM,QAAW;AAClC,aAAK,YAAY,IAAI,KAAK,YAAY;AAAA,MAC1C;AACA,UAAI,KAAK,YAAY,MAAM,QAAW;AAClC,aAAK,YAAY,IAAI,KAAK,YAAY;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACrCO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,SAAS,IAAI,cAAc;AAChC,SAAK,OAAO,YAAY;AACxB,SAAK,QAAQ,IAAI,MAAM;AAAA,EAC3B;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,MAAM;AACX,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO,KAAK,KAAK,MAAM;AAAA,IAChC;AACA,SAAK,MAAM,KAAK,KAAK,KAAK;AAAA,EAC9B;AACJ;;;ACrBA,IAAM,gBAAgB;AAAtB,IAAyB,iBAAiB;AAA1C,IAA+C,oBAAoB;AAAnE,IAAsE,YAAY;AAAlF,IAAqF,kBAAkB;AAAvG,IAA4G,gBAAgB;AAC5H,SAAS,iBAAiB,QAAQ,WAAW,QAAQ,uBAAuB;AACxE,QAAM,iBAAiB,OAAO,QAAQ;AACtC,MAAI,CAAC,gBAAgB;AACjB;AAAA,EACJ;AACA,QAAM,eAAe,eAAe,OAAO,UAAU,qBAAqB,QAAQ,WAAW,OAAO,OAAO,GAAG,SAAS,cAAc,aAAa,OAAO,KAAK,GAAG,cAAc,OAAO,aAAa;AACnM,MAAI,aAAa,OAAO;AACpB,YAAQ,MAAM,KAAK,aAAa,KAAK;AAAA,EACzC,WACS,aAAa,eAAe,aAAa;AAC9C,YAAQ,MAAM,KAAK;AAAA,MACf,OAAO;AAAA,QACH,KAAK;AAAA,UACD,GAAG,YAAY,IAAI,cAAc,aAAa,YAAY,KAAK,aAAa;AAAA,UAC5E,GAAG,YAAY,IAAI,cAAc,aAAa,YAAY,KAAK,aAAa;AAAA,UAC5E,GAAG,YAAY,IAAI,cAAc,aAAa,YAAY,KAAK,aAAa;AAAA,QAChF;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL,OACK;AACD,YAAQ,MAAM,KAAK;AAAA,MACf,OAAO;AAAA,QACH,KAAK,OAAO,aAAa;AAAA,MAC7B;AAAA,IACJ,CAAC;AAAA,EACL;AACA,UAAQ,KAAK,KAAK;AAAA,IACd,QAAQ;AAAA,MACJ,GAAG,OAAO,SAAS;AAAA,MACnB,GAAG,OAAO,SAAS;AAAA,MACnB,MAAM,UAAU;AAAA,IACpB;AAAA,EACJ,CAAC;AACD,MAAI,SAAS,QAAQ,KAAK,KAAK,GAAG;AAC9B,YAAQ,KAAK,SAAS;AAAA,EAC1B,OACK;AACD,YAAQ,KAAK,MAAM,OAAO;AAC1B,YAAQ,KAAK,MAAM,OAAO;AAAA,EAC9B;AACA,UAAQ,KAAK,qBAAqB;AAClC,QAAM,SAAS,aAAa,aAAa,cAAc,CAAC,OAAO,KAAK,OAAO,OAAO,KAAK,KAAK,IAAI,eAAe,WAAW;AAAA,IACtH,GAAG,OAAO,SAAS,IAAI,cAAc,MAAM;AAAA,IAC3C,GAAG,OAAO,SAAS,IAAI,cAAc,MAAM;AAAA,EAC/C;AACA,SAAO,UAAU,UAAU,YAAY,UAAU,SAAS,OAAO,OAAO,CAAC,aAAa;AAClF,QAAI,SAAS,KAAK,QAAQ,gBAAgB;AACtC,aAAO;AAAA,IACX;AACA,aAAS,SAAS,SAAS,cAAc,cAAc,OAAO,SAAS,QAAQ,SAAS,SAAS,MAAM,CAAC;AACxG,aAAS,cAAc,OAAO,cAAc,qBAAqB;AACjE,aAAS,cAAc;AACvB,eAAW,MAAM;AACb,eAAS,cAAc;AAAA,IAC3B,GAAG,eAAe;AAClB,WAAO;AAAA,EACX,CAAC;AACL;AACO,SAAS,MAAM,QAAQ,WAAW,UAAU;AAC/C,QAAM,iBAAiB,SAAS,QAAQ;AACxC,MAAI,CAAC,gBAAgB;AACjB;AAAA,EACJ;AACA,QAAM,eAAe,eAAe;AACpC,MAAI,aAAa,SAAS,kBACrB,SAAS,eAAe,UAAa,SAAS,eAAe,aAAa,QAAQ;AACnF;AAAA,EACJ;AACA,QAAM,OAAO,cAAc,aAAa,KAAK,KAAK,GAAG,wBAAwB,yBAAyB,aAAa,SAAS;AAC5H,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,qBAAiB,QAAQ,WAAW,UAAU,qBAAqB;AAAA,EACvE;AACJ;;;ACvEO,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,QAAQ,WAAW;AAC3B,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,YAAY,KAAK,WAAW,mBAAmB,SAAS,SAAS,iBAAiB,iBAAiB;AACzG,QAAI,CAAC,gBAAgB;AACjB;AAAA,IACJ;AACA,aAAS,aAAa;AACtB,UAAM,uBAAuB,eAAe;AAC5C,QAAI,CAAC,SAAS,eAAe;AACzB,eAAS,gBAAgB,CAAC;AAAA,IAC9B;AACA,UAAM,EAAE,QAAQ,MAAM,OAAO,IAAI,IAAI,sBAAsB,EAAE,cAAc,IAAI,UAAU,aAAa,UAAU,OAAO;AACvH,QAAI,QAAQ;AACR,oBAAc,SAAU,cAAc,MAAM,IAAI,WAAW,SAAU;AAAA,IACzE;AACA,QAAI,MAAM;AACN,oBAAc,OAAQ,cAAc,IAAI,IAAI,WAAW,QAAS;AAAA,IACpE;AACA,QAAI,OAAO;AACP,oBAAc,QAAS,cAAc,KAAK,IAAI,WAAW,QAAS;AAAA,IACtE;AACA,QAAI,KAAK;AACL,oBAAc,MAAO,cAAc,GAAG,IAAI,WAAW,SAAU;AAAA,IACnE;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,CAAC,SAAS;AAAA,EACrB;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,IAAI,QAAQ;AAAA,IAClC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,QAAQ,KAAK,iCAAQ,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,kBAAkB,UAAU,UAAU;AAClC,QAAI,UAAU;AACV;AAAA,IACJ;AACA,UAAM,iBAAiB,SAAS,QAAQ;AACxC,QAAI,kBAAkB,eAAe,SAAS,YAAY,OAAO;AAC7D,YAAM,KAAK,QAAQ,KAAK,WAAW,QAAQ;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,OAAO,UAAU;AACb,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,UAAM,WAAW,SAAS,YAAY,GAAG,SAAS,SAAS;AAC3D,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,QAAK,OAAO,WAAW,UAAa,SAAS,KAAK,OAAO,UACpD,OAAO,SAAS,UAAa,SAAS,KAAK,OAAO,QAClD,OAAO,UAAU,UAAa,SAAS,KAAK,OAAO,SACnD,OAAO,QAAQ,UAAa,SAAS,KAAK,OAAO,KAAM;AACxD,eAAS,QAAQ;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACnEA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,WAAW,eAAa;AACpD,WAAO,QAAQ,QAAQ,IAAI,eAAe,QAAQ,SAAS,CAAC;AAAA,EAChE,GAAG,OAAO;AACd;;;ACLO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK,QAAQ;AAAA,IAC/C;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACrBO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK,QAAQ;AAAA,IAC/C;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AAAA,EACJ;AACJ;;;AChBO,IAAM,sBAAN,MAA0B;AAAA,EAC7B,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACfO,IAAM,eAAN,MAAmB;AAAA,EACtB,cAAc;AACV,SAAK,UAAU,CAAC;AAChB,SAAK,UAAU,IAAI,oBAAoB;AACvC,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC;AAAA,IACpD;AACA,SAAK,QAAQ,KAAK,KAAK,OAAO;AAC9B,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACnBO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,OAAO,UAAU;AACtB,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AAAA,EACJ;AACJ;;;AChBO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,OAAO,IAAI,YAAY;AAC5B,SAAK,OAAO,IAAI,YAAY;AAC5B,SAAK,QAAQ,IAAI,aAAa;AAC9B,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,UAAI,CAAC,KAAK,MAAM;AACZ,aAAK,OAAO,IAAI,YAAY;AAAA,MAChC;AACA,WAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IAC5B;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,SAAK,QAAQ,KAAK;AAClB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,SAAK,KAAK,KAAK,KAAK,IAAI;AACxB,SAAK,OAAO,KAAK;AACjB,SAAK,YAAY,0BAA0B,KAAK,WAAW,eAAa;AACpE,aAAO,WAAW,CAAC,GAAG,SAAS;AAAA,IACnC,CAAC;AACD,SAAK,KAAK,KAAK,KAAK,IAAI;AACxB,SAAK,MAAM,KAAK,KAAK,KAAK;AAC1B,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,CAAC;AACjB,UAAI,KAAK,SAAS,MAAM,QAAW;AAC/B,aAAK,SAAS,IAAI,cAAc,KAAK,SAAS,CAAC;AAAA,MACnD;AACA,UAAI,KAAK,SAAS,MAAM,QAAW;AAC/B,aAAK,SAAS,IAAI,cAAc,KAAK,SAAS,CAAC;AAAA,MACnD;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,QAAW;AAC/B,UAAI,KAAK,eAAe,QAAW;AAC/B,aAAK,aAAa,IAAI,gBAAgB;AAAA,MAC1C;AACA,WAAK,WAAW,KAAK,KAAK,UAAU;AAAA,IACxC;AACA,QAAI,KAAK,eAAe,QAAW;AAC/B,WAAK,aAAa,KAAK;AAAA,IAC3B;AAAA,EACJ;AACJ;;;AC5DO,IAAI;AAAA,CACV,SAAUC,mBAAkB;AACzB,EAAAA,kBAAiB,SAAS,IAAI;AAClC,GAAG,qBAAqB,mBAAmB,CAAC,EAAE;;;ACA9C,IAAMC,QAAO;AAAb,IAAkB,mBAAmB;AAArC,IAAwC,eAAe;AAAvD,IAA0D,oBAAoB;AAA9E,IAAiF,mBAAmB;AAApG,IAAuG,mBAAmB;AAA1H,IAA8H,8BAA8B;AAC5J,SAAS,yBAAyB,kBAAkB,OAAO;AACvD,MAAI,iBAAiB,OAAO;AACxB,qBAAiB,MAAM,QAAQ;AAAA,EACnC,OACK;AACD,qBAAiB,QAAQ;AAAA,MACrB,OAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACO,IAAM,kBAAN,MAAsB;AAAA,EACzB,YAAY,QAAQ,UAAU,WAAW,SAAS,UAAU;AAfhE;AAgBQ,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,WAAW,MAAM;AAlB9B,UAAAC,KAAAC;AAmBY,OAAAD,MAAA,KAAK,sBAAL,gBAAAA,IAAwB;AACxB,WAAK,oBAAoB;AACzB,OAAAC,MAAA,KAAK,oBAAL,gBAAAA,IAAsB;AACtB,WAAK,kBAAkB;AACvB,WAAK,SAAS,cAAc,IAAI;AAChC,WAAK,QAAQ,cAAc,oBAAoB;AAAA,QAC3C,WAAW,KAAK;AAAA,QAChB,MAAM;AAAA,UACF,SAAS;AAAA,QACb;AAAA,MACJ,CAAC;AAAA,IACL;AACA,SAAK,gBAAgB,MAAM;AA/BnC,UAAAD;AAgCY,UAAI,KAAK,SAAS;AACd;AAAA,MACJ;AACA,YAAM,aAAWA,MAAA,KAAK,QAAQ,SAAb,gBAAAA,IAAmB,cAAa,SAAY,cAAc,KAAK,QAAQ,KAAK,QAAQ,IAAI,QAAW,cAAc,GAAGE,gBAAe;AACpJ,UAAI,KAAK,UAAU,OAAO,iBACrB,KAAK,aAAaA,iBAAgB,KAAK,cACxC,aAAa,UACb,WAAW,aAAa;AACxB,aAAK,YAAY,WAAW;AAAA,MAChC;AAAA,IACJ;AACA,SAAK,qBAAqB,CAAC,WAAW,WAAW,UAAU,SAAS,gCAAgC;AAChG,YAAMC,aAAY,KAAK;AACvB,UAAI,CAAC,UAAU,QAAQ;AACnB,eAAO;AAAA,MACX;AACA,YAAM,cAAc,cAAc,UAAU,MAAM,GAAG,QAAQ,cAAc,KAAK,QAAQ,KAAK,KAAK,GAAG,aAAc,QAAQ,wBAAyBA,WAAU,OAAO,cAAc,oBAAoB,GAAG,aAAa,cAAc,UAAU,SAAS,iBAAiB;AACzQ,cAAQ,YAAa,aAAaA,WAAU,WAAY,aAAa,cAAc,UAAU;AAAA,IACjG;AACA,SAAK,UAAU;AACf,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB;AACxB,QAAI,mBAAmB,SAAS;AAC5B,WAAK,UAAU;AAAA,IACnB,OACK;AACD,WAAK,UAAU,IAAI,QAAQ;AAC3B,WAAK,QAAQ,KAAK,OAAO;AAAA,IAC7B;AACA,SAAK,cACA,cAAc,KAAK,QAAQ,KAAK,SAAS,gBAAgB,IAAI,wBAC1D,KAAK,UAAU,OAAO;AAC9B,SAAK,WAAW,KAAK,oBAAoB,KAAK,cAAc;AAC5D,SAAK,OAAO,KAAK,QAAQ;AACzB,SAAK,OAAO,KAAK,QAAQ;AACzB,SAAK,cAAc,CAAC,KAAK,QAAQ,KAAK;AACtC,SAAK,uBAAuB;AAC5B,QAAI,mBAAmB,WAAW,CAAC,GAAG,KAAK,QAAQ,SAAS;AAC5D,4CAAqB,CAAC;AACtB,qBAAiB,SAAjB,iBAAiB,OAAS,CAAC;AAC3B,2BAAiB,MAAK,cAAtB,GAAsB,YAAc,KAAK,QAAQ;AACjD,QAAI,KAAK,QAAQ,YAAY;AACzB,WAAK,aAAa,gBAAgB,KAAK,SAAS,KAAK,QAAQ,UAAU;AAAA,IAC3E;AACA,SAAK,UAAU,CAAC,KAAK,QAAQ;AAC7B,SAAK,oBAAoB;AACzB,SAAK,QAAQ,KAAK,UAAU;AAC5B,SAAK,OAAO,QAAQ,KAAK,OAAO,KAAK,UAAU,OAAO,IAAI;AAC1D,SAAK,aAAa,KAAK,QAAQ,KAAK,SAAS;AAC7C,SAAK,YAAY,KAAK,cAAc;AACpC,QAAI,KAAK,QAAQ,OAAO;AACpB,YAAM,UAAU,SAAS,eAAe,KAAK,QAAQ,KAAK;AAC1D,UAAI,SAAS;AACT,aAAK,oBAAoB,IAAI,iBAAiB,MAAM;AAChD,eAAK,OAAO;AAAA,QAChB,CAAC;AACD,aAAK,kBAAkB,IAAI,eAAe,MAAM;AAC5C,eAAK,OAAO;AAAA,QAChB,CAAC;AACD,aAAK,kBAAkB,QAAQ,SAAS;AAAA,UACpC,YAAY;AAAA,UACZ,iBAAiB,CAAC,SAAS,SAAS,QAAQ;AAAA,QAChD,CAAC;AACD,aAAK,gBAAgB,QAAQ,OAAO;AAAA,MACxC;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,QAAQ,OAAO,kBAAiB,UAAK,QAAQ,wBAAb,mBAAkC,kBAAkB,aAAa;AAC3H,QAAI,gBAAgB;AAChB,WAAK,SAAS,eAAe,SAAS,KAAK,UAAU,KAAK,MAAM,KAAK,MAAM,aAAa,OAAO;AAAA,IACnG;AACA,SAAK,QAAQ,cAAc,kBAAkB;AAAA,MACzC;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AACD,SAAK,KAAK;AAAA,EACd;AAAA,EACA,gBAAgB;AACZ,SAAK,UAAU;AACf,SAAK,MAAM;AAAA,EACf;AAAA,EACA,eAAe;AACX,SAAK,UAAU;AACf,SAAK,KAAK;AAAA,EACd;AAAA,EACA,MAAM,OAAO;AAxHjB;AAyHQ,YAAM,UAAK,WAAL,mBAAa;AAAA,EACvB;AAAA,EACA,QAAQ;AACJ,QAAI,KAAK,SAAS;AACd;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,OAAO;AACH,QAAI,KAAK,SAAS;AACd;AAAA,IACJ;AACA,QAAI,EAAE,KAAK,UAAU,OAAO,iBACvB,KAAK,aAAa,gBAAgB,KAAK,aAAa,CAAC,KAAK,QAAQ,KAAK,WACvE,KAAK,eAAe,KAAK,uBAAuB,KAAK,eAAe,sBAAsB;AAC3F;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,QAAW;AAC/B,YAAM,QAAQ,cAAc,KAAK,QAAQ,KAAK,KAAK;AACnD,WAAK,aAAc,QAAQ,wBAAyB,KAAK,UAAU,OAAO;AAAA,IAC9E;AACA,QAAI,KAAK,aAAa,gBAAgB,KAAK,WAAW;AAClD,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,SAAS;AAlJb;AAmJQ,UAAM,kBAAkB,KAAK;AAC7B,SAAK,WACD,mBAAmB,cAAc,iBAAiB,KAAK,UAAU,OAAO,MAAM,OAAO,MAAM,IACrF,kBACA,KAAK,cAAc;AAC7B,SAAK,QAAQ,KAAK,UAAU;AAC5B,SAAK,OAAO,QAAQ,KAAK,OAAO,KAAK,UAAU,OAAO,IAAI;AAC1D,eAAK,WAAL,mBAAa,OAAO,KAAK,UAAU,KAAK;AAAA,EAC5C;AAAA,EACA,OAAO,OAAO;AA5JlB;AA6JQ,QAAI,KAAK,SAAS;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa;AAClB,WAAK,cAAc;AACnB,WAAK,qBAAqB,KAAK,eAAe;AAC9C,WAAK,oBAAoB,KAAK,cAAc;AAAA,IAChD;AACA,QAAI,CAAC,KAAK,sBAAsB;AAC5B,WAAK,uBAAuB;AAC5B,WAAK,eAAe,KAAK,QAAQ,UAAU;AAAA,IAC/C;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,oBAAoB,MAAM;AAC/B,UAAI,KAAK,oBAAoB,KAAK,WAAW;AACzC,aAAK,MAAM;AACX,YAAI,KAAK,gBAAgB,QAAW;AAChC,iBAAO,KAAK;AAAA,QAChB;AACA,YAAI,CAAC,KAAK,WAAW;AACjB,eAAK;AAAA,QACT;AACA,YAAI,KAAK,aAAa,gBAAgB,KAAK,WAAW;AAClD,eAAK,WAAW,KAAK,cAAc;AACnC,qBAAK,WAAL,mBAAa,OAAO,KAAK,UAAU,KAAK;AACxC,eAAK,cACA,cAAc,KAAK,QAAQ,KAAK,SAAS,gBAAgB,IAAI,wBAC1D,KAAK,UAAU,OAAO;AAAA,QAClC,OACK;AACD,eAAK,SAAS;AAAA,QAClB;AACA,aAAK,oBAAoB,KAAK;AAC9B,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ;AACA,QAAI,KAAK,gBAAgB,QAAW;AAChC,WAAK,sBAAsB,MAAM;AACjC,UAAI,KAAK,sBAAsB,KAAK,aAAa;AAC7C,aAAK,QAAQ,cAAc,eAAe;AAAA,UACtC,WAAW,KAAK;AAAA,QACpB,CAAC;AACD,aAAK,KAAK;AACV,aAAK,sBAAsB,KAAK;AAChC,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,QAAW;AAC/B,WAAK,qBAAqB,MAAM;AAChC,UAAI,KAAK,qBAAqB,KAAK,YAAY;AAC3C,aAAK,MAAM;AACX,aAAK,qBAAqB,KAAK;AAAA,MACnC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB;AACZ,QAAI,KAAK,QAAQ,OAAO;AACpB,YAAM,UAAU,SAAS,eAAe,KAAK,QAAQ,KAAK;AAC1D,UAAI,SAAS;AACT,cAAM,SAAS,QAAQ,sBAAsB,GAAG,UAAU,KAAK,UAAU,OAAO;AAChF,eAAO;AAAA,UACH,IAAI,OAAO,IAAI,OAAO,QAAQJ,SAAQ;AAAA,UACtC,IAAI,OAAO,IAAI,OAAO,SAASA,SAAQ;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,mCAAmC;AAAA,MACtC,MAAM,KAAK,UAAU,OAAO;AAAA,MAC5B,UAAU,KAAK,QAAQ;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA,EACA,YAAY;AACR,UAAM,YAAY,KAAK;AACvB,QAAI,KAAK,QAAQ,OAAO;AACpB,YAAM,UAAU,SAAS,eAAe,KAAK,QAAQ,KAAK;AAC1D,UAAI,SAAS;AACT,cAAM,SAAS,QAAQ,sBAAsB;AAC7C,eAAO;AAAA,UACH,OAAO,OAAO,QAAQ,UAAU,OAAO;AAAA,UACvC,QAAQ,OAAO,SAAS,UAAU,OAAO;AAAA,UACzC,MAAM,UAAU;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AACA,WAAQ,KAAK,QAAQ,SAChB,MAAM;AACH,YAAM,OAAO,IAAI,YAAY;AAC7B,WAAK,KAAK;AAAA,QACN,QAAQ;AAAA,QACR,MAAM,UAAU;AAAA,QAChB,OAAO;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACX,GAAG;AAAA,EACX;AAAA,EACA,QAAQ;AACJ,QAAI,KAAK,SAAS;AACd;AAAA,IACJ;AACA,UAAM,WAAW,cAAc,KAAK,QAAQ,KAAK,QAAQ;AACzD,SAAK,eAAe,QAAQ;AAAA,EAChC;AAAA,EACA,eAAe,UAAU;AAnQ7B;AAoQQ,UAAM,yBAAyB,yBAAyB,KAAK,iBAAiB;AAC9E,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAC/B,YAAM,mBAAmB,WAAW,CAAC,GAAG,sBAAsB;AAC9D,UAAI,KAAK,YAAY;AACjB,cAAM,gBAAe,UAAK,QAAQ,eAAb,mBAAyB;AAC9C,YAAI,cAAc;AACd,gBAAM,YAAY;AAAA,YACd,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG;AAAA,UACP,GAAG,cAAc;AACjB,eAAK,WAAW,IAAI,KAAK,mBAAmB,aAAa,GAAG,KAAK,WAAW,GAAG,UAAU,GAAG,WAAW;AACvG,eAAK,WAAW,IAAI,KAAK,mBAAmB,aAAa,GAAG,KAAK,WAAW,GAAG,UAAU,CAAC;AAC1F,eAAK,WAAW,IAAI,KAAK,mBAAmB,aAAa,GAAG,KAAK,WAAW,GAAG,UAAU,CAAC;AAAA,QAC9F;AACA,iCAAyB,kBAAkB,KAAK,UAAU;AAAA,MAC9D;AACA,YAAM,eAAe,KAAK,QAAQ;AAClC,UAAI,WAAW,KAAK;AACpB,UAAI,KAAK,QAAQ;AACb,cAAM,eAAe,KAAK,OAAO,eAAe;AAChD,YAAI,cAAc;AACd,qBAAW,aAAa;AACxB,gBAAM,cAAc,aAAa;AACjC,cAAI,YAAY,SAAS,aAAa,OAAO;AACzC,qCAAyB,kBAAkB,aAAa,KAAK;AAAA,UACjE;AACA,cAAI,YAAY,SAAS;AACrB,gBAAI,iBAAiB,SAAS;AAC1B,+BAAiB,QAAQ,QAAQ,aAAa;AAAA,YAClD,OACK;AACD,+BAAiB,UAAU;AAAA,gBACvB,OAAO,aAAa;AAAA,cACxB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,OACK;AACD,qBAAW;AAAA,QACf;AAAA,MACJ;AACA,UAAI,UAAU;AACV,aAAK,UAAU,UAAU,YAAY,UAAU,gBAAgB;AAAA,MACnE;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/SO,IAAM,WAAN,MAAe;AAAA,EAClB,YAAY,QAAQ,WAAW;AAC3B,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,QAAQ,CAAC;AACd,SAAK,WAAW,CAAC;AACjB,SAAK,wBAAwB;AAAA,MACzB,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,MACA,OAAO,CAAC;AAAA,IACZ;AACA,UAAMK,gBAAe;AACrB,cAAU,aAAa,CAAC,cAAc,cAAc,UAAa,SAAS,SAAS,IAC7E,KAAK,MAAM,aAAaA,aAAY,IACpC,KAAK,MAAM,KAAK,OAAK,EAAE,SAAS,SAAS;AAC/C,cAAU,aAAa,OAAO,SAAS,aAAa,KAAK,WAAW,SAAS,QAAQ;AACrF,cAAU,gBAAgB,CAAC,cAAc;AACrC,YAAM,UAAU,UAAU,WAAW,SAAS;AAC9C,UAAI,SAAS;AACT,aAAK,cAAc,OAAO;AAAA,MAC9B;AAAA,IACJ;AACA,cAAU,cAAc,CAAC,cAAc;AACnC,YAAM,UAAU,UAAU,WAAW,SAAS;AAC9C,UAAI,SAAS;AACT,gBAAQ,aAAa;AAAA,MACzB;AAAA,IACJ;AACA,cAAU,eAAe,CAAC,cAAc;AACpC,YAAM,UAAU,UAAU,WAAW,SAAS;AAC9C,UAAI,SAAS;AACT,gBAAQ,cAAc;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,WAAW,SAAS,UAAU;AAChC,UAAM,iBAAiB,IAAI,QAAQ;AACnC,mBAAe,KAAK,OAAO;AAC3B,UAAM,UAAU,IAAI,gBAAgB,KAAK,SAAS,MAAM,KAAK,WAAW,gBAAgB,QAAQ;AAChG,UAAM,QAAQ,KAAK;AACnB,SAAK,MAAM,KAAK,OAAO;AACvB,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,MAAM;AAClB,UAAM,iBAAiB,KAAK,UAAU,eAAe,KAAK;AAC1D,QAAI,SAAS,iBAAiB,SAAS;AACnC;AAAA,IACJ;AACA,QAAI;AACJ,QAAI,gBAAgB,QAAQ,aAAa,KAAK,GAAG;AAC7C,YAAM,YAAY;AAClB,UAAI,aAAa,MAAM,SAAS,aAAa,aAAa,OAAO,QAAQ;AACrE,8BAAsB,CAAC;AACvB,cAAM,cAAc,CAAC;AACrB,iBAAS,IAAI,GAAG,IAAI,aAAa,OAAO,OAAO,KAAK;AAChD,gBAAM,MAAM,iBAAiB,aAAa,KAAK;AAC/C,cAAI,YAAY,SAAS,GAAG,KAAK,YAAY,SAAS,aAAa,MAAM,QAAQ;AAC7E;AACA;AAAA,UACJ;AACA,sBAAY,KAAK,GAAG;AACpB,8BAAoB,KAAK,cAAc,aAAa,OAAO,GAAG,CAAC;AAAA,QACnE;AAAA,MACJ,OACK;AACD,8BAAsB,aAAa;AAAA,MACvC;AAAA,IACJ,OACK;AACD,4BAAsB,6CAAc;AAAA,IACxC;AACA,UAAM,kBAAkB,uBAAuB,gBAAgB,YAAY,KAAK,UAAU,cAAc,MAAM;AAC9G,SAAK,0BAA0B,iBAAiB,OAAO,YAAY;AAC/D,YAAM,KAAK,WAAW,SAAS,SAAS;AAAA,IAC5C,CAAC;AAAA,EACL;AAAA,EACA,MAAM,OAAO;AACT,SAAK,WAAW,KAAK,UAAU,cAAc;AAC7C,SAAK,wBAAwB,KAAK,UAAU,cAAc,cAAc,MAAM;AAC9E,QAAI,CAAC,KAAK,UAAU;AAChB;AAAA,IACJ;AACA,QAAI,QAAQ,KAAK,QAAQ,GAAG;AACxB,iBAAW,kBAAkB,KAAK,UAAU;AACxC,cAAM,KAAK,WAAW,cAAc;AAAA,MACxC;AAAA,IACJ,OACK;AACD,YAAM,KAAK,WAAW,KAAK,QAAQ;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,eAAW,WAAW,KAAK,OAAO;AAC9B,cAAQ,MAAM;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,OAAO;AACH,eAAW,WAAW,KAAK,OAAO;AAC9B,cAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,QAAQ,KAAK,MAAM,QAAQ,OAAO,GAAG,WAAW,GAAG,cAAc;AACvE,QAAI,SAAS,UAAU;AACnB,WAAK,MAAM,OAAO,OAAO,WAAW;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,SAAS;AACL,eAAW,WAAW,KAAK,OAAO;AAC9B,cAAQ,OAAO;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,OAAO;AACH,SAAK,QAAQ,CAAC;AAAA,EAClB;AAAA,EACA,OAAO,OAAO;AACV,eAAW,WAAW,KAAK,OAAO;AAC9B,cAAQ,OAAO,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;;;AC1HO,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,QAAQ;AAChB,SAAK,UAAU;AACf,SAAK,KAAK;AAAA,EACd;AAAA,EACA,UAAU,WAAW;AACjB,WAAO,QAAQ,QAAQ,IAAI,SAAS,KAAK,SAAS,SAAS,CAAC;AAAA,EAChE;AAAA,EACA,YAAY,SAAS,QAAQ;AAZjC;AAaQ,QAAI,CAAC,KAAK,YAAY,OAAO,KAAK,CAAC,KAAK,YAAY,MAAM,GAAG;AACzD;AAAA,IACJ;AACA,QAAI,iCAAQ,UAAU;AAClB,cAAQ,WAAW,0BAA0B,OAAO,UAAU,aAAW;AACrE,cAAM,MAAM,IAAI,QAAQ;AACxB,YAAI,KAAK,OAAO;AAChB,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,UAAM,yBAAwB,4CAAQ,kBAAR,mBAAuB,UAAvB,mBAA8B;AAC5D,QAAI,uBAAuB;AACvB,UAAI,QAAQ,qBAAqB,GAAG;AAChC,gBAAQ,cAAc,MAAM,WAAW;AAAA,UACnC,QAAQ;AAAA,YACJ,OAAO;AAAA,YACP,QAAQ;AAAA,UACZ;AAAA,UACA,OAAO,sBAAsB,IAAI,OAAK;AAClC,kBAAM,MAAM,IAAI,QAAQ;AACxB,gBAAI,KAAK,CAAC;AACV,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ,OACK;AACD,cAAM,cAAc;AACpB,YAAI,YAAY,UAAU,QAAW;AACjC,gBAAM,eAAe;AACrB,cAAI,QAAQ,YAAY,KAAK,GAAG;AAC5B,oBAAQ,cAAc,MAAM,WAAW;AAAA,cACnC,QAAQ;AAAA,gBACJ,OAAO,YAAY,OAAO,SAAS;AAAA,gBACnC,QAAQ,YAAY,OAAO,UAAU;AAAA,cACzC;AAAA,cACA,OAAO,YAAY,MAAM,IAAI,OAAK;AAC9B,sBAAM,MAAM,IAAI,QAAQ;AACxB,oBAAI,KAAK,CAAC;AACV,uBAAO;AAAA,cACX,CAAC;AAAA,YACL;AAAA,UACJ,OACK;AACD,kBAAM,MAAM,IAAI,QAAQ;AACxB,gBAAI,KAAK,YAAY,KAAK;AAC1B,oBAAQ,cAAc,MAAM,WAAW;AAAA,cACnC,QAAQ;AAAA,gBACJ,OAAO,YAAY,OAAO,SAAS;AAAA,gBACnC,QAAQ,YAAY,OAAO,UAAU;AAAA,cACzC;AAAA,cACA,OAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,OACK;AACD,gBAAM,iBAAkB,QAAQ,cAAc,MAAM,WAAW;AAAA,YAC3D,QAAQ;AAAA,cACJ,OAAO;AAAA,cACP,QAAQ;AAAA,YACZ;AAAA,YACA,OAAO,IAAI,QAAQ;AAAA,UACvB;AACA,yBAAe,MAAM,KAAK,qBAAqB;AAAA,QACnD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,SAAS;AAhFzB;AAiFQ,QAAI,CAAC,SAAS;AACV,aAAO;AAAA,IACX;AACA,UAAM,WAAW,QAAQ;AACzB,WAAS,QAAQ,QAAQ,KAAK,CAAC,CAAC,SAAS,UACrC,aAAa,UACZ,CAAC,GAAC,yBAAQ,kBAAR,mBAAuB,WAAvB,mBAA+B,YAA/B,mBAAwC,SACvC,UAAU,iBAAiB,SAAS,QAAQ,cAAc,OAAO,QAAQ,IAAI;AAAA,EACzF;AACJ;;;AC1FA,IAAM,mBAAmB,oBAAI,IAAI;AAC1B,IAAM,eAAN,MAAmB;AAAA,EACtB,YAAY,QAAQ;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,kBAAkB,MAAM,WAAW;AAC/B,QAAI,CAAC,KAAK,kBAAkB,IAAI,GAAG;AAC/B,uBAAiB,IAAI,MAAM,SAAS;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,kBAAkB,MAAM;AACpB,WAAO,iBAAiB,IAAI,IAAI;AAAA,EACpC;AAAA,EACA,8BAA8B;AAC1B,WAAO,iBAAiB,KAAK;AAAA,EACjC;AACJ;;;AChBO,IAAM,mBAAN,MAAuB;AAAA,EAC1B,YAAY,UAAU,MAAM,MAAM,SAAS;AACvC,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,OAAO,UAAU,MAAM;AACnB,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AACJ;;;ACTA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,MAAI,CAAC,OAAO,qBAAqB;AAC7B,WAAO,sBAAsB,IAAI,aAAa,MAAM;AAAA,EACxD;AACA,MAAI,CAAC,OAAO,0BAA0B;AAClC,WAAO,2BAA2B,CAAC,MAAM,cAAc;AAR/D;AASY,mBAAO,wBAAP,mBAA4B,kBAAkB,MAAM;AAAA,IACxD;AAAA,EACJ;AACA,QAAM,SAAS,IAAI,eAAe,MAAM;AACxC,QAAM,OAAO,UAAU,QAAQ,OAAO;AAC1C;;;ACZA,IAAM,UAAU;AAAhB,IAAsBC,UAAS;AAA/B,IAAkC,WAAW,KAAK,KAAKA;AAAvD,IAA+DC,aAAY;AAA3E,IAA8EC,QAAO;AAC9E,IAAM,sBAAN,cAAkC,iBAAiB;AAAA,EACtD,YAAY,UAAU,MAAM,MAAM,SAAS;AACvC,UAAM,UAAU,MAAM,MAAM,OAAO;AAAA,EACvC;AAAA,EACA,MAAM,OAAO;AAAA,EACb;AAAA,EACA,iBAAiB;AACb,UAAM,OAAO,KAAK,MAAM,OAAO,KAAK,MAAM,WAAW,KAAK,UAAU,gBAAgB,CAAC,GAAG,MAAM;AAC1F,YAAM,IAAI,UAAU,IAAI,SAAS,QAAQ,KAAK,KAAM,IAAI,IAAK,KAAK,IAAI,WAAW,CAAC,CAAC,GAAG,IAAI,UAAU;AACpG,UAAI,IAAI,SAAS;AACb,eAAO;AAAA,MACX,WACS,IAAIF,UAAS,SAAS;AAC3B,eAAO,KAAK,KAAK;AAAA,MACrB,WACS,IAAIA,UAAS,UAAU,SAAS;AACrC,eAAO,KAAK,KAAK;AAAA,MACrB,OACK;AACD,eAAO,CAAC;AAAA,MACZ;AAAA,IACJ,GAAG,SAAS,CAAC,GAAG,GAAG,UAAW,IAAI,IAAK,KAAK,MAAM,IAAI,KAAK,IAAI,KAAK,MAAMC,cAAa,IAAI,KAAK,IAAI,KAAK,MAAMA,UAAS,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,QAAQC,OAAM,KAAK,SAASA,KAAI,GAAG,cAAc,cAAc,GAAG,CAAC,GAAG,YAAY,OAAO,GAAG,GAAG,WAAW,GAAG,eAAe,OAAO,YAAY,KAAK,KAAK,UAAU,CAAC,IAAI;AAClT,WAAO;AAAA,MACH,UAAU;AAAA,QACN,GAAG,SAAS,IAAI,eAAe,KAAK,IAAI,WAAW;AAAA,QACnD,GAAG,SAAS,IAAI,eAAe,KAAK,IAAI,WAAW;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/BO,IAAM,+BAAN,MAAmC;AAAA,EACtC,SAAS,UAAU,MAAM,MAAM,SAAS;AACpC,WAAO,IAAI,oBAAoB,UAAU,MAAM,MAAM,OAAO;AAAA,EAChE;AACJ;;;ACJA,eAAsB,wBAAwB,QAAQ,UAAU,MAAM;AADtE;AAEI,QAAM,iBAAiB;AACvB,iBAAe,aAAa,OAAO;AACnC,uBAAe,6BAAf,wCAA0C,UAAU,IAAI,6BAA6B;AACrF,QAAM,eAAe,QAAQ,OAAO;AACxC;;;ACJA,IAAM,QAAQ;AACd,IAAI;AAAA,CACH,SAAUC,QAAO;AACd,EAAAA,OAAMA,OAAM,SAAS,IAAI,CAAC,IAAI;AAC9B,EAAAA,OAAMA,OAAM,UAAU,IAAI,CAAC,IAAI;AAC/B,EAAAA,OAAMA,OAAM,aAAa,IAAI,CAAC,IAAI;AAClC,EAAAA,OAAMA,OAAM,YAAY,IAAI,CAAC,IAAI;AACrC,GAAG,UAAU,QAAQ,CAAC,EAAE;AACxB,SAAS,uBAAuB,UAAU,QAAQ;AAC9C,SAAO,WAAW,UAAU,UAAU,IAAI;AAC9C;AACO,IAAM,sBAAN,cAAkC,iBAAiB;AAAA,EACtD,YAAY,UAAU,MAAM,MAAM,SAAS;AACvC,UAAM,UAAU,MAAM,MAAM,OAAO;AAAA,EACvC;AAAA,EACA,MAAM,OAAO;AAAA,EACb;AAAA,EACA,iBAAiB;AACb,UAAM,OAAO,KAAK,MAAM,WAAW,KAAK,UAAU,OAAO,KAAK;AAC9D,QAAI,MAAM;AACN,aAAO;AAAA,QACH,UAAU;AAAA,UACN,GAAG,uBAAuB,SAAS,GAAG,KAAK,KAAK;AAAA,UAChD,GAAG,uBAAuB,SAAS,GAAG,KAAK,MAAM;AAAA,QACrD;AAAA,MACJ;AAAA,IACJ,OACK;AACD,YAAM,QAAQ,KAAK,QAAQ,MAAM,QAAQ,KAAK,SAAS,MAAM,OAAO,KAAK,MAAM,UAAU,IAAI,KAAK,GAAG,KAAK,UAAU,IAAI,QAAQ;AAChI,cAAQ,MAAM;AAAA,QACV,KAAK,MAAM;AACP,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI,IAAI;AAAA,cACpB,GAAG,SAAS,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ,KAAK,MAAM;AACP,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI;AAAA,cAChB,GAAG,SAAS,IAAI,IAAI;AAAA,YACxB;AAAA,UACJ;AAAA,QACJ,KAAK,MAAM;AACP,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI,IAAI;AAAA,cACpB,GAAG,SAAS,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ,KAAK,MAAM;AAAA,QACX;AACI,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI;AAAA,cAChB,GAAG,SAAS,IAAI,IAAI;AAAA,YACxB;AAAA,UACJ;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/DO,IAAM,+BAAN,MAAmC;AAAA,EACtC,SAAS,UAAU,MAAM,MAAM,SAAS;AACpC,WAAO,IAAI,oBAAoB,UAAU,MAAM,MAAM,OAAO;AAAA,EAChE;AACJ;;;ACJA,eAAsB,wBAAwB,QAAQ,UAAU,MAAM;AADtE;AAEI,QAAM,iBAAiB;AACvB,iBAAe,aAAa,OAAO;AACnC,uBAAe,6BAAf,wCAA0C,UAAU,IAAI,6BAA6B;AACrF,QAAM,eAAe,QAAQ,OAAO;AACxC;;;ACLO,IAAM,QAAN,MAAY;AAAA,EACf,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,WAAW,CAAC,GAAG,KAAK,SAAS;AAAA,IAClD;AACA,QAAI,KAAK,gBAAgB,QAAW;AAChC,WAAK,cAAc,KAAK;AAAA,IAC5B;AAAA,EACJ;AACJ;;;ACtBA,IAAM,YAAY;AACX,IAAM,aAAN,cAAyB,uBAAuB;AAAA,EACnD,YAAY,WAAW;AACnB,UAAM,SAAS;AACf,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,SAAS,OAAO;AAZpB;AAaQ,UAAM,YAAY,KAAK,WAAW,EAAE,cAAc,IAAI;AACtD,QAAI,CAAC,UAAU,OAAO,cAAc;AAChC;AAAA,IACJ;AACA,UAAM,UAAU,UAAU,eAAe,eAAe,QAAQ,cAAc,MAAM;AACpF,QAAI,CAAC,cAAc;AACf;AAAA,IACJ;AACA,UAAM,WAAY,aAAa,QAAQ,wBAAyB,KAAK,UAAU,OAAO;AACtF,QAAI,KAAK,SAAS,UAAU;AACxB,WAAK,UAAU,MAAM;AAAA,IACzB;AACA,QAAI,KAAK,SAAS,UAAU;AACxB;AAAA,IACJ;AACA,UAAM,UAAU,EAAE,aAAa,gBAC1B,cAAc,MAAM,aAAa,KAAK,mBAClC,mBAAc,MAAM,aAApB,mBAA8B,SAAM,UAAK,kBAAL,mBAAoB,QACrD,mBAAc,MAAM,aAApB,mBAA8B,SAAM,UAAK,kBAAL,mBAAoB;AACpE,UAAM,WAAW,UAAU,cAAc,MAAM;AAC/C,QAAI,UAAU;AACV,WAAK,gBAAgB,EAAE,GAAG,SAAS;AAAA,IACvC,OACK;AACD,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,SAAS;AACT,gBAAU,UAAU,KAAK,aAAa,UAAU,UAAU,cAAc,OAAO,aAAa,SAAS;AAAA,IACzG;AACA,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,QAAQ,eAAe;AACxK,WAAS,MAAM,YAAY,MAAM,UAAU,CAAC,CAAC,MAAM,YAAY,UAAU,WAAW,OAAO,QAAQ,IAAI,KAClG,MAAM,UAAU,CAAC,CAAC,MAAM,YAAY,UAAU,WAAW,OAAO,QAAQ,IAAI;AAAA,EACrF;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,OAAO;AAChB,cAAQ,QAAQ,IAAI,MAAM;AAAA,IAC9B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,MAAM,KAAK,iCAAQ,KAAK;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC1DA,eAAsB,6BAA6B,QAAQ,UAAU,MAAM;AACvE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,iBAAiB,eAAa;AACrD,WAAO,QAAQ,QAAQ,IAAI,WAAW,SAAS,CAAC;AAAA,EACpD,GAAG,OAAO;AACd;;;ACNO,IAAI;AAAA,CACV,SAAUC,WAAU;AACjB,EAAAA,UAAS,MAAM,IAAI;AACnB,EAAAA,UAAS,YAAY,IAAI;AACzB,EAAAA,UAAS,UAAU,IAAI;AAC3B,GAAG,aAAa,WAAW,CAAC,EAAE;;;ACH9B,IAAMC,UAAS;AAAf,IAAkBC,YAAW,KAAK,KAAKD;AAAvC,IAA+CE,YAAW;AACnD,SAAS,aAAa,QAAQ,UAAU;AAC3C,QAAM,UAAU,SAAS,QAAQ;AACjC,MAAI,EAAC,mCAAS,SAAQ;AAClB,aAAS,OAAO;AAAA,MACZ,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AACA;AAAA,EACJ;AACA,WAAS,OAAO;AAAA,IACZ,QAAQ,QAAQ;AAAA,IAChB,YAAY,QAAQ,SAAS,SAAS,cAAc,QAAQ,SAAS,SAAS;AAAA,IAC9E,UAAU,QAAQ,SAAS,SAAS,YAAY,QAAQ,SAAS,SAAS;AAAA,IAC1E,OAAO,UAAU,IAAID;AAAA,IACrB,OAAO,cAAc,QAAQ,KAAK,IAAIC;AAAA,EAC1C;AACA,MAAI,QAAQ,WAAW;AACnB,aAAS,YAAY,gBAAgB,QAAQ,QAAQ,SAAS;AAAA,EAClE,WACS,QAAQ,OAAO,UAAU,QAAQ,UAAU,QAAQ;AACxD,UAAM,YAAY,UAAU,KAAK,OAAO,UAAU,SAAS,UAAU;AACrE,aAAS,KAAK,QAAQ;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,cAAc,cAAc,UAAU,SAAS,QAAQ,OAAO,QAAQ,QAAQ,UAAU,KAAK;AAAA,IACxG;AAAA,EACJ,WACS,QAAQ,OAAO,QAAQ;AAC5B,aAAS,KAAK,QAAQ;AAAA,MAClB,MAAM,UAAU;AAAA,MAChB,OAAO,cAAc,QAAQ,OAAO,KAAK;AAAA,IAC7C;AAAA,EACJ,WACS,QAAQ,UAAU,QAAQ;AAC/B,aAAS,KAAK,QAAQ;AAAA,MAClB,MAAM,UAAU;AAAA,MAChB,OAAO,cAAc,QAAQ,UAAU,KAAK;AAAA,IAChD;AAAA,EACJ;AACJ;AACO,SAAS,WAAW,UAAU,OAAO;AACxC,QAAM,OAAO,SAAS,QAAQ,MAAM,OAAO,SAAS;AACpD,MAAI,CAAC,QAAQ,EAAC,6BAAM,SAAQ;AACxB;AAAA,EACJ;AACA,QAAM,QAAQ,KAAK,QAAQ,MAAM,QAAQ,MAAMD;AAC/C,OAAK,SAAS;AACd,MAAI,KAAK,QAAQ,KAAK;AAClB,SAAK,SAAS;AAAA,EAClB;AACJ;;;ACtDO,IAAM,YAAN,MAAgB;AAAA,EACnB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AAAA,EACJ;AACJ;;;ACdO,IAAM,OAAN,MAAW;AAAA,EACd,cAAc;AACV,SAAK,SAAS,IAAI,UAAU;AAC5B,SAAK,SAAS;AACd,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,OAAO,SAAS;AACrB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,aAAa,OAAO,KAAK,WAAW,KAAK,SAAS;AAAA,IACvE;AACA,SAAK,OAAO,KAAK,KAAK,MAAM;AAC5B,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,SAAK,UAAU,KAAK,KAAK,SAAS;AAClC,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AAAA,EACJ;AACJ;;;AC5BO,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,QAAQ;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,mBAAmB,UAAU;AANjC;AAOQ,UAAM,SAAO,cAAS,SAAT,mBAAe,WAAU,SAAS,MAAM,iBAAiB,QAAQ,KAAK,YAAY,eAAe,QAAQ,KAAK;AAC3H,WAAO;AAAA,MACH,GAAG,iBAAiB,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,MAC3C,GAAG,eAAe,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,KAAK,UAAU;AACX,iBAAa,KAAK,SAAS,QAAQ;AAAA,EACvC;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,OAAO,SAAS,QAAQ;AAC9B,WAAO,CAAC,SAAS,aAAa,CAAC,SAAS,YAAY,CAAC,EAAC,6BAAM;AAAA,EAChE;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,eAAW,UAAU,KAAK;AAAA,EAC9B;AACJ;;;ACjCA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,QAAQ,MAAM;AAC1C,WAAO,QAAQ,QAAQ,IAAI,YAAY,MAAM,CAAC;AAAA,EAClD,GAAG,OAAO;AACd;;;ACLA,IAAME,QAAO;AAAb,IAAkBC,UAAS;AAA3B,IAA8BC,eAAc;AAA5C,IAA+C,WAAW;AAA1D,IAA6D,kBAAkB;AAA/E,IAAmF,gBAAgB;AAAnG,IAAsG,aAAa;AAAnH,IAAyHC,YAAW,KAAK,KAAKF;AACvI,SAAS,cAAc,UAAU;AACpC,QAAM,kBAAkB,SAAS,iBAAiB,EAAE,IAAI,GAAG,IAAI,aAAa,iBAAiB,SAAS,QAAQ,GAAG,UAAU,KAAK,IAAI,EAAE,GAAG,UAAU,KAAK,IAAI,EAAE,GAAG,EAAE,YAAY,IAAI,SAAS,QAAQ,YAAY,YAAY,YAAY,YAAY,YAAY;AAChQ,MAAI,CAAC,aAAa,CAAC,WAAW;AAC1B;AAAA,EACJ;AACA,QAAM,gBAAgB,aAAa,WAAW,cAAc,OAAO,gBAAgB,aAAa,WAAW,cAAc;AACzH,OAAK,gBAAgB,iBAAiB,CAAC,SAAS,WAAW;AACvD,aAAS,YAAa,CAAC,CAAC,aAAa,UAAU,aAAe,CAAC,CAAC,aAAa,UAAU;AACvF,QAAI,WAAW;AACX,eAAS,SAAS,IAAI,SAAS,SAAS,IAAID,QAAO,SAAS,SAAS;AAAA,IACzE;AACA,QAAI,WAAW;AACX,eAAS,SAAS,IAAI,SAAS,SAAS,IAAIA,QAAO,SAAS,SAAS;AAAA,IACzE;AAAA,EACJ,YACU,CAAC,aAAa,UAAU,eAAe,CAAC,aAAa,UAAU,cAAc,SAAS,WAAW;AACvG,aAAS,YAAY;AAAA,EACzB,WACS,SAAS,WAAW;AACzB,UAAM,MAAM,SAAS,UAAU,MAAM,SAAS;AAC9C,QAAI,cACE,IAAI,IAAI,gBAAgB,KAAK,IAAI,IAAIE,gBAAiB,IAAI,IAAI,gBAAgB,KAAK,IAAI,IAAIA,eAAe;AAC5G,UAAI,KAAK,CAAC,UAAU;AAAA,IACxB;AACA,QAAI,cACE,IAAI,IAAI,gBAAgB,KAAK,IAAI,IAAIA,gBAAiB,IAAI,IAAI,gBAAgB,KAAK,IAAI,IAAIA,eAAe;AAC5G,UAAI,KAAK,CAAC,UAAU;AAAA,IACxB;AAAA,EACJ;AACJ;AACO,SAAS,KAAK,UAAU,aAAa,WAAW,UAAU,WAAW,OAAO;AAC/E,YAAU,UAAU,KAAK;AACzB,QAAM,iBAAiB,SAAS,SAAS,iBAAgB,iDAAgB,WAAU,eAAe,UAAU,CAAC,WAAW;AACxH,MAAI,aAAa,WAAW;AACxB,aAAS,SAAS,KAAM,YAAY,MAAM,UAAW,kBAAkB;AAAA,EAC3E;AACA,OAAI,iDAAgB,WAAU,WAAW;AACrC,aAAS,SAAS,KACb,iBAAiB,eAAe,eAAe,MAAM,WAAY,kBAAkB;AAAA,EAC5F;AACA,QAAM,QAAQ,SAAS;AACvB,WAAS,SAAS,OAAO,KAAK;AAC9B,QAAM,WAAW,SAAS,SAAS,KAAK,SAAS;AACjD,OAAI,iDAAgB,WAChB,WAAWA,iBACT,CAAC,eAAe,WAAW,SAAS,KAAKA,gBAAe,SAAS,KAAK,YACnE,eAAe,WAAW,SAAS,KAAKA,gBAAe,SAAS,KAAK,CAAC,WAAY;AACvF,aAAS,IAAI,gBAAgB;AAC7B,QAAI,WAAW;AACX,eAAS,SAAS,IAAI,SAAS,IAAI;AAAA,IACvC;AAAA,EACJ;AACA,QAAM,gBAAgB,SAAS,QAAQ,QAAQ,mBAAmB,WAAW,SAAS,iBAAiB,cAAc;AACrH,WAAS,OAAO,eAAe;AAC/B,QAAM,EAAE,SAAS,IAAI;AACrB,WAAS,MAAM,QAAQ;AACvB,MAAI,YAAY,SAAS;AACrB,aAAS,KAAK,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,SAAS,CAAC,CAAC;AACxD,aAAS,KAAK,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,SAAS,CAAC,CAAC;AAAA,EAC5D;AACJ;AACO,SAAS,KAAK,UAAU,WAAW;AACtC,QAAM,YAAY,SAAS;AAC3B,MAAI,CAAC,SAAS,MAAM;AAChB;AAAA,EACJ;AACA,QAAM,gBAAgB,SAAS,KAAK,cAAc,gBAAgB,WAAW,aAAa;AAAA,IACtF,GAAG,gBAAgB,KAAK,MAAM,KAAK;AAAA,IACnC,GAAG,gBAAgB,KAAK,MAAM,KAAK;AAAA,EACvC;AACA,WAAS,SAAS,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK,SAAS,WAAW,EAAE,SAAS,KAAK,KAAK;AACtG,WAAS,SAAS,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK,SAAS,WAAW,EAAE,SAAS,KAAK,KAAK;AACtG,WAAS,KAAK,UAAU,SAAS,KAAK;AACtC,QAAM,gBAAgB,KAAK,IAAI,UAAU,OAAO,KAAK,OAAO,UAAU,OAAO,KAAK,MAAM,GAAG,cAAc,gBAAgBF;AACzH,MAAI,SAAS,KAAK,SAAS,aAAa;AACpC,aAAS,KAAK,SAAS;AACvB,aAAS,KAAK,gBAAgB,CAAC;AAAA,EACnC,WACS,SAAS,KAAK,SAAS,eAAe;AAC3C,aAAS,KAAK,SAAS;AACvB,aAAS,KAAK,gBAAgB,CAAC;AAAA,EACnC;AACA,WAAS,KAAK,SAAS,YAAY,cAAc,WAAW,SAAS,KAAK,SAAS;AACvF;AACO,SAAS,UAAU,UAAU,OAAO;AAtF3C;AAuFI,QAAM,mBAAmB,SAAS,SAAS,cAAc,iBAAiB,KAAK,MAAM,cAAc,YAAY;AAC/G,MAAI,CAAC,aAAa;AACd;AAAA,EACJ;AACA,MAAI,SAAS,gBAAgB,SAAS,WAAW;AAC7C,aAAS,gBAAgB,MAAM;AAC/B;AAAA,EACJ;AACA,QAAM,QAAO,cAAS,kBAAT,mBAAwB,SAAS,UAAU;AACxD,MAAI,MAAM;AACN,aAAS,SAAS,MAAM,IAAI;AAAA,EAChC;AACA,MAAI,YAAY,OAAO;AACnB,aAAS,SAAS,IAAI,MAAM,SAAS,SAAS,GAAG,CAAC,UAAU,QAAQ;AACpE,aAAS,SAAS,IAAI,MAAM,SAAS,SAAS,GAAG,CAAC,UAAU,QAAQ;AAAA,EACxE;AACA,WAAS,gBAAgB,SAAS;AACtC;AACO,SAAS,wBAAwB,UAAU;AAC9C,SAAO,SAAS,KAAK,UAAU,SAAS,KAAK,SAAS;AAC1D;AACO,SAAS,SAAS,UAAU;AAC/B,QAAM,YAAY,SAAS,WAAW,UAAU,SAAS,SAAS,cAAc,QAAQ,KAAK;AAC7F,MAAI,CAAC,YAAY,QAAQ;AACrB;AAAA,EACJ;AACA,QAAM,UAAU,YAAY,YAAY,EAAE,GAAG,IAAI,GAAG,GAAG,GAAGI,cAAa,MAAM,aAAa;AAAA,IACtF,GAAG,QAAQ,IAAIA,cAAa,UAAU,OAAO,KAAK;AAAA,IAClD,GAAG,QAAQ,IAAIA,cAAa,UAAU,OAAO,KAAK;AAAA,EACtD,GAAG,MAAM,SAAS,YAAY,GAAG,WAAW,YAAY,KAAK,UAAU,GAAG,mBAAmB,cAAc,YAAY,YAAY;AACnI,WAAS,OAAO,mBAAmB,mBAAmB,UAAU,OAAO;AACvE,WAAS,OAAO;AAAA,IACZ,QAAQ;AAAA,IACR,WAAW,SAAS,SAAS,KAAKF,eAAc,gBAAgB,YAAY,gBAAgB;AAAA,IAC5F,OAAO,UAAU,IAAIC;AAAA,IACrB,QAAQ;AAAA,IACR,cAAc,SAAS,OAAO;AAAA,EAClC;AACJ;;;AC3HA,IAAM,aAAa;AAAnB,IAAsB,oBAAoB;AAA1C,IAA6C,qBAAqB;AAC3D,IAAM,YAAN,MAAgB;AAAA,EACnB,KAAK,UAAU;AACX,UAAM,UAAU,SAAS,SAAS,iBAAiB,QAAQ,KAAK;AAChE,aAAS,UAAU;AAAA,MACf,QAAQ,eAAe;AAAA,MACvB,cAAc,cAAc,eAAe,YAAY;AAAA,MACvD,SAAS,eAAe;AAAA,IAC5B;AACA,aAAS,QAAQ;AAAA,EACrB;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,CAAC,SAAS,aAAa,SAAS,QAAQ,KAAK;AAAA,EACxD;AAAA,EACA,KAAK,UAAU,OAAO;AAhB1B;AAiBQ,UAAM,kBAAkB,SAAS,SAAS,cAAc,gBAAgB;AACxE,QAAI,CAAC,YAAY,QAAQ;AACrB;AAAA,IACJ;AACA,UAAM,YAAY,SAAS,WAAW,UAAU,UAAU,OAAO;AACjE,mBAAS,QAAO,cAAhB,GAAgB,YAAc,cAAc,YAAY,KAAK,IAAI;AACjE,mBAAS,QAAO,cAAhB,GAAgB,YAAc,cAAc,SAAS,QAAQ,KAAK,KAAK,IAAI;AAC3E,UAAM,aAAa,wBAAwB,QAAQ,GAAG,YAAY,SAAS,OAAO,YAAY,UAAU,OAAO,cAAc,YAAY,SAAS,OAAO,WAAW,UAAU,YAAY,gBAAgB,KAAK,KAAK,IAAI,SAAS,aAAa,YAAY,OAAO,SAAS,UAAU,IAAI,UAAU,mBAAmB,cAAc,MAAM,UAAU,oBAAoB,YAAa,YAAY,aAAa,aAAa,cAAe,YAAY,WAAW,SAAS,OAAO,YAAY,UAAU,OAAO;AAC7e,QAAI,YAAY,KAAK,QAAQ;AACzB,WAAK,UAAU,SAAS;AAAA,IAC5B,OACK;AACD,WAAK,UAAU,aAAa,WAAW,UAAU,WAAW,KAAK;AAAA,IACrE;AACA,kBAAc,QAAQ;AAAA,EAC1B;AACJ;;;AChCA,eAAsB,cAAc,QAAQ,UAAU,MAAM;AACxD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,QAAQ,MAAM;AAChC,WAAO,QAAQ,QAAQ,IAAI,UAAU,CAAC;AAAA,EAC1C,GAAG,OAAO;AACd;;;ACNA,IAAME,UAAS;AAAf,IAAkBC,YAAW,KAAK,KAAKD;AAAvC,IAA+CE,YAAW;AAA1D,IAA6D,SAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AAC5E,SAAS,WAAW,MAAM;AAC7B,QAAM,EAAE,SAAS,UAAU,OAAO,IAAI;AACtC,MAAI,CAAC,SAAS,aAAa;AACvB,aAAS,cAAc,EAAE,KAAKA,WAAU,KAAKD,UAAS;AAAA,EAC1D;AACA,QAAM,cAAc,SAAS;AAC7B,UAAQ,IAAI,OAAO,GAAG,OAAO,GAAG,QAAQ,YAAY,KAAK,YAAY,KAAK,KAAK;AACnF;;;ACNA,IAAME,SAAQ;AAAd,IAAkBC,YAAW;AAA7B,IAAkCC,YAAW;AACtC,IAAM,eAAN,MAAmB;AAAA,EACtB,cAAc;AACV,SAAK,aAAa,CAAC,QAAQ;AAAA,EAC/B;AAAA,EACA,KAAK,MAAM;AACP,eAAW,IAAI;AAAA,EACnB;AAAA,EACA,gBAAgB;AACZ,WAAOF;AAAA,EACX;AAAA,EACA,aAAa,WAAW,UAAU;AAC9B,UAAM,YAAY,SAAS,WAAW,SAAQ,uCAAW,UAAS;AAAA,MAC9D,KAAKC;AAAA,MACL,KAAKC;AAAA,IACT;AACA,aAAS,cAAc,CAAC,SAAS,KAAK,IAChC;AAAA,MACE,KAAKA;AAAA,MACL,KAAK,SAAS,KAAK;AAAA,IACvB,IACE,EAAE,KAAK,SAAS,MAAM,GAAG,GAAG,KAAK,SAAS,MAAM,GAAG,EAAE;AAAA,EAC/D;AACJ;;;ACxBA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,aAAa,GAAG,OAAO;AACrD;;;ACHO,IAAM,eAAN,MAAmB;AAAA,EACtB,YAAY,WAAW,QAAQ;AAC3B,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,WAAW,gBAAgB,KAAK,SAAS,SAAS,QAAQ,OAAO,SAAS,IAAI,SAAS,QAAQ,gBAAgB;AACrH,QAAI,UAAU;AACV,eAAS,QAAQ,uBAAuB,UAAU,SAAS,QAAQ,MAAM,WAAW,KAAK,WAAW,OAAO,YAAY;AAAA,IAC3H;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,EAAE,GAAG,YAAY,GAAG,YAAY,GAAG,WAAW,IAAI,SAAS,QAAQ,MAAM,WAAW,EAAE,MAAM,IAAI;AACtG,WAAQ,CAAC,SAAS,aACd,CAAC,SAAS,cACR,+BAAO,EAAE,WAAU,UAAa,WAAW,WACxC,+BAAO,EAAE,WAAU,UAAa,WAAW,WAC3C,+BAAO,EAAE,WAAU,UAAa,WAAW;AAAA,EACxD;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,gBAAY,SAAS,OAAO,KAAK;AAAA,EACrC;AACJ;;;ACtBA,eAAsB,iBAAiB,QAAQ,UAAU,MAAM;AAC3D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,SAAS,eAAa;AAClD,WAAO,QAAQ,QAAQ,IAAI,aAAa,WAAW,MAAM,CAAC;AAAA,EAC9D,GAAG,OAAO;AACd;;;ACNA,IAAI;AAAA,CACH,SAAUC,aAAY;AACnB,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AACtC,GAAG,eAAe,aAAa,CAAC,EAAE;AAClC,IAAM,oBAAoB;AAA1B,IAAwE,WAAW;AAAnF,IAA6I,WAAW;AAAxJ,IAA4J,eAAe;AAA3K,IAA8K,cAAc;AACrL,IAAM,kBAAN,MAAsB;AAAA,EACzB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,YAAY,OAAO;AACf,WAAO,KAAK,aAAa,MAAM,KAAK;AAAA,EACxC;AAAA,EACA,iBAAiB,OAAO;AACpB,WAAO,KAAK,aAAa,MAAM,KAAK;AAAA,EACxC;AAAA,EACA,YAAY,OAAO;AACf,WAAO,KAAK,aAAa,KAAK;AAAA,EAClC;AAAA,EACA,aAAa,UAAU;AACnB,QAAI,OAAO,aAAa,UAAU;AAC9B;AAAA,IACJ;AACA,QAAI,EAAC,qCAAU,WAAW,KAAK,gBAAe;AAC1C;AAAA,IACJ;AACA,UAAM,WAAW,SAAS,QAAQ,mBAAmB,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM;AACpE,aAAO,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,MAAM,SAAY,IAAI,IAAI;AAAA,IAC9D,CAAC,GAAG,SAAS,SAAS,KAAK,QAAQ;AACnC,WAAO,SACD;AAAA,MACE,GAAG,OAAO,WAAW,CAAC,MAAM,SACtB,SAAS,OAAO,WAAW,CAAC,GAAG,QAAQ,IAAI,cAC3C;AAAA,MACN,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,QAAQ;AAAA,MAC1C,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,QAAQ;AAAA,MAC1C,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,QAAQ;AAAA,IAC9C,IACE;AAAA,EACV;AACJ;;;AC1CA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,gBAAgB,IAAI,gBAAgB,GAAG,OAAO;AAC/D;;;ACHA,IAAI;AAAA,CACH,SAAUC,aAAY;AACnB,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AACtC,GAAG,eAAe,aAAa,CAAC,EAAE;AAC3B,IAAM,kBAAN,MAAsB;AAAA,EACzB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,YAAY,OAAO;AACf,UAAM,aAAa,MAAM,OAAO,WAAW,WAAW,OAAO,MAAM;AACnE,QAAI,SAAS,MAAM,UAAa,SAAS,MAAM,UAAa,SAAS,MAAM,QAAW;AAClF,aAAO,SAAS,QAAQ;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,aAAa,MAAM,OAAO,WAAW,WAAW,OAAO,MAAM;AACnE,QAAI,SAAS,MAAM,UAAa,SAAS,MAAM,QAAW;AACtD,aAAO,SAAS;AAAA,QACZ,GAAG,cAAc,SAAS,CAAC;AAAA,QAC3B,GAAG,cAAc,SAAS,CAAC;AAAA,QAC3B,GAAG,cAAc,SAAS,CAAC;AAAA,MAC/B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,YAAY,OAAO;AACf,QAAI,CAAC,MAAM,WAAW,KAAK,GAAG;AAC1B;AAAA,IACJ;AACA,UAAM,QAAQ,iGAAiG,SAAS,MAAM,KAAK,KAAK,GAAG,YAAY,GAAGC,gBAAe,GAAG,QAAQ;AACpL,WAAO,SACD,WAAW;AAAA,MACT,GAAG,OAAO,SAAS,YAAY,WAAW,OAAO,WAAW,CAAC,CAAC,IAAIA;AAAA,MAClE,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,KAAK;AAAA,MACvC,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,KAAK;AAAA,MACvC,GAAG,SAAS,OAAO,WAAW,CAAC,GAAG,KAAK;AAAA,IAC3C,CAAC,IACC;AAAA,EACV;AACJ;;;AC1CA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,gBAAgB,IAAI,gBAAgB,GAAG,OAAO;AAC/D;;;ACHO,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,WAAW;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,iBAAiB,SAAS,QAAQ,SAAS,UAAU;AAC3D,aAAS,UAAU,kCAAkC,gBAAgB,OAAO;AAC5E,UAAM,mBAAmB,eAAe;AACxC,QAAI,iBAAiB,QAAQ;AACzB,eAAS,QAAQ,WACZ,cAAc,iBAAiB,KAAK,IAAI,qBAAsB,KAAK,UAAU,OAAO;AACzF,UAAI,CAAC,iBAAiB,MAAM;AACxB,iBAAS,QAAQ,YAAY,UAAU;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,OAAO;AACb,WAAQ,CAAC,SAAS,aACd,CAAC,SAAS,YACV,CAAC,CAAC,SAAS,WACX,SAAS,QAAQ,YACf,SAAS,QAAQ,YAAY,SAAS,SAClC,SAAS,QAAQ,YAAY,QAAQ,SAClC,SAAS,QAAQ,SAAS,SAAS,SAAS,QAAQ,YAAY;AAAA,EACjF;AAAA,EACA,MAAM,UAAU;AACZ,QAAI,SAAS,SAAS;AAClB,eAAS,QAAQ,OAAO;AACxB,eAAS,QAAQ,QAAQ;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,KAAK,CAAC,SAAS,SAAS;AAChD;AAAA,IACJ;AACA,oBAAgB,UAAU,SAAS,SAAS,MAAM,SAAS,QAAQ,QAAQ,UAAU,SAAS,KAAK;AAAA,EACvG;AACJ;;;ACtCA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,WAAW,eAAa;AACpD,WAAO,QAAQ,QAAQ,IAAI,eAAe,SAAS,CAAC;AAAA,EACxD,GAAG,OAAO;AACd;;;ACLA,IAAMC,eAAc;AAApB,IAAuB,YAAY;AAC5B,SAAS,iBAAiB,MAAM;AACnC,MAAK,KAAK,YAAY,QAAQ,UAAU,KAAK,YAAY,QAAQ,SAC5D,KAAK,cAAc,iBAAiB,QAAQ,KAAK,cAAc,iBAAiB,OAAQ;AACzF;AAAA,EACJ;AACA,MAAI,KAAK,OAAO,QAAQ,aAAa,KAAK,cAAc,iBAAiB,MAAM;AAC3E,SAAK,SAAS,SAAS,IAAI,KAAK,OAAO,KAAK,OAAO;AAAA,EACvD,WACS,KAAK,OAAO,OAAO,KAAK,WAAW,SAAS,KAAK,cAAc,iBAAiB,OAAO;AAC5F,SAAK,SAAS,SAAS,IAAI,KAAK,WAAW,QAAQ,KAAK,OAAO,KAAK,OAAO;AAAA,EAC/E;AACA,QAAM,WAAW,KAAK,SAAS,SAAS;AACxC,MAAI,UAAU;AACd,MAAK,KAAK,cAAc,iBAAiB,SACrC,KAAK,OAAO,SAAS,KAAK,WAAW,SACrC,WAAWA,gBACV,KAAK,cAAc,iBAAiB,QAAQ,KAAK,OAAO,QAAQ,aAAa,WAAWA,cAAc;AACvG,UAAM,cAAc,cAAc,KAAK,SAAS,QAAQ,OAAO,WAAW,KAAK;AAC/E,SAAK,SAAS,SAAS,KAAK,CAAC;AAC7B,cAAU;AAAA,EACd;AACA,MAAI,CAAC,SAAS;AACV;AAAA,EACJ;AACA,QAAM,SAAS,KAAK,OAAO,IAAI,KAAK;AACpC,MAAI,KAAK,OAAO,SAAS,KAAK,WAAW,SAAS,KAAK,cAAc,iBAAiB,OAAO;AACzF,SAAK,SAAS,SAAS,IAAI,KAAK,WAAW,QAAQ;AAAA,EACvD,WACS,KAAK,OAAO,QAAQ,aAAa,KAAK,cAAc,iBAAiB,MAAM;AAChF,SAAK,SAAS,SAAS,IAAI;AAAA,EAC/B;AACA,MAAI,KAAK,YAAY,QAAQ,OAAO;AAChC,SAAK,SAAS,QAAQ;AAAA,EAC1B;AACJ;AACO,SAAS,eAAe,MAAM;AACjC,MAAK,KAAK,YAAY,QAAQ,UAAU,KAAK,YAAY,QAAQ,SAC5D,KAAK,cAAc,iBAAiB,UAAU,KAAK,cAAc,iBAAiB,KAAM;AACzF;AAAA,EACJ;AACA,MAAI,KAAK,OAAO,SAAS,aAAa,KAAK,cAAc,iBAAiB,KAAK;AAC3E,SAAK,SAAS,SAAS,IAAI,KAAK,OAAO,KAAK,OAAO;AAAA,EACvD,WACS,KAAK,OAAO,MAAM,KAAK,WAAW,UAAU,KAAK,cAAc,iBAAiB,QAAQ;AAC7F,SAAK,SAAS,SAAS,IAAI,KAAK,WAAW,SAAS,KAAK,OAAO,KAAK,OAAO;AAAA,EAChF;AACA,QAAM,WAAW,KAAK,SAAS,SAAS;AACxC,MAAI,UAAU;AACd,MAAK,KAAK,cAAc,iBAAiB,UACrC,KAAK,OAAO,UAAU,KAAK,WAAW,UACtC,WAAWA,gBACV,KAAK,cAAc,iBAAiB,OAAO,KAAK,OAAO,OAAO,aAAa,WAAWA,cAAc;AACrG,UAAM,cAAc,cAAc,KAAK,SAAS,QAAQ,OAAO,SAAS,KAAK;AAC7E,SAAK,SAAS,SAAS,KAAK,CAAC;AAC7B,cAAU;AAAA,EACd;AACA,MAAI,CAAC,SAAS;AACV;AAAA,EACJ;AACA,QAAM,SAAS,KAAK,OAAO,IAAI,KAAK;AACpC,MAAI,KAAK,OAAO,UAAU,KAAK,WAAW,UAAU,KAAK,cAAc,iBAAiB,QAAQ;AAC5F,SAAK,SAAS,SAAS,IAAI,KAAK,WAAW,SAAS;AAAA,EACxD,WACS,KAAK,OAAO,OAAO,aAAa,KAAK,cAAc,iBAAiB,KAAK;AAC9E,SAAK,SAAS,SAAS,IAAI;AAAA,EAC/B;AACA,MAAI,KAAK,YAAY,QAAQ,OAAO;AAChC,SAAK,SAAS,QAAQ;AAAA,EAC1B;AACJ;;;ACrEO,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,WAAW,OAAO,SAAS;AACxC,QAAI,CAAC,KAAK,MAAM,SAAS,OAAO,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,YAAY,KAAK;AACvB,QAAI,UAAU;AACd,eAAW,UAAU,UAAU,QAAQ,OAAO,GAAG;AAC7C,UAAI,OAAO,mBAAmB,QAAW;AACrC,kBAAU,OAAO,eAAe,UAAU,OAAO,SAAS;AAAA,MAC9D;AACA,UAAI,SAAS;AACT;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS;AACT;AAAA,IACJ;AACA,UAAM,MAAM,SAAS,YAAY,GAAG,SAAS,SAAS,QAAQ,OAAO,SAAS,UAAU,GAAG,SAAS,gBAAgB,KAAK,IAAI,GAAG,aAAa,UAAU,OAAO;AAC9J,qBAAiB,EAAE,UAAU,SAAS,WAAW,QAAQ,YAAY,QAAQ,KAAK,CAAC;AACnF,mBAAe,EAAE,UAAU,SAAS,WAAW,QAAQ,YAAY,QAAQ,KAAK,CAAC;AAAA,EACrF;AACJ;;;AC9BA,IAAMC,eAAc;AACb,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,QAAQ,CAAC,QAAQ,OAAO;AAAA,EACjC;AAAA,EACA,OAAO,UAAU,WAAW,QAAQ,SAAS;AACzC,QAAI,CAAC,KAAK,MAAM,SAAS,OAAO,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,YAAY,KAAK;AACvB,YAAQ,SAAS,SAAS;AAAA,MACtB,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AACjB,YAAI,cAAc,SAAS,UAAU,UAAU,OAAO,MAAM,OAAO,QAAQ,SAAS,UAAU,GAAG,SAAS,GAAG;AACzG;AAAA,QACJ;AACA;AAAA,MACJ,KAAK,gBAAgB,QAAQ;AACzB,cAAM,EAAE,IAAI,GAAG,IAAI,aAAa,SAAS,UAAU,SAAS,UAAU,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,IAAI,SAAS;AACrG,YAAK,KAAKA,gBAAe,KAAK,SAAS,WAAW,UAC7C,KAAKA,gBAAe,KAAK,SAAS,WAAW,UAC7C,MAAMA,gBAAe,KAAK,CAAC,SAAS,WAAW,UAC/C,MAAMA,gBAAe,KAAK,CAAC,SAAS,WAAW,QAAS;AACzD;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AACA,cAAU,UAAU,OAAO,UAAU,SAAS,OAAO,IAAI;AAAA,EAC7D;AACJ;;;AC/BA,IAAMC,eAAc;AACb,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,QAAQ,CAAC,QAAQ,IAAI;AAAA,EAC9B;AAAA,EACA,OAAO,UAAU,WAAW,OAAO,SAAS;AACxC,QAAI,CAAC,KAAK,MAAM,SAAS,OAAO,GAAG;AAC/B;AAAA,IACJ;AACA,SAAK,SAAS,QAAQ,KAAK,SAAS,eAC/B,cAAc,iBAAiB,QAAQ,cAAc,iBAAiB,YACtE,SAAS,QAAQ,KAAK,SAAS,aAC3B,cAAc,iBAAiB,OAAO,cAAc,iBAAiB,UAAU;AACpF;AAAA,IACJ;AACA,UAAM,iBAAiB,SAAS,QAAQ,KAAK,SAAS,YAAY,KAAK,WAAW,aAAa,UAAU,OAAO,MAAM,UAAU,SAAS,UAAU;AACnJ,QAAI,CAAC,eAAe,QAAQ;AACxB,UAAK,SAAS,SAAS,IAAIA,gBAAe,SAAS,SAAS,KAAK,WAAW,SAAS,WAChF,SAAS,SAAS,IAAIA,gBAAe,SAAS,SAAS,KAAK,CAAC,WAC7D,SAAS,SAAS,IAAIA,gBAAe,SAAS,SAAS,KAAK,WAAW,QAAQ,WAC/E,SAAS,SAAS,IAAIA,gBAAe,SAAS,SAAS,KAAK,CAAC,SAAU;AACxE;AAAA,MACJ;AACA,UAAI,CAAC,cAAc,SAAS,UAAU,UAAU,OAAO,MAAM,OAAO,QAAQ,SAAS,SAAS,GAAG;AAC7F,kBAAU,UAAU,OAAO,QAAQ;AAAA,MACvC;AAAA,IACJ,OACK;AACD,YAAM,WAAW,SAAS;AAC1B,UAAK,CAAC,eAAe,WACjB,SAAS,IAAI,WAAW,SAAS,WACjC,cAAc,iBAAiB,UAC9B,eAAe,WAAW,SAAS,IAAI,CAAC,WAAW,cAAc,iBAAiB,KAAM;AACzF,kBAAU,UAAU,OAAO,QAAQ;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACtCA,IAAMC,eAAc;AAApB,IAAuB,cAAc;AAC9B,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,QAAQ,CAAC,QAAQ,GAAG;AAAA,EAC7B;AAAA,EACA,OAAO,UAAU,WAAW,OAAO,SAAS;AACxC,QAAI,CAAC,KAAK,MAAM,SAAS,OAAO,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,YAAY,KAAK;AACvB,YAAQ,SAAS,SAAS;AAAA,MACtB,KAAK,gBAAgB,QAAQ;AACzB,cAAM,EAAE,GAAG,IAAI,GAAG,GAAG,IAAI,SAAS;AAClC,cAAM,UAAU,OAAO;AACvB,gBAAQ,SAAS,SAAS,WAAW;AACrC,gBAAQ,QAAQ,SAAS,SAAS,QAAQ,KAAK;AAC/C,gBAAQ,MAAM,OAAO,OAAO,SAAS,UAAU,CAAC;AAChD,cAAM,EAAE,IAAI,GAAG,IAAI,aAAa,SAAS,UAAU,OAAO;AAC1D,YAAK,MAAMA,gBAAe,MAAM,eAC3B,MAAMA,gBAAe,MAAM,eAC3B,MAAMA,gBAAe,MAAM,eAC3B,MAAMA,gBAAe,MAAM,aAAc;AAC1C;AAAA,QACJ;AACA,iBAAS,SAAS,IAAI,KAAK,MAAM,cAAc;AAAA,UAC3C,KAAK;AAAA,UACL,KAAK,UAAU,OAAO,KAAK;AAAA,QAC/B,CAAC,CAAC;AACF,iBAAS,SAAS,IAAI,KAAK,MAAM,cAAc;AAAA,UAC3C,KAAK;AAAA,UACL,KAAK,UAAU,OAAO,KAAK;AAAA,QAC/B,CAAC,CAAC;AACF,cAAM,EAAE,IAAI,OAAO,IAAI,MAAM,IAAI,aAAa,SAAS,UAAU,SAAS,UAAU;AACpF,iBAAS,YAAY,KAAK,MAAM,CAAC,OAAO,CAAC,KAAK;AAC9C,iBAAS,SAAS,QAAQ,SAAS;AACnC;AAAA,MACJ;AAAA,MACA,SAAS;AACL,YAAI,cAAc,SAAS,UAAU,UAAU,OAAO,MAAM,OAAO,QAAQ,SAAS,UAAU,GAAG,SAAS,GAAG;AACzG;AAAA,QACJ;AACA,gBAAQ,SAAS,SAAS;AAAA,UACtB,KAAK,gBAAgB,SAAS;AAC1B,qBAAS,SAAS,IACd,KAAK,MAAM,cAAc;AAAA,cACrB,KAAK,CAAC,SAAS,WAAW;AAAA,cAC1B,KAAK,SAAS,WAAW;AAAA,YAC7B,CAAC,CAAC,IAAI,SAAS,WAAW;AAC9B,qBAAS,SAAS,IACd,KAAK,MAAM,cAAc;AAAA,cACrB,KAAK,CAAC,SAAS,WAAW;AAAA,cAC1B,KAAK,SAAS,WAAW;AAAA,YAC7B,CAAC,CAAC,IAAI,SAAS,WAAW;AAC9B,kBAAM,EAAE,IAAI,GAAG,IAAI,aAAa,SAAS,UAAU,SAAS,UAAU;AACtE,gBAAI,SAAS,WAAW,QAAQ;AAC5B,uBAAS,YAAY,KAAK,MAAM,IAAI,EAAE;AACtC,uBAAS,SAAS,QAAQ,SAAS;AAAA,YACvC;AACA;AAAA,UACJ;AAAA,UACA,KAAK,gBAAgB,QAAQ;AACzB,kBAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,aAAa,UAAU,OAAO,MAAM,SAAS;AAAA,cAClF,QAAQ,WAAW,SAAS,SAAS,UAAU,IAAI,SAAS,OAAO;AAAA,cACnE,MAAM,CAAC,SAAS,UAAU,IAAI,SAAS,OAAO;AAAA,cAC9C,OAAO,WAAW,QAAQ,SAAS,UAAU,IAAI,SAAS,OAAO;AAAA,cACjE,KAAK,CAAC,SAAS,UAAU,IAAI,SAAS,OAAO;AAAA,YACjD,GAAG,YAAY,SAAS,UAAU,GAAG,aAAa,gBAAgB,SAAS,UAAU,SAAS;AAC9F,gBAAI,cAAc,iBAAiB,SAC/B,WAAW,OAAO,WAAW,QAAQ,SAAS,OAAO,GAAG;AACxD,uBAAS,SAAS,IAAI,OAAO;AAC7B,uBAAS,gBAAgB,IAAI,SAAS,SAAS;AAC/C,kBAAI,CAAC,MAAM;AACP,yBAAS,SAAS,IAAI,UAAU,IAAI,WAAW;AAC/C,yBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,cACnD;AAAA,YACJ,WACS,cAAc,iBAAiB,QAAQ,WAAW,QAAQ,CAAC,SAAS,OAAO,GAAG;AACnF,uBAAS,SAAS,IAAI,OAAO;AAC7B,uBAAS,gBAAgB,IAAI,SAAS,SAAS;AAC/C,kBAAI,CAAC,MAAM;AACP,yBAAS,SAAS,IAAI,UAAU,IAAI,WAAW;AAC/C,yBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,cACnD;AAAA,YACJ;AACA,gBAAI,cAAc,iBAAiB,UAC/B,WAAW,MAAM,WAAW,SAAS,SAAS,OAAO,GAAG;AACxD,kBAAI,CAAC,MAAM;AACP,yBAAS,SAAS,IAAI,UAAU,IAAI,WAAW;AAC/C,yBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,cACnD;AACA,uBAAS,SAAS,IAAI,OAAO;AAC7B,uBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,YACnD,WACS,cAAc,iBAAiB,OAAO,WAAW,SAAS,CAAC,SAAS,OAAO,GAAG;AACnF,kBAAI,CAAC,MAAM;AACP,yBAAS,SAAS,IAAI,UAAU,IAAI,WAAW;AAC/C,yBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,cACnD;AACA,uBAAS,SAAS,IAAI,OAAO;AAC7B,uBAAS,gBAAgB,IAAI,SAAS,SAAS;AAAA,YACnD;AACA;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACzGA,IAAM,eAAe,CAAC,UAAU,YAAY;AACxC,SAAQ,SAAS,YAAY,WACzB,SAAS,WAAW,WACpB,SAAS,SAAS,WAClB,SAAS,UAAU,WACnB,SAAS,QAAQ;AACzB;AACO,IAAM,qBAAN,MAAyB;AAAA,EAC5B,YAAY,WAAW;AACnB,SAAK,uBAAuB,CAAC,UAAU,SAAS,eAAe;AAC3D,YAAM,WAAW,SAAS,QAAQ,KAAK;AACvC,UAAI,CAAC,KAAK,SAAS,IAAI,OAAO,KAAK,aAAa,UAAU,OAAO,GAAG;AAChE,aAAK,SAAS,IAAI,SAAS,WAAW,KAAK,SAAS,CAAC;AAAA,MACzD;AAAA,IACJ;AACA,SAAK,iBAAiB,CAAC,UAAU,OAAO,SAAS,cAAc;AAC3D,iBAAW,WAAW,KAAK,SAAS,OAAO,GAAG;AAC1C,gBAAQ,OAAO,UAAU,WAAW,OAAO,OAAO;AAAA,MACtD;AAAA,IACJ;AACA,SAAK,YAAY;AACjB,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC5B;AAAA,EACA,KAAK,UAAU;AACX,SAAK,qBAAqB,UAAU,QAAQ,QAAQ,eAAa,IAAI,cAAc,SAAS,CAAC;AAC7F,SAAK,qBAAqB,UAAU,QAAQ,KAAK,eAAa,IAAI,WAAW,SAAS,CAAC;AACvF,SAAK,qBAAqB,UAAU,QAAQ,SAAS,eAAa,IAAI,eAAe,SAAS,CAAC;AAC/F,SAAK,qBAAqB,UAAU,QAAQ,MAAM,eAAa,IAAI,YAAY,SAAS,CAAC;AAAA,EAC7F;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,CAAC,SAAS,aAAa,CAAC,SAAS;AAAA,EAC5C;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,UAAM,WAAW,SAAS,QAAQ,KAAK;AACvC,SAAK,eAAe,UAAU,OAAO,SAAS,UAAU,SAAS,SAAS,iBAAiB,MAAM;AACjG,SAAK,eAAe,UAAU,OAAO,SAAS,QAAQ,SAAS,SAAS,iBAAiB,IAAI;AAC7F,SAAK,eAAe,UAAU,OAAO,SAAS,SAAS,SAAS,SAAS,iBAAiB,KAAK;AAC/F,SAAK,eAAe,UAAU,OAAO,SAAS,OAAO,SAAS,SAAS,iBAAiB,GAAG;AAAA,EAC/F;AACJ;;;AC3CA,eAAsB,oBAAoB,QAAQ,UAAU,MAAM;AAC9D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,YAAY,eAAa;AACrD,WAAO,QAAQ,QAAQ,IAAI,mBAAmB,SAAS,CAAC;AAAA,EAC5D,GAAG,OAAO;AACd;;;ACLA,IAAIC;AAAA,CACH,SAAUA,aAAY;AACnB,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AAClC,EAAAA,YAAWA,YAAW,GAAG,IAAI,CAAC,IAAI;AACtC,GAAGA,gBAAeA,cAAa,CAAC,EAAE;AAC3B,IAAM,kBAAN,MAAsB;AAAA,EACzB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,YAAY,OAAO;AACf,UAAM,aAAa,MAAM,OAAO,WAAW,WAAW,OAAO,MAAM;AACnE,QAAI,SAAS,MAAM,QAAW;AAC1B,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,aAAa,MAAM,OAAO,WAAW,WAAW,OAAO,MAAM;AACnE,QAAI,SAAS,MAAM,QAAW;AAC1B,aAAO;AAAA,QACH,GAAG,cAAc,SAAS,CAAC;AAAA,QAC3B,GAAG,cAAc,SAAS,CAAC;AAAA,QAC3B,GAAG,cAAc,SAAS,CAAC;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,OAAO;AACf,QAAI,CAAC,MAAM,WAAW,KAAK,YAAY,GAAG;AACtC;AAAA,IACJ;AACA,UAAM,QAAQ,2GAA2G,SAAS,MAAM,KAAK,KAAK,GAAG,QAAQ,IAAI,YAAY,GAAGC,gBAAe;AAC/L,WAAO,SACD;AAAA,MACE,GAAG,OAAO,SAAS,YAAY,WAAW,OAAOD,YAAW,CAAC,CAAC,IAAIC;AAAA,MAClE,GAAG,SAAS,OAAOD,YAAW,CAAC,GAAG,KAAK;AAAA,MACvC,GAAG,SAAS,OAAOA,YAAW,CAAC,GAAG,KAAK;AAAA,MACvC,GAAG,SAAS,OAAOA,YAAW,CAAC,GAAG,KAAK;AAAA,IAC3C,IACE;AAAA,EACV;AACJ;;;AC1CA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,gBAAgB,IAAI,gBAAgB,GAAG,OAAO;AAC/D;;;ACHA,IAAM,WAAW;AACV,IAAM,cAAN,MAAkB;AAAA,EACrB,KAAK,UAAU;AACX,UAAM,YAAY,SAAS,WAAW,cAAc,SAAS,QAAQ,MAAM,gBAAgB,YAAY;AACvG,QAAI,cAAc,QAAQ;AACtB,eAAS,KAAK,YACR,SAAS,OAAO,sBAAsB,UAAU,OAAO,sBAAsB,qBAC3E,UAAU,OAAO;AACzB,UAAI,CAAC,cAAc,MAAM;AACrB,iBAAS,KAAK,YAAY,UAAU;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,WAAQ,CAAC,SAAS,aACd,CAAC,SAAS,YACV,SAAS,KAAK,YACZ,SAAS,KAAK,YAAY,aAAa,aACnC,SAAS,KAAK,YAAY,YAAY,aACnC,SAAS,KAAK,SAAS,aAAa,SAAS,KAAK,YAAY;AAAA,EAC/E;AAAA,EACA,MAAM,UAAU;AACZ,aAAS,KAAK,QAAQ;AAAA,EAC1B;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,oBAAgB,UAAU,SAAS,MAAM,MAAM,SAAS,QAAQ,KAAK,UAAU,SAAS,KAAK;AAAA,EACjG;AACJ;;;AC9BA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,QAAQ,MAAM;AAC1C,WAAO,QAAQ,QAAQ,IAAI,YAAY,CAAC;AAAA,EAC5C,GAAG,OAAO;AACd;;;ACGA,eAAsB,UAAU,QAAQ,UAAU,MAAM;AACpD,SAAO,aAAa,OAAO;AAC3B,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,cAAc,QAAQ,KAAK;AACjC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,iBAAiB,QAAQ,KAAK;AACpC,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,oBAAoB,QAAQ,KAAK;AACvC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,OAAO,QAAQ,OAAO;AAChC;;;ACpBA,eAAsB,qBAAqB,QAAQ,UAAU,MAAM;AAC/D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,UAAU,WAAW,YAAY,WAAS,SAAS,GAAG,KAAK;AACxE,QAAM,OAAO,UAAU,WAAW,aAAa,WAAS,KAAK,IAAI,UAAU,GAAG,KAAK;AACnF,QAAM,OAAO,UAAU,WAAW,eAAe,WAAU,QAAQ,MAAM,IAAI,SAAS,IAAI,KAAK,KAAK,QAAQ,MAAM,IAAI,GAAI,KAAK;AAC/H,QAAM,OAAO,QAAQ,OAAO;AAChC;;;ACPO,SAAS,UAAU,MAAM,OAAO;AACnC,QAAM,EAAE,SAAS,QAAQ,IAAI,MAAME,SAAO,KAAK,gBAAgB,QAAQ;AACvE,MAAI,CAAC,OAAO;AACR;AAAA,EACJ;AACA,QAAM,WAAW,MAAM,OAAO,SAAS,WAAWA;AAClD,UAAQ,cAAc;AACtB,UAAQ,UAAU,OAAO,CAAC,QAAQ,CAAC,QAAQ,UAAU,QAAQ;AAC7D,UAAQ,cAAc;AAC1B;;;ACPA,IAAM,cAAc;AAApB,IAAoH,YAAY;AACzH,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,aAAa,CAAC,OAAO;AAC1B,SAAK,kBAAkB,oBAAI,IAAI;AAAA,EACnC;AAAA,EACA,UAAU;AACN,eAAW,CAAC,KAAK,IAAI,KAAK,KAAK,iBAAiB;AAC5C,UAAI,gBAAgB,aAAa;AAC7B,qCAAM;AAAA,MACV;AACA,WAAK,gBAAgB,OAAO,GAAG;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,KAAK,MAAM;AACP,UAAM,MAAM,KAAK,SAAS;AAC1B,QAAI,CAAC,KAAK;AACN;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,gBAAgB,IAAI,GAAG;AAC1C,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,cAAU,MAAM,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,KAAK,WAAW;AAClB,UAAM,UAAU,UAAU,eAAe,EAAE,WAAW,IAAI;AAC1D,QAAI,CAAC,WAAW,KAAK,OAAK,UAAU,GAAG,QAAQ,UAAU,MAAM,IAAI,CAAC,GAAG;AACnE;AAAA,IACJ;AACA,UAAM,WAAW,CAAC,SAAS,WAAW,CAAC,GAAG,eAAe,WACpD,IAAI,OAAK,QAAQ,UAAU,MAAM,QAAQ,CAAC,CAAC,EAC3C,KAAK,OAAK,CAAC,CAAC,CAAC;AAClB,QAAI,cAAc;AACd,gCAA0B,cAAc,WAAS;AAC7C,YAAI,MAAM,MAAM;AACZ,mBAAS,KAAK,SAAS,MAAM,IAAI,CAAC;AAAA,QACtC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC9B;AAAA,EACA,gBAAgB,UAAU;AACtB,aAAS,eAAe;AAAA,EAC5B;AAAA,EACA,aAAa,YAAY,UAAU;AAC/B,UAAMC,WAAS,GAAG,YAAY,SAAS;AACvC,QAAI,EAAC,uCAAW,QAAO;AACnB;AAAA,IACJ;AACA,UAAM,QAAQ,yBAAyB,UAAU,OAAO,SAAS,eAAe;AAChF,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,eAAe,OAAO,UAAU,WAChC;AAAA,MACE,MAAM,UAAU,QAAQ;AAAA,MACxB,SAAS,UAAU,WAAW;AAAA,MAC9B,OAAO;AAAA,IACX,IACE;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,GAAG;AAAA,MACH,GAAG;AAAA,IACP,GAAG,OAAO,aAAa,MAAM,QAAQ,aAAa;AACtD,UAAM,MAAM,GAAG,KAAK,IAAI,IAAI;AAC5B,QAAI,KAAK,gBAAgB,IAAI,GAAG,GAAG;AAC/B,eAAS,eAAe;AACxB;AAAA,IACJ;AACA,UAAM,UAAU,aAAa,UAAUA,UAAQ,UAAU,YAAY,SAAS,KAAK,KAAK,GAAG,WAAW,UAAU,SAAS,aAAa,WAAWA;AACjJ,QAAI;AACJ,QAAI,OAAO,oBAAoB,aAAa;AACxC,YAAM,SAAS,IAAI,gBAAgB,YAAY,UAAU,GAAG,UAAU,OAAO,WAAW,IAAI;AAC5F,UAAI,CAAC,SAAS;AACV;AAAA,MACJ;AACA,cAAQ,OAAO,OAAO,UAAUA,QAAM,MAAM,IAAI;AAChD,cAAQ,eAAe;AACvB,cAAQ,YAAY;AACpB,cAAQ,SAAS,OAAO,UAAU,QAAQ;AAC1C,cAAQ,OAAO,sBAAsB;AAAA,IACzC,OACK;AACD,YAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,aAAO,QAAQ;AACf,aAAO,SAAS;AAChB,YAAM,UAAU,OAAO,WAAW,IAAI;AACtC,UAAI,CAAC,SAAS;AACV;AAAA,MACJ;AACA,cAAQ,OAAO,OAAO,UAAUA,QAAM,MAAM,IAAI;AAChD,cAAQ,eAAe;AACvB,cAAQ,YAAY;AACpB,cAAQ,SAAS,OAAO,UAAU,QAAQ;AAC1C,cAAQ;AAAA,IACZ;AACA,SAAK,gBAAgB,IAAI,KAAK,KAAK;AACnC,aAAS,eAAe;AAAA,EAC5B;AACJ;;;ACtGA,eAAsB,eAAe,QAAQ,UAAU,MAAM;AACzD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,YAAY,GAAG,OAAO;AACpD;;;ACHA,IAAM,YAAY;AAAlB,IAAqBC,YAAW;AAAhC,IAAmCC,aAAY;AAC/C,SAAS,eAAe,QAAQ,WAAW,UAAU,eAAe,MAAM,SAAS;AAC/E,QAAM,iBAAiB,UAAU,cAAc,cAAc,MAAM;AACnE,MAAI,CAAC,gBAAgB;AACjB;AAAA,EACJ;AACA,QAAM,QAAQ,UAAU,UAAU,SAAS,MAAM,MAAM,OAAO;AAC9D,aAAW,YAAY,OAAO;AAC1B,UAAM,EAAE,IAAI,IAAI,SAAS,IAAI,aAAa,SAAS,UAAU,QAAQ,GAAG,WAAW,eAAe,QAAQ,eAAe,QAAQC,iBAAgB,MAAM,OAAO,UAAU,eAAe,MAAM,EAAEF,YAAW,WAAW,aAAa,IAAI,UAAU,WAAW,eAAe,QAAQ,GAAG,UAAU,OAAO,OAAO,CAAC,WAAW,WAAY,KAAK,WAAYE,gBAAe,CAAC,WAAW,WAAY,KAAK,WAAYA,cAAa;AAC3Z,aAAS,SAAS,QAAQ,OAAO;AAAA,EACrC;AACJ;AACO,SAAS,aAAa,QAAQ,WAAW,WAAW;AACvD,MAAI,CAAC,UAAU,SAAS;AACpB,cAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,EACxC;AACA,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,CAAC,QAAQ,QAAQ;AACjB,QAAI,CAAC,QAAQ,OAAO;AAChB,cAAQ,QAAQ;AAAA,IACpB;AACA,YAAQ;AACR,QAAI,QAAQ,UAAU,UAAU,UAAU,OAAO;AAC7C,cAAQ,SAAS;AAAA,IACrB;AAAA,EACJ;AACA,MAAI,QAAQ,UAAU;AAClB,UAAM,WAAW,UAAU,cAAc,MAAM,eAAe,gBAAgB,UAAU,OAAO;AAC/F,QAAI,CAAC,iBAAiB,gBAAgBD,cAAa,CAAC,UAAU;AAC1D;AAAA,IACJ;AACA,mBAAe,QAAQ,WAAW,UAAU,eAAe,IAAI,OAAO,SAAS,GAAG,SAAS,GAAG,aAAa,GAAG,CAAC,MAAM,UAAU,CAAC,CAAC;AAAA,EACrI,WACS,QAAQ,aAAa,OAAO;AACjC,YAAQ,YAAY,CAAC;AAAA,EACzB;AACJ;AACO,SAAS,aAAa,QAAQ,WAAW,WAAW;AACvD,QAAM,WAAW,UAAU,cAAc,MAAM,UAAU,gBAAgB,UAAU,OAAO;AAC1F,MAAI,CAAC,iBAAiB,gBAAgBA,cAAa,CAAC,UAAU;AAC1D;AAAA,EACJ;AACA,iBAAe,QAAQ,WAAW,UAAU,eAAe,IAAI,OAAO,SAAS,GAAG,SAAS,GAAG,aAAa,GAAG,CAAC,MAAM,UAAU,CAAC,CAAC;AACrI;;;AC3CO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AAAA,EACJ;AACJ;;;AC9BA,IAAM,cAAc;AACb,IAAM,YAAN,cAAwB,uBAAuB;AAAA,EAClD,YAAY,QAAQ,WAAW;AAC3B,UAAM,SAAS;AACf,SAAK,UAAU;AACf,QAAI,CAAC,UAAU,SAAS;AACpB,gBAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,IACxC;AACA,SAAK,kBAAkB,CAAC,SAAS;AAC7B,YAAM,UAAU,KAAK,UAAU,eAAe,UAAU,QAAQ,cAAc,MAAM;AACpF,UAAI,CAAC,WAAW,SAAS,aAAa;AAClC;AAAA,MACJ;AACA,UAAI,CAAC,UAAU,SAAS;AACpB,kBAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,MACxC;AACA,gBAAU,QAAQ,WAAW;AAC7B,gBAAU,QAAQ,QAAQ;AAC1B,iBAAW,YAAY,UAAU,QAAQ,WAAW;AAChD,YAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,QACJ;AACA,iBAAS,SAAS,MAAM,SAAS,eAAe;AAAA,MACpD;AACA,gBAAU,QAAQ,YAAY,CAAC;AAC/B,gBAAU,QAAQ,SAAS;AAC3B,iBAAW,MAAM;AACb,YAAI,UAAU,WAAW;AACrB;AAAA,QACJ;AACA,YAAI,CAAC,UAAU,SAAS;AACpB,oBAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,QACxC;AACA,kBAAU,QAAQ,WAAW;AAAA,MACjC,GAAG,QAAQ,WAAW,qBAAqB;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,cAAc,cAAc,MAAM;AACxF,QAAI,CAAC,SAAS;AACV;AAAA,IACJ;AACA,cAAU,OAAO,sBAAsB,QAAQ,WAAW,UAAU,OAAO;AAAA,EAC/E;AAAA,EACA,WAAW;AACP,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,kBAAkB,UAAU,cAAc,WAAW,gBAAgB,SAAS,QAAQ,cAAc,QAAQ,EAAE,QAAQ,cAAc,MAAM,UAAU,IAAI,OAAO,SAAS,EAAE,QAAQ,cAAc,MAAM,UAAU,IAAI,OAAO;AAChS,QAAI,mBAAmB,gBAAgB,UAAU,aAAa,SAAS,GAAG;AACtE,mBAAa,KAAK,SAAS,KAAK,WAAW,OAAK,KAAK,UAAU,CAAC,CAAC;AAAA,IACrE,WACS,gBAAgB,UAAU,aAAa,SAAS,GAAG;AACxD,mBAAa,KAAK,SAAS,KAAK,WAAW,OAAK,KAAK,UAAU,CAAC,CAAC;AAAA,IACrE;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,QAAQ,eAAe;AACxK,SAAK,CAAC,MAAM,YAAY,CAAC,OAAO,QAAQ,YAAY,CAAC,MAAM,iBAAiB,CAAC,OAAO,QAAQ,SAAS;AACjG,aAAO;AAAA,IACX;AACA,UAAM,YAAY,OAAO,QAAQ,MAAM,YAAY,OAAO,QAAQ;AAClE,WAAO,UAAU,aAAa,SAAS,KAAK,UAAU,aAAa,SAAS;AAAA,EAChF;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,IAAI,QAAQ;AAAA,IAClC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,QAAQ,KAAK,iCAAQ,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC3EA,eAAsB,+BAA+B,QAAQ,UAAU,MAAM;AACzE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,mBAAmB,eAAa;AACvD,WAAO,QAAQ,QAAQ,IAAI,UAAU,QAAQ,SAAS,CAAC;AAAA,EAC3D,GAAG,OAAO;AACd;;;ACLA,IAAME,aAAY;AAAlB,IAAqBC,QAAO;AAA5B,IAAiC,SAAS,KAAK,KAAKA;AAApD,IAA0DC,UAAS;AAAnE,IAAsE,kBAAkB;AAAxF,IAA4FC,aAAY;AACxG,SAAS,cAAc,WAAW,UAAU,QAAQ,MAAM,WAAW;AACjE,QAAM,QAAQ,UAAU,UAAU,SAAS,MAAM,MAAM,SAAS;AAChE,aAAW,YAAY,OAAO;AAC1B,QAAI,gBAAgB,QAAQ;AACxB,mBAAa,6BAA6B,QAAQ,GAAG;AAAA,QACjD;AAAA,QACA;AAAA,QACA,MAAM,UAAUH,aAAY;AAAA,QAC5B,UAAU,OAAO;AAAA,QACjB,QAAQ,OAAO;AAAA,MACnB,CAAC;AAAA,IACL,WACS,gBAAgB,WAAW;AAChC,iBAAW,UAAU,gBAAgB,UAAU,MAAM,CAAC;AAAA,IAC1D;AAAA,EACJ;AACJ;AACA,SAAS,qBAAqB,WAAW,UAAU,KAAK,UAAU;AAC9D,QAAM,QAAQ,SAAS,iBAAiB,QAAQ;AAChD,MAAI,CAAC,MAAM,QAAQ;AACf;AAAA,EACJ;AACA,QAAM,QAAQ,UAAQ;AAClB,UAAM,OAAO,MAAM,UAAU,UAAU,OAAO,YAAY,MAAM;AAAA,MAC5D,IAAI,KAAK,aAAa,KAAK,cAAcC,SAAQ;AAAA,MACjD,IAAI,KAAK,YAAY,KAAK,eAAeA,SAAQ;AAAA,IACrD,GAAG,SAAS,KAAK,cAAcA,QAAO,SAAS,YAAY,kBAAkB,SAAS,OAAO,IAAI,SAAS,QAAQ,SAC5G,IAAI,OAAO,IAAI,GAAG,IAAI,GAAG,SAAS,SAAS,IAC3C,IAAI,UAAU,KAAK,aAAa,UAAU,WAAW,KAAK,YAAY,UAAU,WAAW,KAAK,cAAc,UAAU,YAAYC,SAAQ,KAAK,eAAe,UAAU,YAAYA,OAAM;AAClM,aAAS,KAAK,QAAQ,IAAI;AAAA,EAC9B,CAAC;AACL;AACO,SAAS,UAAU,WAAW,MAAME,aAAY,WAAW;AAC9D,iBAAeA,aAAY,MAAM,CAAC,UAAU,QAAQ,qBAAqB,WAAW,UAAU,KAAK,CAAC,KAAK,QAAQ,SAAS,cAAc,WAAW,KAAK,QAAQ,MAAM,SAAS,CAAC,CAAC;AACrL;AACO,SAAS,YAAY,WAAW,WAAW;AAC9C,QAAM,UAAU,UAAU,OAAO,YAAY,YAAY,kBAAkB,SAAS,WAAW,UAAU,cAAc,MAAM,UAAU,SAAS,UAAU,OAAO;AACjK,MAAI,CAAC,UAAU,SAASD,cAAa,CAAC,UAAU;AAC5C;AAAA,EACJ;AACA,gBAAc,WAAW,UAAU,QAAQ,IAAI,OAAO,SAAS,GAAG,SAAS,GAAG,SAAS,SAAS,GAAG,SAAS;AAChH;;;AC1CO,IAAM,SAAN,MAAa;AAAA,EAChB,cAAc;AACV,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA,EACJ;AACJ;;;ACVA,IAAM,aAAa;AACZ,IAAM,UAAN,cAAsB,uBAAuB;AAAA,EAChD,YAAY,WAAW;AACnB,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAWE,UAAS,UAAU,cAAc,cAAc,MAAM;AACvF,QAAI,CAACA,SAAQ;AACT;AAAA,IACJ;AACA,cAAU,OAAO,qBAAqBA,QAAO,WAAW,UAAU,OAAO;AAAA,EAC7E;AAAA,EACA,WAAW;AACP,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,SAAS,QAAQ,cAAc,QAAQ,kBAAkB,UAAU,cAAc,WAAW,gBAAgB,eAAe,OAAO,QAAQ,QAAQ,YAAY,OAAO,QAAQ,MAAM,OAAO,OAAO;AACtQ,QAAI,mBAAmB,gBAAgB,UAAU,YAAY,SAAS,GAAG;AACrE,kBAAY,KAAK,WAAW,OAAK,KAAK,UAAU,CAAC,CAAC;AAAA,IACtD,OACK;AACD,gBAAU,KAAK,WAAW,MAAM,YAAY,OAAK,KAAK,UAAU,CAAC,CAAC;AAAA,IACtE;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,QAAQ,eAAe,QAAQ,OAAO,OAAO;AAC9L,WAAS,CAAC,CAAC,MAAM,YAAY,OAAO,QAAQ,UAAU,UAAU,YAAY,OAAO,QAAQ,IAAI,KAC3F,iBAAiB,YAAY,IAAI;AAAA,EACzC;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS,IAAI,OAAO;AAAA,IAChC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO,KAAK,iCAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACxCA,eAAsB,8BAA8B,QAAQ,UAAU,MAAM;AACxE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,kBAAkB,eAAa;AACtD,WAAO,QAAQ,QAAQ,IAAI,QAAQ,SAAS,CAAC;AAAA,EACjD,GAAG,OAAO;AACd;;;ACLO,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,MAAM;AAAA,EACf;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,QAAQ,QAAW;AACxB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,YAAM,cAAc,QAAQ,KAAK,KAAK,IAAI,SAAY,KAAK;AAC3D,WAAK,QAAQ,0BAA0B,KAAK,OAAO,WAAS;AACxD,eAAO,aAAa,OAAO,aAAa,KAAK;AAAA,MACjD,CAAC;AAAA,IACL;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;AC/BO,IAAM,YAAN,cAAwB,WAAW;AAAA,EACtC,cAAc;AACV,UAAM;AACN,SAAK,YAAY,CAAC;AAAA,EACtB;AAAA,EACA,KAAK,MAAM;AACP,UAAM,KAAK,IAAI;AACf,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,EACJ;AACJ;;;ACbO,IAAM,SAAN,cAAqB,WAAW;AAAA,EACnC,KAAK,MAAM;AACP,UAAM,KAAK,IAAI;AACf,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,SAAK,OAAO,0BAA0B,KAAK,MAAM,SAAO;AACpD,YAAM,MAAM,IAAI,UAAU;AAC1B,UAAI,KAAK,GAAG;AACZ,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;ACfO,IAAI;AAAA,CACV,SAAUC,oBAAmB;AAC1B,EAAAA,mBAAkB,OAAO,IAAI;AAC7B,EAAAA,mBAAkB,SAAS,IAAI;AAC/B,EAAAA,mBAAkB,MAAM,IAAI;AAChC,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;;;ACJzC,SAAS,qBAAqB,eAAe,WAAW,cAAc,OAAO;AAChF,MAAI,aAAa,cAAc;AAC3B,UAAM,QAAQ,iBAAiB,YAAY,gBAAgB;AAC3D,WAAO,MAAM,OAAO,eAAe,SAAS;AAAA,EAChD,WACS,YAAY,cAAc;AAC/B,UAAM,QAAQ,iBAAiB,eAAe,aAAa;AAC3D,WAAO,MAAM,OAAO,WAAW,aAAa;AAAA,EAChD;AACJ;;;ACNA,IAAM,aAAa;AAAnB,IAA6BC,eAAc;AAA3C,IAA8C,mBAAmB;AAAjE,IAAoEC,UAAS;AAA7E,IAAgF,iBAAiB;AAAjG,IAAoG,cAAc;AAAlH,IAAqH,qBAAqB;AAA1I,IAA6I,WAAW;AAAxJ,IAA2JC,QAAO;AAAlK,IAAuK,eAAe;AAC/K,IAAM,UAAN,cAAsB,uBAAuB;AAAA,EAChD,YAAY,WAAW,QAAQ;AAC3B,UAAM,SAAS;AACf,SAAK,eAAe,MAAM;AARlC;AASY,YAAMC,aAAY,KAAK,WAAW,UAAUA,WAAU,eAAe,gBAAgBA,WAAU,cAAc,MAAM,eAAe,gBAAgB,QAAQ,cAAc,MAAM;AAC9K,UAAI,CAAC,iBAAiB,CAAC,eAAe;AAClC;AAAA,MACJ;AACA,UAAI,CAACA,WAAU,QAAQ;AACnB,QAAAA,WAAU,SAAS,CAAC;AAAA,MACxB;AACA,YAAM,WAAWA,WAAU,OAAO;AAClC,UAAI,CAAC,YAAY,WAAWH,cAAa;AACrC;AAAA,MACJ;AACA,YAAM,QAAQG,WAAU,UAAU,SAAS,YAAY,eAAe,UAAU,OAAK,KAAK,UAAU,CAAC,CAAC,GAAG,EAAE,OAAO,IAAIA;AACtH,iBAAW,YAAY,OAAO;AAC1B,YAAI,CAAC,OAAO,UAAU;AAClB;AAAA,QACJ;AACA,iBAAS,OAAO,UAAU,CAAC,OAAO;AAClC,cAAM,MAAM,SAAS,YAAY,GAAG,YAAY,YAAY,KAAK,aAAa,GAAG,cAAa,oBAAI,KAAK,GAAE,QAAQ,KAAKA,WAAU,cAAc,MAAM,aAAa,qBAC7J;AACJ,YAAI,YAAY,cAAc,UAAU;AACpC,iBAAO,cAAc;AAAA,QACzB;AACA,YAAI,YAAY,cAAc,WAAWF,SAAQ;AAC7C,iBAAO,WAAW;AAClB,iBAAO,cAAc;AAAA,QACzB;AACA,cAAM,WAAW;AAAA,UACb,WAAW;AAAA,YACP,UAAUE,WAAU,OAAO;AAAA,YAC3B,OAAO,SAAS,OAAO;AAAA,UAC3B;AAAA,UACA,cAAc;AAAA,YACV,UAAU,YAAY,SAAS,QAAQ,KAAK,KAAK,IAAIA,WAAU,OAAO;AAAA,YACtE,OAAO,SAAS,KAAK;AAAA,UACzB;AAAA,UACA,MAAM,kBAAkB;AAAA,QAC5B;AACA,aAAK,SAAS,UAAU,WAAW,WAAW,QAAQ;AACtD,cAAM,cAAc;AAAA,UAChB,WAAW;AAAA,YACP,UAAU,cAAc;AAAA,YACxB,OAAO,SAAS,OAAO;AAAA,UAC3B;AAAA,UACA,cAAc;AAAA,YACV,UAAU,YAAY,SAAS,QAAQ,QAAQ,KAAK;AAAA,YACpD,SAAO,cAAS,YAAT,mBAAkB,UAAS;AAAA,UACtC;AAAA,UACA,MAAM,kBAAkB;AAAA,QAC5B;AACA,aAAK,SAAS,UAAU,WAAW,WAAW,WAAW;AACzD,YAAI,CAAC,OAAO,eAAe,aAAa,UAAU;AAC9C,eAAK,kBAAkB,UAAU,SAAS;AAAA,QAC9C,OACK;AACD,iBAAO,SAAS,OAAO;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,eAAe,MAAM;AACtB,YAAMA,aAAY,KAAK,WAAW,WAAWA,WAAU,cAAc,MAAM,UAAU,WAAWA,WAAU,OAAO;AACjH,UAAI,CAAC,YAAY,WAAWH,gBAAe,CAAC,UAAU;AAClD;AAAA,MACJ;AACA,YAAM,QAAQG,WAAU,UAAU,SAAS,YAAY,UAAU,UAAU,OAAK,KAAK,UAAU,CAAC,CAAC;AACjG,iBAAW,YAAY,OAAO;AAC1B,iBAAS,OAAO,UAAU;AAC1B,cAAM,MAAM,SAAS,YAAY,GAAG,gBAAgB,YAAY,KAAK,QAAQ,GAAG,QAAQ,cAAc,gBAAgB;AACtH,YAAI,iBAAiB,UAAU;AAC3B,cAAI,SAAS,YAAYA,WAAU,cAAc,WAAW,gBAAgB;AACxE,iBAAK,iBAAiB,UAAU,KAAK;AACrC,iBAAK,oBAAoB,UAAU,KAAK;AACxC,iBAAK,kBAAkB,UAAU,KAAK;AAAA,UAC1C;AAAA,QACJ,OACK;AACD,eAAK,MAAM,QAAQ;AAAA,QACvB;AACA,YAAIA,WAAU,cAAc,WAAW,iBAAiB;AACpD,eAAK,MAAM,QAAQ;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,oBAAoB,CAAC,UAAU,OAAO,cAAc;AACrD,YAAM,UAAU,KAAK,UAAU,eAAe,gBAAgB,aAAa,QAAQ,cAAc,MAAM;AACvG,UAAI,CAAC,eAAe;AAChB;AAAA,MACJ;AACA,UAAI,CAAC,SAAS,OAAO,YAAY;AAC7B,cAAM,YAAY,cAAc;AAChC,YAAI,CAAC,WAAW;AACZ;AAAA,QACJ;AACA,cAAM,cAAc,yBAAyB,SAAS;AACtD,iBAAS,OAAO,aAAa,gBAAgB,KAAK,SAAS,WAAW;AAAA,MAC1E;AACA,UAAI,CAAC,SAAS,OAAO,YAAY;AAC7B;AAAA,MACJ;AACA,UAAI,cAAc,KAAK;AACnB,iBAAS,OAAO,QAAQ;AACxB,cAAM,SAAS,SAAS,aAAa;AACrC,iBAAS,OAAO,QAAQ,SAClB,SAAS,SAAS,QAAQ,SAAS,OAAO,YAAY,cAAc,OAAO,KAAK,CAAC,IACjF,SAAS,OAAO;AAAA,MAC1B,OACK;AACD,iBAAS,OAAO,QAAQ,SAAS,OAAO;AAAA,MAC5C;AAAA,IACJ;AACA,SAAK,sBAAsB,CAAC,UAAU,OAAO,cAAc;AAtHnE;AAuHY,YAAMA,aAAY,KAAK,WAAW,UAAUA,WAAU,eAAe,eAAc,uCAAW,cAAW,aAAQ,cAAc,MAAM,WAA5B,mBAAoC;AAC7I,UAAI,CAAC,aAAa;AACd;AAAA,MACJ;AACA,YAAM,aAAa,SAAS,QAAQ,QAAQ,OAAO,aAAW,cAAS,YAAT,mBAAkB,UAAS,gBAAgB,UAAU,qBAAqB,UAAU,aAAa,YAAY,UAAU,GAAG,KAAK;AAC7L,UAAI,YAAY,QAAW;AACvB,iBAAS,OAAO,UAAU;AAAA,MAC9B;AAAA,IACJ;AACA,SAAK,mBAAmB,CAAC,UAAU,OAAO,cAAc;AACpD,YAAMA,aAAY,KAAK,WAAW,YAAW,uCAAW,QAAO,UAAU,OAAOA,WAAU,OAAO,aAAaA,WAAU,OAAO;AAC/H,UAAI,aAAa,QAAW;AACxB;AAAA,MACJ;AACA,YAAM,UAAU,YAAY,SAAS,QAAQ,KAAK,KAAK,IAAIA,WAAU,OAAO,YAAY,QAAQ,SAAS,KAAK,OAAO,OAAO,qBAAqB,OAAO,UAAU,SAAS,KAAK;AAChL,UAAI,SAAS,QAAW;AACpB,iBAAS,OAAO,SAAS;AAAA,MAC7B;AAAA,IACJ;AACA,SAAK,WAAW,CAAC,UAAU,WAAW,WAAW,SAAS;AACtD,YAAMA,aAAY,KAAK,WAAW,cAAc,KAAK,UAAU,UAAU,UAAUA,WAAU,eAAe,gBAAgB,QAAQ,cAAc,MAAM;AACxJ,UAAI,CAAC,iBAAiB,gBAAgB,QAAW;AAC7C;AAAA,MACJ;AACA,YAAM,iBAAiB,cAAc,UAAU,iBAAiBA,WAAU,OAAO,oBAAoB,iBAAiB,KAAK,aAAa,UAAU,aAAa,KAAK,UAAU,OAAO,OAAO,KAAK,aAAa,SAAS,oBAAoB,OAAO,KAAK;AACvP,UAAI,CAAC,kBAAkB,iBAAiBH,gBAAe,gBAAgB,gBAAgB;AACnF;AAAA,MACJ;AACA,UAAI,CAACG,WAAU,QAAQ;AACnB,QAAAA,WAAU,SAAS,CAAC;AAAA,MACxB;AACA,UAAIA,WAAU,OAAO,aAAa;AAC9B,YAAI,YAAY;AACZ,cAAI,SAAS,kBAAkB,MAAM;AACjC,mBAAO,SAAS,OAAO;AAAA,UAC3B;AACA,cAAI,SAAS,kBAAkB,SAAS;AACpC,mBAAO,SAAS,OAAO;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ,OACK;AACD,YAAI,aAAa,gBAAgB;AAC7B,gBAAM,MAAM,cAAc;AAC1B,cAAI,QAAQ,aAAa;AACrB,kBAAM,QAAQ,OAAQ,aAAa,OAAO,eAAgB;AAC1D,gBAAI,SAAS,kBAAkB,MAAM;AACjC,uBAAS,OAAO,SAAS;AAAA,YAC7B;AACA,gBAAI,SAAS,kBAAkB,SAAS;AACpC,uBAAS,OAAO,UAAU;AAAA,YAC9B;AAAA,UACJ;AAAA,QACJ,OACK;AACD,cAAI,SAAS,kBAAkB,MAAM;AACjC,mBAAO,SAAS,OAAO;AAAA,UAC3B;AACA,cAAI,SAAS,kBAAkB,SAAS;AACpC,mBAAO,SAAS,OAAO;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,uBAAuB,CAAC,OAAO,UAAU,QAAQ;AAClD,YAAMA,aAAY,KAAK,WAAW,YAAY,SAAS,iBAAiB,QAAQ,GAAG,SAASA,WAAU,cAAc,cAAc,MAAM;AACxI,UAAI,CAAC,UAAU,CAAC,UAAU,QAAQ;AAC9B;AAAA,MACJ;AACA,gBAAU,QAAQ,UAAQ;AACtB,cAAM,OAAO,MAAM,UAAUA,WAAU,OAAO,YAAY,MAAM;AAAA,UAC5D,IAAI,KAAK,aAAa,KAAK,cAAcD,SAAQ;AAAA,UACjD,IAAI,KAAK,YAAY,KAAK,eAAeA,SAAQ;AAAA,QACrD,GAAG,gBAAgB,KAAK,cAAcA,QAAO,SAAS,OAAO,IAAI,SAAS,QAAQ,SAC5E,IAAI,OAAO,IAAI,GAAG,IAAI,GAAG,aAAa,IACtC,IAAI,UAAU,KAAK,aAAa,SAAS,KAAK,YAAY,SAAS,KAAK,cAAc,SAAS,KAAK,eAAe,OAAO,GAAG,QAAQC,WAAU,UAAU,SAAS,MAAM,MAAM,OAAK,KAAK,UAAU,CAAC,CAAC;AAC1M,mBAAW,YAAY,OAAO;AAC1B,cAAI,CAAC,KAAK,SAAS,SAAS,YAAY,CAAC,GAAG;AACxC;AAAA,UACJ;AACA,mBAAS,OAAO,UAAU;AAC1B,gBAAM,OAAO,OAAO,MAAM,YAAY,QAAQ,MAAM,IAAI;AACxD,cAAI,CAAC,SAAS,OAAO,OAAO,SAAS,OAAO,QAAQ,MAAM;AACtD,iBAAK,MAAM,UAAU,OAAO,IAAI;AAChC,qBAAS,OAAO,MAAM;AAAA,UAC1B;AACA,eAAK,iBAAiB,UAAU,cAAc,SAAS;AACvD,eAAK,oBAAoB,UAAU,cAAc,SAAS;AAC1D,eAAK,kBAAkB,UAAU,cAAc,SAAS;AAAA,QAC5D;AAAA,MACJ,CAAC;AAAA,IACL;AACA,SAAK,UAAU;AACf,QAAI,CAAC,UAAU,QAAQ;AACnB,gBAAU,SAAS,CAAC;AAAA,IACxB;AACA,SAAK,kBAAkB,CAAC,SAAS;AAC7B,UAAI,SAAS,YAAY;AACrB;AAAA,MACJ;AACA,UAAI,CAAC,UAAU,QAAQ;AACnB,kBAAU,SAAS,CAAC;AAAA,MACxB;AACA,gBAAU,OAAO,WAAW;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,MAAM,UAAU,OAAO,OAAO;AAC1B,QAAI,SAAS,OAAO,WAAW,CAAC,OAAO;AACnC;AAAA,IACJ;AACA,WAAO,SAAS,OAAO;AACvB,WAAO,SAAS,OAAO;AACvB,WAAO,SAAS,OAAO;AACvB,WAAO,SAAS,OAAO;AAAA,EAC3B;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,SAAS,UAAU,cAAc,cAAc,MAAM;AACvF,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,cAAU,OAAO,qBAAqB,OAAO,WAAW,UAAU,OAAO;AACzE,QAAI,OAAO,SAAS,QAAW;AAC3B,gBAAU,OAAO,iBAAiB,OAAO,OAAO,UAAU,OAAO;AAAA,IACrE;AAAA,EACJ;AAAA,EACA,SAAS,OAAO;AACZ,UAAM,UAAU,KAAK,UAAU,eAAe,SAAS,QAAQ,cAAc,QAAQ,UAAU,OAAO,SAAS,UAAU,OAAO,SAAS,eAAe,QAAQ,QAAQ,YAAY,QAAQ,MAAM,eAAe,QAAQ,QAAQ,YAAY,QAAQ,MAAM,OAAO,OAAO;AACzQ,QAAI,gBAAgB,UAAU,YAAY,SAAS,GAAG;AAClD,WAAK,aAAa;AAAA,IACtB,WACS,gBAAgB,UAAU,YAAY,SAAS,GAAG;AACvD,WAAK,aAAa;AAAA,IACtB,OACK;AACD,qBAAe,YAAY,MAAM,CAAC,UAAU,QAAQ,KAAK,qBAAqB,OAAO,UAAU,GAAG,CAAC;AAAA,IACvG;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,QAAQ,eAAe,QAAQ,EAAE,SAAS,OAAO,QAAQ,IAAI,QAAQ,YAAY,iBAAiB,YAAY,KAAK;AACpQ,QAAI,EAAE,aAAc,QAAQ,UAAU,CAAC,CAAC,MAAM,YAAc,QAAQ,UAAU,MAAM,gBAAiB;AACjG,aAAO;AAAA,IACX;AACA,WAAO,UAAU,YAAY,QAAQ,IAAI,KAAK,UAAU,YAAY,QAAQ,IAAI,KAAK;AAAA,EACzF;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS,IAAI,OAAO;AAAA,IAChC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO,KAAK,iCAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,MAAM,UAAU;AACZ,aAAS,OAAO,UAAU;AAAA,EAC9B;AACJ;;;ACjRA,eAAsB,8BAA8B,QAAQ,UAAU,MAAM;AACxE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,kBAAkB,eAAa;AACtD,WAAO,QAAQ,QAAQ,IAAI,QAAQ,WAAW,MAAM,CAAC;AAAA,EACzD,GAAG,OAAO;AACd;;;ACLO,IAAM,eAAN,MAAmB;AAAA,EACtB,cAAc;AACV,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACXO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,QAAQ,IAAI,aAAa;AAC9B,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,SAAK,MAAM,KAAK,KAAK,KAAK;AAC1B,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;ACnBA,IAAM,cAAc;AAApB,IAAuB,cAAc;AAArC,IAAwC,oBAAoB;AACrD,SAAS,SAAS,SAAS,IAAI,IAAI,SAAS;AAC/C,QAAM,WAAW,KAAK,MAAM,GAAG,UAAU,IAAI,GAAG,UAAU,CAAC,GAAG,SAAS,GAAG,aAAa,GAAG,SAAS,GAAG,aAAa;AACnH,MAAI,CAAC,UAAU,CAAC,QAAQ;AACpB;AAAA,EACJ;AACA,QAAM,YAAY,GAAG,YAAY,GAAG,UAAU,GAAG,YAAY,GAAG,SAAS,SAAS,QAAQ,QAAQ,GAAG,UAAU,GAAG,GAAG,UAAU,CAAC,GAAG,OAAO,QAAQ,qBAAqB,UAAU,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACrN,OAAK,aAAa,aAAa,gBAAgB,QAAQ,OAAO,CAAC;AAC/D,OAAK,aAAa,MAAM,UAAU,aAAa,WAAW,GAAG,gBAAgB,QAAQ,OAAO,CAAC;AAC7F,OAAK,aAAa,aAAa,gBAAgB,QAAQ,OAAO,CAAC;AAC/D,SAAO;AACX;AACO,SAAS,gBAAgB,SAAS,OAAOC,YAAW,OAAO,KAAK;AACnE,WAAS,SAAS,OAAO,GAAG;AAC5B,UAAQ,YAAY;AACpB,UAAQ,cAAcA;AACtB,UAAQ,OAAO;AACnB;AACO,SAAS,UAAU,WAAW,KAAK,IAAI,IAAI;AAC9C,QAAM,UAAU,UAAU,eAAe,iBAAiB,QAAQ,cAAc,MAAM;AACtF,MAAI,CAAC,gBAAgB;AACjB;AAAA,EACJ;AACA,SAAO,SAAS,KAAK,IAAI,IAAI,eAAe,MAAM,OAAO;AAC7D;AACO,SAAS,eAAe,WAAW,IAAI,IAAI;AAC9C,YAAU,OAAO,KAAK,SAAO;AACzB,UAAM,KAAK,UAAU,WAAW,KAAK,IAAI,EAAE;AAC3C,QAAI,CAAC,IAAI;AACL;AAAA,IACJ;AACA,UAAM,OAAO,GAAG,YAAY,GAAG,OAAO,GAAG,YAAY;AACrD,oBAAgB,KAAK,GAAG,OAAO,cAAc,mBAAmB,IAAI,MAAM,IAAI;AAAA,EAClF,CAAC;AACL;;;AChCA,IAAM,cAAc;AAApB,IAA+BC,eAAc;AACtC,IAAM,YAAN,cAAwB,uBAAuB;AAAA,EAClD,YAAY,WAAW;AACnB,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,cAAc,cAAc,MAAM;AACxF,QAAI,CAAC,SAAS;AACV;AAAA,IACJ;AACA,cAAU,OAAO,sBAAsB,QAAQ,WAAW,UAAU,OAAO;AAC3E,cAAU,OAAO,oBAAoB,QAAQ,SAAS,UAAU,OAAO;AAAA,EAC3E;AAAA,EACA,WAAW;AACP,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU;AACtD,QAAI,QAAQ,cAAc,OAAO,QAAQ,UAAU,UAAU,cAAc,WAAW,eAAe;AACjG,YAAM,WAAW,UAAU,cAAc,MAAM,UAAU,EAAE,qBAAqB,kBAAkB,IAAI,UAAU;AAChH,UAAI,CAAC,uBACD,sBAAsBA,gBACtB,CAAC,qBACD,oBAAoBA,gBACpB,CAAC,UAAU;AACX;AAAA,MACJ;AACA,YAAM,WAAW,KAAK,IAAI,iBAAiB,GAAG,QAAQ,UAAU,UAAU,SAAS,YAAY,UAAU,UAAU,OAAK,KAAK,UAAU,CAAC,CAAC;AACzI,YAAM,QAAQ,CAAC,IAAI,MAAM;AACrB,cAAM,OAAO,GAAG,YAAY,GAAG,cAAc;AAC7C,mBAAW,MAAM,MAAM,MAAM,IAAI,WAAW,GAAG;AAC3C,gBAAM,OAAO,GAAG,YAAY,GAAG,UAAU,KAAK,IAAI,mBAAmB,GAAG,QAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,GAAG,QAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC;AAC3I,cAAI,QAAQ,WAAW,QAAQ,SAAS;AACpC,2BAAe,WAAW,IAAI,EAAE;AAAA,UACpC;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,UAAU,cAAc,eAAe;AACrJ,QAAI,EAAE,OAAO,QAAQ,UAAU,MAAM,WAAW;AAC5C,aAAO;AAAA,IACX;AACA,WAAO,UAAU,aAAa,OAAO,QAAQ,IAAI;AAAA,EACrD;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,IAAI,QAAQ;AAAA,IAClC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,QAAQ,KAAK,iCAAQ,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACzDA,eAAsB,+BAA+B,QAAQ,UAAU,MAAM;AACzE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,mBAAmB,eAAa;AACvD,WAAO,QAAQ,QAAQ,IAAI,UAAU,SAAS,CAAC;AAAA,EACnD,GAAG,OAAO;AACd;;;ACLO,IAAM,YAAN,MAAgB;AAAA,EACnB,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AAAA,IAC3D;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACtBO,IAAM,OAAN,MAAW;AAAA,EACd,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,QAAQ,IAAI,UAAU;AAAA,EAC/B;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,SAAK,MAAM,KAAK,KAAK,KAAK;AAAA,EAC9B;AACJ;;;ACfA,IAAM,eAAe;AACd,SAAS,aAAa,SAAS,OAAO,OAAO,KAAK,WAAW,SAAS;AACzE,WAAS,SAAS,OAAO,GAAG;AAC5B,UAAQ,cAAc,gBAAgB,WAAW,OAAO;AACxD,UAAQ,YAAY;AACpB,UAAQ,OAAO;AACnB;AACO,SAAS,SAAS,WAAW,UAAU,WAAW,SAAS,UAAU;AACxE,YAAU,OAAO,KAAK,SAAO;AACzB,UAAM,WAAW,SAAS,YAAY;AACtC,iBAAa,KAAK,SAAS,OAAO,cAAc,cAAc,UAAU,UAAU,WAAW,OAAO;AAAA,EACxG,CAAC;AACL;;;ACVA,IAAM,WAAW;AAAjB,IAAyBC,eAAc;AAAvC,IAA0C,aAAa;AAChD,IAAM,UAAN,cAAsB,uBAAuB;AAAA,EAChD,YAAY,WAAW,QAAQ;AAC3B,UAAM,SAAS;AACf,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,OAAO,UAAU,cAAc,cAAc,MAAM;AACrF,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AACA,cAAU,OAAO,mBAAmB,KAAK,WAAW,UAAU,OAAO;AAAA,EACzE;AAAA,EACA,WAAW;AAlBf;AAmBQ,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,gBAAgB,QAAQ;AAC7F,QAAI,CAAC,cAAc,MAAM,QACrB,CAAC,cAAc,OAAO,QAAQ,UAC9B,UAAU,cAAc,WAAW,gBAAgB;AACnD;AAAA,IACJ;AACA,UAAM,WAAW,UAAU,cAAc,MAAM;AAC/C,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AACA,UAAM,WAAW,UAAU,OAAO;AAClC,QAAI,CAAC,YAAY,WAAWA,cAAa;AACrC;AAAA,IACJ;AACA,UAAM,QAAQ,UAAU,UAAU,SAAS,YAAY,UAAU,UAAU,OAAK,KAAK,UAAU,CAAC,CAAC;AACjG,eAAW,YAAY,OAAO;AAC1B,YAAM,MAAM,SAAS,YAAY,GAAG,gBAAgB,YAAY,KAAK,QAAQ;AAC7E,UAAI,gBAAgB,UAAU;AAC1B;AAAA,MACJ;AACA,YAAM,kBAAkB,cAAc,MAAM,KAAK,OAAO,cAAc,gBAAgB,SAAS,cAAc,cAAe,gBAAgB,cAAe;AAC3J,UAAI,eAAe,YAAY;AAC3B;AAAA,MACJ;AACA,YAAM,WAAW,gBAAgB,WAAS,cAAS,QAAQ,UAAjB,mBAAwB;AAClE,UAAI,CAAC,UAAU,UAAU,iBAAiB,UAAU;AAChD,cAAM,eAAe,cAAc,MAAM,KAAK;AAC9C,kBAAU,UAAU,gBAAgB,mBAAmB,KAAK,SAAS,UAAU,aAAa,OAAO,aAAa,OAAO;AAAA,MAC3H;AACA,YAAM,YAAY,aAAa,UAAU,QAAW,UAAU,UAAU,aAAa;AACrF,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AACA,eAAS,WAAW,UAAU,WAAW,aAAa,QAAQ;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,UAAU,cAAc,eAAe;AACrJ,WAAO,OAAO,QAAQ,UAAU,CAAC,CAAC,MAAM,YAAY,UAAU,UAAU,OAAO,QAAQ,IAAI;AAAA,EAC/F;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACpEA,eAAsB,4BAA4B,QAAQ,UAAU,MAAM;AACtE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,gBAAgB,eAAa;AACpD,WAAO,QAAQ,QAAQ,IAAI,QAAQ,WAAW,MAAM,CAAC;AAAA,EACzD,GAAG,OAAO;AACd;;;ACLA,IAAM,YAAY;AACX,IAAM,SAAN,cAAqB,uBAAuB;AAAA,EAC/C,YAAY,WAAW;AACnB,UAAM,SAAS;AACf,SAAK,kBAAkB,CAAC,SAAS;AAC7B,UAAI,SAAS,WAAW;AACpB;AAAA,MACJ;AACA,YAAMC,aAAY,KAAK;AACvB,UAAIA,WAAU,iBAAiB;AAC3B,QAAAA,WAAU,MAAM;AAAA,MACpB,OACK;AACD,QAAAA,WAAU,KAAK;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,WAAW;AAAA,EACX;AAAA,EACA,YAAY;AACR,WAAO;AAAA,EACX;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC5BA,eAAsB,6BAA6B,QAAQ,UAAU,MAAM;AACvE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,iBAAiB,eAAa;AACrD,WAAO,QAAQ,QAAQ,IAAI,OAAO,SAAS,CAAC;AAAA,EAChD,GAAG,OAAO;AACd;;;ACLO,IAAM,OAAN,MAAW;AAAA,EACd,cAAc;AACV,SAAK,UAAU;AACf,SAAK,SAAS,CAAC;AACf,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK,OAAO,IAAI,OAAK,CAAC;AAAA,IACxC;AACA,QAAI,CAAC,KAAK,OAAO,QAAQ;AACrB,WAAK,UAAU;AAAA,IACnB;AACA,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,QAAW;AACxB,WAAK,WAAW,cAAc,QAAQ;AAAA,IAC1C;AAAA,EACJ;AACJ;;;ACvBA,IAAM,WAAW;AAAjB,IAAyB,cAAc;AAChC,IAAM,SAAN,cAAqB,uBAAuB;AAAA,EAC/C,YAAY,WAAW;AACnB,UAAM,SAAS;AACf,SAAK,kBAAkB,CAAC,SAAS;AAC7B,UAAI,SAAS,UAAU;AACnB;AAAA,MACJ;AACA,YAAMC,aAAY,KAAK,WAAW,UAAUA,WAAU,eAAe,cAAc,QAAQ,cAAc,MAAM;AAC/G,UAAI,CAAC,aAAa;AACd;AAAA,MACJ;AACA,YAAM,WAAW,cAAc,YAAY,QAAQ;AACnD,UAAI,YAAY,aAAa;AACzB;AAAA,MACJ;AACA,YAAM,QAAQ,cAAc,CAAC,QAAW,GAAG,YAAY,MAAM,CAAC,GAAG,eAAe,UAAU,SAAYA,WAAU,cAAc,UAAU,OAAO,KAAK,IAAI;AACxJ,WAAKA,WAAU,UAAU,KAAK,UAAUA,WAAU,cAAc,OAAO,cAAc,KAAK;AAAA,IAC9F;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,WAAW;AAAA,EACX;AAAA,EACA,YAAY;AACR,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACxCA,eAAsB,4BAA4B,QAAQ,UAAU,MAAM;AACtE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,gBAAgB,eAAa;AACpD,WAAO,QAAQ,QAAQ,IAAI,OAAO,SAAS,CAAC;AAAA,EAChD,GAAG,OAAO;AACd;;;ACLO,IAAM,SAAN,MAAa;AAAA,EAChB,cAAc;AACV,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,QAAW;AACxB,WAAK,WAAW,cAAc,QAAQ;AAAA,IAC1C;AAAA,EACJ;AACJ;;;ACZA,IAAM,aAAa;AACZ,IAAM,UAAN,cAAsB,uBAAuB;AAAA,EAChD,YAAY,WAAW;AACnB,UAAM,SAAS;AACf,SAAK,kBAAkB,CAAC,SAAS;AAC7B,YAAMC,aAAY,KAAK,WAAW,UAAUA,WAAU;AACtD,UAAI,CAAC,QAAQ,cAAc,MAAM,UAAU,SAAS,YAAY;AAC5D;AAAA,MACJ;AACA,YAAM,WAAW,cAAc,QAAQ,cAAc,MAAM,OAAO,QAAQ;AAC1E,MAAAA,WAAU,UAAU,eAAe,QAAQ;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,WAAW;AAAA,EACX;AAAA,EACA,YAAY;AACR,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS,IAAI,OAAO;AAAA,IAChC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO,KAAK,iCAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACjCA,eAAsB,8BAA8B,QAAQ,UAAU,MAAM;AACxE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,kBAAkB,eAAa;AACtD,WAAO,QAAQ,QAAQ,IAAI,QAAQ,SAAS,CAAC;AAAA,EACjD,GAAG,OAAO;AACd;;;ACLO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,SAAS,WAAW;AAAA,EAC7B;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA,EACJ;AACJ;;;AC/BO,IAAM,aAAN,cAAyB,YAAY;AAAA,EACxC,cAAc;AACV,UAAM;AACN,SAAK,YAAY,CAAC;AAAA,EACtB;AAAA,EACA,KAAK,MAAM;AACP,UAAM,KAAK,IAAI;AACf,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,EACJ;AACJ;;;ACbO,IAAM,UAAN,cAAsB,YAAY;AAAA,EACrC,KAAK,MAAM;AACP,UAAM,KAAK,IAAI;AACf,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,SAAK,OAAO,0BAA0B,KAAK,MAAM,SAAO;AACpD,YAAM,MAAM,IAAI,WAAW;AAC3B,UAAI,KAAK,GAAG;AACZ,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;ACbA,IAAM,cAAc;AAApB,IAA+BC,eAAc;AAA7C,IAAgD,sBAAsB;AAAtE,IAAyE,qBAAqB;AAA9F,IAAiG,cAAc;AAA/G,IAAkHC,aAAY;AAA9H,IAAiI,WAAW;AAA5I,IAA+I,eAAe;AAA9J,IAAiKC,QAAO;AACjK,IAAM,WAAN,cAAuB,uBAAuB;AAAA,EACjD,YAAY,QAAQ,WAAW;AAC3B,UAAM,SAAS;AACf,SAAK,gBAAgB,MAAM;AACvB,YAAMC,aAAY,KAAK,WAAW,iBAAiBA,WAAU,cAAc,cAAc,MAAM;AAC/F,UAAI,CAAC,gBAAgB;AACjB;AAAA,MACJ;AACA,YAAM,UAAUA,WAAU,WAAW,EAAE,WAAW,CAAC,EAAE;AACrD,UAAI,CAAC,QAAQ,QAAQ;AACjB,YAAI,CAAC,QAAQ,OAAO;AAChB,kBAAQ,QAAQ;AAAA,QACpB;AACA,gBAAQ;AACR,YAAI,QAAQ,UAAUA,WAAU,UAAU,OAAO;AAC7C,kBAAQ,SAAS;AAAA,QACrB;AAAA,MACJ;AACA,UAAI,QAAQ,UAAU;AAClB,cAAM,kBAAkBA,WAAU,OAAO;AACzC,YAAI,CAAC,mBAAmB,kBAAkBH,cAAa;AACnD;AAAA,QACJ;AACA,cAAM,gBAAgB,KAAK,IAAI,kBAAkB,qBAAqB,kBAAkB,GAAG,gBAAgBG,WAAU,cAAc,MAAM;AACzI,YAAI,kBAAkB,QAAW;AAC7B;AAAA,QACJ;AACA,cAAM,QAAQ,IAAI,OAAO,cAAc,GAAG,cAAc,GAAG,aAAa,GAAG,QAAQA,WAAU,UAAU,SAAS,MAAM,OAAO,OAAK,KAAK,UAAU,CAAC,CAAC;AACnJ,mBAAW,YAAY,OAAO;AAC1B,gBAAM,EAAE,IAAI,IAAI,SAAS,IAAI,aAAa,eAAe,SAAS,QAAQ,GAAG,IAAI,YAAY,aAAa,WAAW,eAAe,OAAO,QAAS,CAAC,gBAAgB,WAAY;AACjL,cAAI,KAAK,eAAe;AACpB,oBAAQ,UAAU,KAAK,QAAQ;AAC/B,kBAAM,OAAO,OAAO,OAAO,IAAI,EAAE;AACjC,iBAAK,SAAS;AACd,qBAAS,SAAS,MAAM,IAAI;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ,WACS,QAAQ,aAAa,OAAO;AACjC,mBAAW,YAAY,QAAQ,WAAW;AACtC,mBAAS,SAAS,MAAM,SAAS,eAAe;AAAA,QACpD;AACA,gBAAQ,YAAY,CAAC;AAAA,MACzB;AAAA,IACJ;AACA,SAAK,gBAAgB,MAAM;AACvB,YAAMA,aAAY,KAAK,WAAW,WAAWA,WAAU,cAAc,MAAM,UAAU,gBAAgBA,WAAU,OAAO;AACtH,UAAI,CAAC,iBAAiB,gBAAgBF,cAAa,CAAC,UAAU;AAC1D;AAAA,MACJ;AACA,WAAK,gBAAgB,UAAU,eAAe,IAAI,OAAO,SAAS,GAAG,SAAS,GAAG,aAAa,CAAC;AAAA,IACnG;AACA,SAAK,kBAAkB,CAAC,UAAU,eAAe,MAAM,eAAe;AAClE,YAAME,aAAY,KAAK,WAAW,QAAQA,WAAU,UAAU,SAAS,MAAM,MAAM,OAAK,KAAK,UAAU,CAAC,CAAC,GAAG,iBAAiBA,WAAU,cAAc,cAAc,MAAM;AACzK,UAAI,CAAC,gBAAgB;AACjB;AAAA,MACJ;AACA,YAAM,EAAE,QAAQ,OAAO,QAAQ,SAAS,IAAI,gBAAgB,aAAa,KAAK,QAAQ,UAAU,MAAM,GAAG,aAAY,yCAAY,UAAS,SAAS;AACnJ,iBAAW,YAAY,OAAO;AAC1B,cAAM,EAAE,IAAI,IAAI,SAAS,IAAI,aAAa,SAAS,UAAU,QAAQ,GAAG,gBAAgB,MAAM,WAAW,eAAe,WAAW,aAAa,IAAI,UAAU,UAAU,QAAQ,GAAG,UAAU,OAAO,OAAO,CAAC,WAAW,WAAY,KAAK,WAAY,eAAe,CAAC,WAAW,WAAY,KAAK,WAAY,aAAa;AACzT,iBAAS,SAAS,MAAM,OAAO;AAAA,MACnC;AAAA,IACJ;AACA,SAAK,yBAAyB,CAAC,UAAU,QAAQ;AAC7C,YAAMA,aAAY,KAAK,WAAW,UAAUA,WAAU,cAAc,cAAc,MAAM;AACxF,UAAI,CAAC,SAAS;AACV;AAAA,MACJ;AACA,YAAM,QAAQ,SAAS,iBAAiB,QAAQ;AAChD,UAAI,CAAC,MAAM,QAAQ;AACf;AAAA,MACJ;AACA,YAAM,QAAQ,UAAQ;AAClB,cAAM,OAAO,MAAM,UAAUA,WAAU,OAAO,YAAY,MAAM;AAAA,UAC5D,IAAI,KAAK,aAAa,KAAK,cAAcD,SAAQ;AAAA,UACjD,IAAI,KAAK,YAAY,KAAK,eAAeA,SAAQ;AAAA,QACrD,GAAG,gBAAgB,KAAK,cAAcA,QAAO,SAAS,OAAO,IAAI,SAAS,QAAQ,SAC5E,IAAI,OAAO,IAAI,GAAG,IAAI,GAAG,aAAa,IACtC,IAAI,UAAU,KAAK,aAAa,SAAS,KAAK,YAAY,SAAS,KAAK,cAAc,SAAS,KAAK,eAAe,OAAO,GAAG,OAAO,QAAQ,MAAM,aAAa,QAAQ,MAAM,IAAI;AACvL,aAAK,gBAAgB,KAAK,eAAe,MAAM,UAAU;AAAA,MAC7D,CAAC;AAAA,IACL;AACA,SAAK,UAAU;AACf,QAAI,CAAC,UAAU,SAAS;AACpB,gBAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,IACxC;AACA,SAAK,kBAAkB,CAAC,SAAS;AAC7B,YAAM,UAAU,KAAK,UAAU,eAAe,cAAc,QAAQ,cAAc,MAAM;AACxF,UAAI,CAAC,eAAe,SAAS,aAAa;AACtC;AAAA,MACJ;AACA,UAAI,CAAC,UAAU,SAAS;AACpB,kBAAU,UAAU,EAAE,WAAW,CAAC,EAAE;AAAA,MACxC;AACA,YAAM,UAAU,UAAU;AAC1B,cAAQ,WAAW;AACnB,cAAQ,QAAQ;AAChB,iBAAW,YAAY,UAAU,QAAQ,WAAW;AAChD,YAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,QACJ;AACA,iBAAS,SAAS,MAAM,SAAS,eAAe;AAAA,MACpD;AACA,cAAQ,YAAY,CAAC;AACrB,cAAQ,SAAS;AACjB,iBAAW,MAAM;AACb,YAAI,UAAU,WAAW;AACrB;AAAA,QACJ;AACA,gBAAQ,WAAW;AAAA,MACvB,GAAG,YAAY,WAAW,qBAAqB;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,cAAc,cAAc,MAAM;AACxF,QAAI,CAAC,SAAS;AACV;AAAA,IACJ;AACA,cAAU,OAAO,sBAAsB,QAAQ,WAAW,UAAU,OAAO;AAAA,EAC/E;AAAA,EACA,WAAW;AACP,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,kBAAkB,UAAU,cAAc,WAAW,gBAAgB,SAAS,QAAQ,cAAc,QAAQ,QAAQ,OAAO,SAAS,eAAe,MAAM,QAAQ,YAAY,MAAM,MAAM,QAAQ,OAAO,SAAS,eAAe,MAAM,QAAQ,YAAY,MAAM,MAAM,OAAO,OAAO;AACzV,QAAI,mBAAmB,gBAAgB,UAAU,aAAa,SAAS,GAAG;AACtE,WAAK,cAAc;AAAA,IACvB,WACS,gBAAgB,UAAU,aAAa,SAAS,GAAG;AACxD,WAAK,cAAc;AAAA,IACvB,OACK;AACD,qBAAe,aAAa,MAAM,CAAC,UAAU,QAAQ,KAAK,uBAAuB,UAAU,GAAG,CAAC;AAAA,IACnG;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,QAAQ,eAAe,QAAQ,OAAO,OAAO,OAAO,QAAQ,OAAO,SAAS,QAAQ,OAAO,SAAS,aAAa,iBAAiB,aAAa,IAAI;AACpS,QAAI,EAAE,cAAe,MAAM,UAAU,CAAC,CAAC,MAAM,YAAc,MAAM,UAAU,MAAM,gBAAiB;AAC9F,aAAO;AAAA,IACX;AACA,UAAM,YAAY,MAAM,MAAM,YAAY,MAAM;AAChD,WAAO,UAAU,aAAa,SAAS,KAAK,UAAU,aAAa,SAAS,KAAK;AAAA,EACrF;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,IAAI,QAAQ;AAAA,IAClC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,QAAQ,KAAK,iCAAQ,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC1JA,eAAsB,+BAA+B,QAAQ,UAAU,MAAM;AACzE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,mBAAmB,eAAa;AACvD,WAAO,QAAQ,QAAQ,IAAI,SAAS,QAAQ,SAAS,CAAC;AAAA,EAC1D,GAAG,OAAO;AACd;;;ACLO,IAAM,OAAN,MAAW;AAAA,EACd,cAAc;AACV,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;ACfA,IAAM,WAAW;AAAjB,IAAyBE,aAAY;AAC9B,IAAM,SAAN,cAAqB,uBAAuB;AAAA,EAC/C,YAAY,WAAW;AACnB,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,MAAM,UAAU,OAAO,OAAO;AAC1B,QAAI,SAAS,KAAK,WAAW,CAAC,OAAO;AACjC;AAAA,IACJ;AACA,aAAS,KAAK,SAAS;AAAA,EAC3B;AAAA,EACA,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,OAAO,UAAU,cAAc,cAAc,MAAM;AACrF,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AACA,cAAU,OAAO,iBAAiB,KAAK,SAAS,UAAU,OAAO;AAAA,EACrE;AAAA,EACA,WAAW;AAAA,EACX;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,YAAY,KAAK,WAAW,QAAQ,UAAU,cAAc,OAAO,WAAU,qCAAU,kBAAiB,UAAU,cAAc,eAAe;AACrJ,WAAO,OAAO,QAAQ,UAAU,CAAC,CAAC,MAAM,YAAY,UAAU,UAAU,OAAO,QAAQ,IAAI;AAAA,EAC/F;AAAA,EACA,gBAAgB,YAAY,SAAS;AACjC,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,MAAM,UAAU;AACZ,aAAS,KAAK,UAAU;AACxB,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,WAAW,UAAU,cAAc,MAAM,UAAU,SAAS,UAAU,OAAO,gBAAgB,cAAc,QAAQ,cAAc,MAAM;AAC5M,QAAI,CAAC,eAAe,CAAC,UAAU,SAASA,cAAa,CAAC,UAAU;AAC5D;AAAA,IACJ;AACA,UAAM,cAAc,SAAS,YAAY,GAAG,OAAO,YAAY,UAAU,WAAW,GAAG,kBAAkB,OAAO,QAAQ,aAAa,YAAY,QAAQ,EAAE,KAAK,IAAI;AACpK,QAAI,OAAO,QAAQ;AACf;AAAA,IACJ;AACA,SAAK,UAAU;AACf,SAAK,SAAS,kBAAkB;AAAA,EACpC;AACJ;;;AC9CA,eAAsB,4BAA4B,QAAQ,UAAU,MAAM;AACtE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,gBAAgB,eAAa;AACpD,WAAO,QAAQ,QAAQ,IAAI,OAAO,SAAS,CAAC;AAAA,EAChD,GAAG,OAAO;AACd;;;ACLA,IAAM,cAAc;AAApB,IAAuBC,kBAAiB;AACxC,IAAM,oBAAoB;AAC1B,SAAS,gBAAgB,YAAY,OAAO,SAAS;AACjD,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,CAAC,SAAS;AACV,WAAO;AAAA,EACX;AACA,QAAM,aAAa,gBAAgB,OAAO,OAAO;AACjD,MAAI,QAAQ,SAAS,MAAM,GAAG;AAC1B,WAAO,QAAQ,QAAQ,mBAAmB,MAAM,UAAU;AAAA,EAC9D;AACA,QAAM,eAAe,QAAQ,QAAQ,GAAG;AACxC,SAAO,GAAG,QAAQ,UAAU,aAAa,YAAY,CAAC,UAAU,UAAU,IAAI,QAAQ,UAAU,YAAY,CAAC;AACjH;AACA,eAAsB,UAAU,OAAO;AACnC,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,UAAM,UAAU;AAChB,UAAM,MAAM,IAAI,MAAM;AACtB,UAAM,UAAU;AAChB,QAAI,iBAAiB,QAAQ,MAAM;AAC/B,YAAM,UAAU;AAChB,cAAQ;AAAA,IACZ,CAAC;AACD,QAAI,iBAAiB,SAAS,MAAM;AAChC,YAAM,UAAU;AAChB,YAAM,QAAQ;AACd,YAAM,UAAU;AAChB,gBAAU,EAAE,MAAM,GAAG,WAAW,mBAAmB,MAAM,MAAM,EAAE;AACjE,cAAQ;AAAA,IACZ,CAAC;AACD,QAAI,MAAM,MAAM;AAAA,EACpB,CAAC;AACL;AACA,eAAsB,iBAAiB,OAAO;AAC1C,MAAI,MAAM,SAAS,OAAO;AACtB,UAAM,UAAU,KAAK;AACrB;AAAA,EACJ;AACA,QAAM,UAAU;AAChB,QAAM,WAAW,MAAM,MAAM,MAAM,MAAM;AACzC,MAAI,CAAC,SAAS,IAAI;AACd,cAAU,EAAE,MAAM,GAAG,WAAW,kBAAkB;AAClD,UAAM,QAAQ;AAAA,EAClB,OACK;AACD,UAAM,UAAU,MAAM,SAAS,KAAK;AAAA,EACxC;AACA,QAAM,UAAU;AACpB;AACO,SAAS,kBAAkB,OAAO,WAAW,OAAO,UAAU;AAlDrE;AAmDI,QAAM,iBAAiB,gBAAgB,OAAO,SAAO,cAAS,YAAT,mBAAkB,UAASA,eAAc,GAAG,WAAW;AAAA,IACxG;AAAA,IACA,KAAK,UAAU;AAAA,IACf,MAAM;AAAA,MACF,GAAG;AAAA,MACH,SAAS;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,IACR,OAAO,UAAU,QAAQ,UAAU;AAAA,IACnC,cAAc,UAAU;AAAA,IACxB,QAAQ,UAAU;AAAA,EACtB;AACA,SAAO,IAAI,QAAQ,aAAW;AAC1B,UAAM,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,EAAE,MAAM,gBAAgB,CAAC,GAAG,SAAS,OAAO,OAAO,OAAO,OAAO,aAAa,QAAQ,MAAM,OAAO,gBAAgB,GAAG,GAAG,MAAM,IAAI,MAAM;AAChL,QAAI,iBAAiB,QAAQ,MAAM;AAC/B,eAAS,SAAS;AAClB,eAAS,UAAU;AACnB,cAAQ,QAAQ;AAChB,aAAO,gBAAgB,GAAG;AAAA,IAC9B,CAAC;AACD,UAAM,eAAe,YAAY;AAC7B,aAAO,gBAAgB,GAAG;AAC1B,YAAM,OAAO;AAAA,QACT,GAAG;AAAA,QACH,OAAO;AAAA,QACP,SAAS;AAAA,MACb;AACA,YAAM,UAAU,IAAI;AACpB,eAAS,SAAS;AAClB,eAAS,UAAU,KAAK;AACxB,cAAQ,QAAQ;AAAA,IACpB;AACA,QAAI,iBAAiB,SAAS,MAAM,KAAK,aAAa,CAAC;AACvD,QAAI,MAAM;AAAA,EACd,CAAC;AACL;;;ACtFO,IAAM,mBAAmB,CAAC,GAAG,GAAG,GAAG,CAAC;AACpC,IAAM,iBAAiB,CAAC,GAAG,GAAG,GAAG,CAAC;;;ACDlC,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAY,OAAO;AACf,SAAK,MAAM;AACX,SAAK,OAAO,IAAI,kBAAkB,KAAK;AAAA,EAC3C;AAAA,EACA,UAAU,OAAO;AACb,UAAM,QAAQ,KAAK,KAAK,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK;AACxD,SAAK,OAAO,MAAM;AAClB,WAAO,MAAM,OAAO,CAAC,KAAK,SAAS,MAAM,OAAO,aAAa,IAAI,GAAG,EAAE;AAAA,EAC1E;AAAA,EACA,WAAW;AACP,WAAO,KAAK,KAAK,KAAK,KAAK;AAAA,EAC/B;AAAA,EACA,eAAe;AACX,UAAMC,aAAY,GAAG,WAAW,GAAG,QAAQ;AAC3C,SAAK,OAAOA;AACZ,WAAO,KAAK,KAAK,KAAK,MAAMA,UAAS,KAAK,KAAK,KAAK,KAAK,MAAM,QAAQ,KAAK;AAAA,EAChF;AAAA,EACA,gBAAgB;AACZ,QAAI,cAAc,IAAI,OAAO;AAC7B,UAAM,WAAW,GAAG,YAAY;AAChC,OAAG;AACC,aAAO,KAAK,KAAK,KAAK,KAAK;AAC3B,eAAS,QAAQ,MAAM,EAAE,SAAS,UAAU,eAAe,OAAO,aAAa,KAAK,KAAK,KAAK,KAAK,CAAC,GAAG;AAAA,MACvG;AAAA,IACJ,SAAS,SAAS;AAClB,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AACf,QAAI,OAAO,KAAK,KAAK,KAAK,GAAG,GAAG,MAAM;AACtC,UAAM,YAAY,GAAGA,aAAY;AACjC,aAAS,SAAS,GAAG,SAAS,WAAW,UAAU,OAAOA,YAAW,OAAO,KAAK,KAAK,KAAK,MAAM,MAAM,GAAG;AACtG,aAAO;AAAA,IACX;AACA,UAAM,YAAY,IAAI,WAAW,GAAG;AACpC,WAAO,KAAK,KAAK,KAAK,KAAK;AAC3B,aAAS,IAAI,GAAG,SAAS,WAAW,OAAO,KAAK,KAAK,KAAK,KAAK,GAAG;AAC9D,eAAS,QAAQ,MAAM,EAAE,SAAS,WAAW,UAAU,GAAG,IAAI,KAAK,KAAK,KAAK,KAAK,GAAG;AAAA,MACrF;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB;AACZ,eAAWA,aAAY,GAAG,SAAS,GAAG,KAAK,KAAK,KAAK,GAAG,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,KAAK,GAAG,IAAIA,YAAW;AAAA,IACnH;AACA,SAAK;AAAA,EACT;AACJ;;;AC/CO,IAAI;AAAA,CACV,SAAUC,iBAAgB;AACvB,EAAAA,gBAAeA,gBAAe,SAAS,IAAI,CAAC,IAAI;AAChD,EAAAA,gBAAeA,gBAAe,SAAS,IAAI,CAAC,IAAI;AAChD,EAAAA,gBAAeA,gBAAe,mBAAmB,IAAI,CAAC,IAAI;AAC1D,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,CAAC,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AACnD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AACnD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AACnD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AACvD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;;;ACVnC,IAAI;AAAA,CACV,SAAUC,iBAAgB;AACvB,EAAAA,gBAAeA,gBAAe,WAAW,IAAI,EAAE,IAAI;AACnD,EAAAA,gBAAeA,gBAAe,sBAAsB,IAAI,GAAG,IAAI;AAC/D,EAAAA,gBAAeA,gBAAe,0BAA0B,IAAI,GAAG,IAAI;AACnE,EAAAA,gBAAeA,gBAAe,oBAAoB,IAAI,CAAC,IAAI;AAC3D,EAAAA,gBAAeA,gBAAe,kBAAkB,IAAI,GAAG,IAAI;AAC3D,EAAAA,gBAAeA,gBAAe,OAAO,IAAI,EAAE,IAAI;AAC/C,EAAAA,gBAAeA,gBAAe,WAAW,IAAI,EAAE,IAAI;AACvD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;;;ACJ1C,IAAMC,UAAS;AAAA,EACX,GAAG;AAAA,EACH,GAAG;AACP;AAHA,IAGG,eAAe;AAHlB,IAGqBC,QAAO;AAH5B,IAGiC,cAAc;AAH/C,IAGkD,aAAa;AAH/D,IAGkE,mBAAmB;AACrF,SAAS,gBAAgB,YAAY,OAAO;AACxC,QAAM,SAAS,CAAC;AAChB,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,WAAO,KAAK;AAAA,MACR,GAAG,WAAW,KAAK,WAAW,GAAG;AAAA,MACjC,GAAG,WAAW,KAAK,WAAW,MAAM,CAAC;AAAA,MACrC,GAAG,WAAW,KAAK,WAAW,MAAM,CAAC;AAAA,IACzC,CAAC;AACD,eAAW,OAAO;AAAA,EACtB;AACA,SAAO;AACX;AACA,SAAS,oBAAoB,YAAY,KAAK,eAAe,sBAAsB;AAC/E,UAAQ,WAAW,SAAS,GAAG;AAAA,IAC3B,KAAK,eAAe,0BAA0B;AAC1C,YAAM,QAAQ,IAAI,OAAO,cAAc,KAAK,CAAC;AAC7C,iBAAW;AACX,YAAM,aAAa,WAAW,SAAS;AACvC,YAAM,cAAc,aAAa,SAAU;AAC3C,YAAM,kBAAkB,aAAa,QAAU;AAC/C,YAAM,sBAAsB,aAAa,OAAO;AAChD,YAAM,oBAAoB,aAAa,OAAO;AAC9C,YAAM,YAAY,WAAW,aAAa,IAAI;AAC9C,YAAM,oBAAoB,WAAW,SAAS;AAC9C,UAAI,kBAAkB;AAClB,6BAAqB,iBAAiB;AAAA,MAC1C;AACA,iBAAW;AACX;AAAA,IACJ;AAAA,IACA,KAAK,eAAe,sBAAsB;AACtC,iBAAW;AACX,YAAM,uBAAuB;AAAA,QACzB,YAAY,WAAW,UAAU,CAAC;AAAA,QAClC,oBAAoB,WAAW,UAAU,CAAC;AAAA,QAC1C,MAAM,WAAW,iBAAiB;AAAA,MACtC;AACA,UAAI,sBAAsB,KAAK,oBAAoB;AACnD;AAAA,IACJ;AAAA,IACA,KAAK,eAAe,kBAAkB;AAClC,UAAI,SAAS,KAAK,CAAC,cAAc,KAAK,GAAG,WAAW,cAAc,CAAC,CAAC;AACpE;AAAA,IACJ;AAAA,IACA,KAAK,eAAe,oBAAoB;AACpC,UAAI,IAAI,iBAAiB,WAAW,GAAG;AACnC,cAAM,IAAI,UAAU,iDAAiD;AAAA,MACzE;AACA,iBAAW;AACX,UAAI,OAAO,cAAc,KAAK,CAAC,EAAE,gBAAgB;AAAA,QAC7C,MAAM,WAAW,aAAa;AAAA,QAC9B,KAAK,WAAW,aAAa;AAAA,QAC7B,OAAO,WAAW,aAAa;AAAA,QAC/B,QAAQ,WAAW,aAAa;AAAA,QAChC,UAAU;AAAA,UACN,OAAO,WAAW,aAAa;AAAA,UAC/B,QAAQ,WAAW,aAAa;AAAA,QACpC;AAAA,QACA,iBAAiB,WAAW,SAAS;AAAA,QACrC,iBAAiB,WAAW,SAAS;AAAA,QACrC,MAAM,WAAW,cAAc;AAAA,MACnC;AACA;AAAA,IACJ;AAAA,IACA;AACI,iBAAW,cAAc;AACzB;AAAA,EACR;AACJ;AACA,eAAe,gBAAgB,YAAY,KAAK,UAAU,eAAe,sBAAsB,kBAAkB;AAC7G,QAAM,QAAQ,IAAI,OAAO,cAAc,IAAI,CAAC;AAC5C,QAAM,OAAO,WAAW,aAAa;AACrC,QAAM,MAAM,WAAW,aAAa;AACpC,QAAM,QAAQ,WAAW,aAAa;AACtC,QAAM,SAAS,WAAW,aAAa;AACvC,QAAM,aAAa,WAAW,SAAS,GAAG,uBAAuB,aAAa,SAAU,KAAM,kBAAkB,aAAa,QAAU;AACvI,QAAM,YAAY,aAAa,QAAU;AACzC,QAAM,YAAY,aAAa,QAAU;AACzC,QAAM,kBAAkB,MAAO,aAAa,KAAK;AACjD,MAAI,qBAAqB;AACrB,UAAM,kBAAkB,gBAAgB,YAAY,eAAe;AAAA,EACvE;AACA,QAAM,WAAW,CAAC,UAAU;AACxB,UAAM,EAAE,GAAG,GAAG,EAAE,KAAK,sBAAsB,MAAM,kBAAkB,IAAI,kBAAkB,KAAK;AAC9F,QAAI,UAAU,qBAAqB,IAAI,GAAG;AACtC,aAAO,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI;AAAA,IAC7B;AACA,WAAO,EAAE,GAAG,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,IAAI,IAAI,KAAK,KAAK,EAAE;AAAA,EAC5D;AACA,QAAM,SAAS,MAAM;AACjB,QAAI;AACA,aAAO,IAAI,UAAU,MAAM,OAAO,MAAM,QAAQ,EAAE,YAAY,OAAO,CAAC;AAAA,IAC1E,SACO,OAAO;AACV,UAAI,iBAAiB,gBAAgB,MAAM,SAAS,kBAAkB;AAClE,eAAO;AAAA,MACX;AACA,YAAM;AAAA,IACV;AAAA,EACJ,GAAG;AACH,MAAI,SAAS,MAAM;AACf,UAAM,IAAI,UAAU,4BAA4B;AAAA,EACpD;AACA,QAAM,cAAc,WAAW,SAAS,GAAG,YAAY,WAAW,iBAAiB,GAAG,YAAY,KAAK;AACvG,QAAM,WAAW,CAAC,KAAK,QAAQ;AAC3B,UAAM,UAAU,QAAQ,GAAG,SAAS,MAAM;AAC1C,YAAU,UAAU,OAAO,KAAK,UAAU,UAAU,CAAC,KAAK,MAAM,UAAU,UAAU,CAAC,KAAK,OACnF,KAAK,OAAO,KAAM,YACrB;AAAA,EACR;AACA,MAAI,gBAAgB;AAChB,aAAS,OAAO,GAAG,OAAO,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,OAAO,GAAG,QAAQ;AACzF,UAAI,iBAAiB,IAAI,IAAI,MAAM,QAAQ;AACvC,YAAI,WAAW,GAAG,YAAY,GAAG,OAAO;AACxC,eAAO,CAAC,MAAM;AACV,gBAAM,OAAO;AACb,iBAAO,SAAS,KAAK,IAAI;AACzB,iBAAO,OAAO;AACd,cAAI,SAAS,WAAW;AACpB,mBAAO,cAAc;AACrB,gBAAI,SAAS,YAAY;AACzB,qBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,kBAAI,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC;AAAA,YACpC;AAAA,UACJ,OACK;AACD,gBAAI,QAAQ,IAAI,QAAQ;AACpB,kBAAI,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AAAA,YAC3C,WACS,SAAS,WAAW;AACzB,kBAAI,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AAAA,YAC3C;AACA,uBAAW,QAAQ,IAAI,IAAI,GAAG;AAC1B,oBAAM,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,SAAS,IAAI;AACpC,oBAAM,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,iBAAiB,IAAI,IAAI,MAAM,QACxD,eAAe,IAAI,IAAI,YACtB,YAAY,MAAM,QAAQ,EAAG;AAClC,0BAAY;AAAA,YAChB;AACA,gBAAI,IAAI,WAAW,KAAK,QAAQ,OAAO,IAAK;AACxC;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,aAAa,MAAM,QAAQ,KAAK,YAAY,IAAI;AAChD;AACA,gBAAI,iBAAiB,IAAI,IAAI,eAAe,IAAI,IAAI,aAAa,MAAM,QAAQ;AAC3E,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,2DAAmB,WAAW,OAAO,WAAW,KAAK,SAAS,IAAI,cAAc,KAAK,IAAI,GAAG,OAAO,EAAE,GAAG,MAAM,MAAM,GAAG,MAAM,IAAI,GAAG,EAAE,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO;AAAA,IAC/K;AACA,UAAM,QAAQ;AACd,UAAM,SAAS,MAAM,kBAAkB,KAAK;AAAA,EAChD,OACK;AACD,QAAI,OAAO,GAAG,OAAO,cAAc,GAAG,MAAM,GAAG,WAAW,IAAI,OAAO;AACrE,UAAM,MAAM,CAAC,CAAC,CAAC,CAAC;AAChB,WAAO,CAAC,MAAM;AACV,YAAM,OAAO;AACb,aAAO,SAAS,KAAK,IAAI;AACzB,aAAO;AACP,UAAI,SAAS,WAAW;AACpB,eAAO,cAAc;AACrB,YAAI,SAAS,YAAY;AACzB,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,cAAI,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC;AAAA,QACpC;AAAA,MACJ,OACK;AACD,YAAI,SAAS,YAAY,GAAG;AACxB,iBAAO;AACP;AAAA,QACJ;AACA,YAAI,QAAQ,IAAI,QAAQ;AACpB,cAAI,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AAAA,QAC3C,WACS,SAAS,WAAW;AACzB,cAAI,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AAAA,QAC3C;AACA,mBAAW,QAAQ,IAAI,IAAI,GAAG;AAC1B,gBAAM,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,SAAS,IAAI;AACpC,gBAAM,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAI,YAAY,CAAE;AAAA,QAChD;AACA,YAAI,IAAI,UAAU,KAAK,QAAQ,OAAO,IAAK;AACvC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,QAAQ;AACd,UAAM,SAAS,MAAM,kBAAkB,KAAK;AAC5C,0DAAoB,WAAW,MAAM,KAAK,WAAW,KAAK,QAAQ,cAAc,KAAK,IAAI,GAAG,MAAM,OAAO,EAAE,GAAG,MAAM,MAAM,GAAG,MAAM,IAAI,GAAG,EAAE,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO;AAAA,EACrL;AACJ;AACA,eAAe,WAAW,YAAY,KAAK,UAAU,eAAe,sBAAsB,kBAAkB;AACxG,UAAQ,WAAW,SAAS,GAAG;AAAA,IAC3B,KAAK,eAAe;AAChB,aAAO;AAAA,IACX,KAAK,eAAe;AAChB,YAAM,gBAAgB,YAAY,KAAK,UAAU,eAAe,sBAAsB,gBAAgB;AACtG;AAAA,IACJ,KAAK,eAAe;AAChB,0BAAoB,YAAY,KAAK,eAAe,oBAAoB;AACxE;AAAA,IACJ;AACI,YAAM,IAAI,UAAU,uBAAuB;AAAA,EACnD;AACA,SAAO;AACX;AACO,SAAS,iBAAiB,KAAK;AAClC,aAAW,aAAa,IAAI,uBAAuB;AAC/C,QAAI,UAAU,aAAa,UAAU,uBAAuB,eAAe;AACvE;AAAA,IACJ;AACA,WAAO,UAAU,KAAK,CAAC,KAAK,UAAU,KAAK,CAAC,KAAK;AAAA,EACrD;AACA,SAAO;AACX;AACA,eAAsB,UAAU,QAAQ,kBAAkB,UAAU;AAChE,MAAI,CAAC;AACD,eAAW;AACf,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,MAAI,CAAC,IAAI,MAAM,IAAI,WAAW,KAAK;AAC/B,UAAM,IAAI,UAAU,gBAAgB;AAAA,EACxC;AACA,QAAM,SAAS,MAAM,IAAI,YAAY;AACrC,QAAM,MAAM;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,UAAU;AAAA,IACV,kBAAkB;AAAA,IAClB,QAAQ,CAAC;AAAA,IACT,UAAU;AAAA,IACV,kBAAkB,CAAC;AAAA,IACnB,iBAAiB,IAAI,UAAU,GAAG,GAAG,EAAE,YAAY,OAAO,CAAC;AAAA,IAC3D,UAAU,CAAC;AAAA,IACX,uBAAuB,CAAC;AAAA,EAC5B,GAAG,aAAa,IAAI,WAAW,IAAI,kBAAkB,MAAM,CAAC;AAC5D,MAAI,WAAW,UAAU,CAAC,MAAM,UAAU;AACtC,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC9C;AACA,MAAI,QAAQ,WAAW,aAAa;AACpC,MAAI,SAAS,WAAW,aAAa;AACrC,QAAM,aAAa,WAAW,SAAS,GAAG,wBAAwB,aAAa,SAAU;AACzF,MAAI,YAAY,aAAa,SAAU;AACvC,MAAI,YAAY,aAAa,OAAO;AACpC,QAAM,mBAAmB,MAAO,aAAa,KAAK,GAAI,uBAAuB,WAAW,SAAS;AACjG,MAAI,mBAAmB,WAAW,SAAS;AAC3C,MAAI,IAAI,qBAAqB,GAAG;AAC5B,QAAI,oBAAoB,IAAI,mBAAmB,MAAO;AAAA,EAC1D;AACA,MAAI,sBAAsB;AACtB,QAAI,mBAAmB,gBAAgB,YAAY,gBAAgB;AAAA,EACvE;AACA,QAAM,mBAAmB,MAAM;AAC3B,QAAI;AACA,aAAO,IAAI,UAAU,IAAI,OAAO,IAAI,QAAQ,EAAE,YAAY,OAAO,CAAC;AAAA,IACtE,SACO,OAAO;AACV,UAAI,iBAAiB,gBAAgB,MAAM,SAAS,kBAAkB;AAClE,eAAO;AAAA,MACX;AACA,YAAM;AAAA,IACV;AAAA,EACJ,GAAG;AACH,MAAI,mBAAmB,MAAM;AACzB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACA,QAAM,EAAE,GAAG,GAAG,EAAE,IAAI,IAAI,iBAAiB,oBAAoB;AAC7D,kBAAgB,KAAK,IAAI,uBAAuB,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAC7E,WAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK,QAAQ,KAAK,GAAG;AACrD,oBAAgB,KAAK,WAAW,GAAG,GAAG,CAAC;AAAA,EAC3C;AACA,MAAI,kBAAkB;AACtB,MAAI,aAAa,IAAI,sBAAsB,MAAM,oBAAoB;AACrE,QAAM,gBAAgB,CAACC,eAAc;AACjC,QAAIA,YAAW;AACX,4BAAsB;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AACA,QAAM,uBAAuB,CAAC,aAAa;AACvC,QAAI,YAAY,MAAM;AAClB,0BAAoB;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AACA,MAAI;AACA,OAAG;AACC,UAAI,qBAAqB;AACrB,YAAI,OAAO,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,KAAK;AAAA,UACL,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,gBAAgB,eAAe;AAAA,UAC/B,OAAO,IAAI,UAAU,GAAG,GAAG,EAAE,YAAY,OAAO,CAAC;AAAA,UACjD,eAAe;AAAA,UACf,oBAAoB;AAAA,UACpB,WAAW;AAAA,UACX,UAAU;AAAA,UACV,iBAAiB,CAAC;AAAA,UAClB,UAAU;AAAA,UACV,YAAY;AAAA,QAChB,CAAC;AACD;AACA,4BAAoB;AACpB,8BAAsB;AAAA,MAC1B;AAAA,IACJ,SAAS,CAAE,MAAM,WAAW,YAAY,KAAK,UAAU,eAAe,sBAAsB,gBAAgB;AAC5G,QAAI,OAAO;AACX,eAAW,SAAS,IAAI,QAAQ;AAC5B,UAAI,MAAM,sBAAsB,MAAM,cAAc,GAAG;AACnD,YAAI,YAAY;AAChB;AAAA,MACJ;AACA,UAAI,aAAa,MAAM;AAAA,IAC3B;AACA,WAAO;AAAA,EACX,SACO,OAAO;AACV,QAAI,iBAAiB,WAAW;AAC5B,YAAM,IAAI,MAAM,6BAA6B,UAAU,KAAK,MAAM,OAAO,GAAG;AAAA,IAChF;AACA,UAAM;AAAA,EACV;AACJ;AACO,SAAS,QAAQ,MAAM;AAC1B,QAAM,EAAE,SAAS,QAAQ,UAAU,MAAM,IAAI,MAAM,QAAQ,SAAS;AACpE,MAAI,EAAC,+BAAO,YAAW,CAAC,MAAM,KAAK;AAC/B;AAAA,EACJ;AACA,QAAM,kBAAkB,IAAI,gBAAgB,MAAM,QAAQ,OAAO,MAAM,QAAQ,MAAM,GAAG,mBAAmB,gBAAgB,WAAW,IAAI;AAC1I,MAAI,CAAC,kBAAkB;AACnB,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC/D;AACA,mBAAiB,wBAAwB;AACzC,mBAAiB,wBAAwB;AACzC,mBAAiB,UAAUF,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AAC5F,MAAI,SAAS,iBAAiB,QAAW;AACrC,aAAS,eAAe,MAAM,gBAAgB;AAAA,EAClD;AACA,MAAI,aAAa,SAAS,YAAY;AACtC,QAAM,MAAM,EAAE,GAAG,CAAC,MAAM,QAAQ,QAAQC,OAAM,GAAG,CAAC,MAAM,QAAQ,SAASA,MAAK,GAAG,QAAQ,MAAM,QAAQ,OAAO,UAAU;AACxH,MAAI,SAAS,YAAY,QAAW;AAChC,aAAS,UAAU;AAAA,EACvB;AACA,MAAI,CAAC,MAAM,QAAQ;AACf;AAAA,EACJ;AACA,UAAQ,MAAM,SAAS,MAAM,QAAQ,OAAO,SAAS,MAAM,QAAQ,MAAM;AACzE,UAAQ,MAAM,gBAAgB;AAAA,IAC1B,KAAK,eAAe;AAAA,IACpB,KAAK,eAAe;AAAA,IACpB,KAAK,eAAe;AAAA,IACpB,KAAK,eAAe;AAAA,IACpB,KAAK,eAAe;AAChB,uBAAiB,UAAU,MAAM,QAAQ,MAAM,MAAM,MAAM,GAAG;AAC9D,cAAQ,UAAU,iBAAiB,IAAI,GAAG,IAAI,CAAC;AAC/C,uBAAiB,UAAUD,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AAC5F;AAAA,IACJ,KAAK,eAAe;AAChB,uBAAiB,UAAU,MAAM,QAAQ,MAAM,MAAM,MAAM,GAAG;AAC9D,cAAQ,UAAU,iBAAiB,IAAI,GAAG,IAAI,CAAC;AAC/C;AAAA,IACJ,KAAK,eAAe;AAChB,uBAAiB,UAAU,MAAM,QAAQ,MAAM,MAAM,MAAM,GAAG;AAC9D,cAAQ,UAAU,iBAAiB,IAAI,GAAG,IAAI,CAAC;AAC/C,uBAAiB,UAAUA,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AAC5F,UAAI,CAAC,MAAM,QAAQ,iBAAiB,QAAQ;AACxC,yBAAiB,aAAa,MAAM,QAAQ,OAAO,UAAU,EAAE,OAAO,IAAI,IAAI,MAAM,MAAM,IAAI,IAAI,MAAM,GAAG;AAAA,MAC/G,OACK;AACD,yBAAiB,aAAa,MAAM,QAAQ,iBAAiB,IAAI,GAAG,IAAI,CAAC;AAAA,MAC7E;AACA;AAAA,IACJ,KAAK,eAAe;AAChB;AACI,cAAM,oBAAoB,iBAAiB,aAAaA,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AACzH,yBAAiB,UAAU,MAAM,QAAQ,MAAM,MAAM,MAAM,GAAG;AAC9D,gBAAQ,UAAU,iBAAiB,IAAI,GAAG,IAAI,CAAC;AAC/C,yBAAiB,UAAUA,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AAC5F,yBAAiB,aAAa,mBAAmBA,QAAO,GAAGA,QAAO,CAAC;AAAA,MACvE;AACA;AAAA,EACR;AACA,WAAS,WAAW,MAAM;AAC1B,MAAI,SAAS,UAAU,MAAM,WAAW;AACpC,aAAS,WAAW,MAAM;AAC1B,QAAI,EAAE,cAAc,MAAM,QAAQ,OAAO,QAAQ;AAC7C,UAAI,EAAE,SAAS,gBAAgB,kBAAkB;AAC7C;AAAA,MACJ;AACA,mBAAa;AACb,uBAAiB,UAAUA,QAAO,GAAGA,QAAO,GAAG,gBAAgB,OAAO,gBAAgB,MAAM;AAAA,IAChG;AACA,aAAS,WAAW;AAAA,EACxB;AACA,UAAQ,MAAM,MAAM,QAAQ,QAAQ,QAAQ,MAAM,QAAQ,SAAS,MAAM;AAC7E;AACA,eAAsB,aAAa,OAAO;AACtC,MAAI,MAAM,SAAS,OAAO;AACtB,UAAM,UAAU,KAAK;AACrB;AAAA,EACJ;AACA,QAAM,UAAU;AAChB,MAAI;AACA,UAAM,UAAU,MAAM,UAAU,MAAM,MAAM;AAC5C,UAAM,eAAe,iBAAiB,MAAM,OAAO,KAAK;AACxD,QAAI,CAAC,MAAM,cAAc;AACrB,YAAM,eAAe;AAAA,IACzB;AAAA,EACJ,QACM;AACF,UAAM,QAAQ;AAAA,EAClB;AACA,QAAM,UAAU;AACpB;;;ACzaA,IAAMG,UAAS;AAAf,IAAkBC,gBAAe;AAAjC,IAAoCC,SAAQ;AAA5C,IAAgDC,gBAAe;AACxD,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,QAAQ;AAChB,SAAK,aAAa,CAAC,SAAS,QAAQ;AACpC,SAAK,iBAAiB,OAAO,eAAe;AACxC,UAAI,CAAC,KAAK,QAAQ,WAAW;AACzB,cAAM,IAAI,MAAM,GAAG,WAAW,8BAA8B;AAAA,MAChE;AACA,YAAM,KAAK,QAAQ,UAAU;AAAA,QACzB,KAAK,WAAW;AAAA,QAChB,MAAM,WAAW;AAAA,QACjB,cAAc,WAAW,gBAAgB;AAAA,QACzC,KAAK,WAAW;AAAA,MACpB,CAAC;AAAA,IACL;AACA,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,SAAS,OAAO;AACZ,QAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB,WAAK,QAAQ,SAAS,CAAC;AAAA,IAC3B;AACA,SAAK,QAAQ,OAAO,KAAK,KAAK;AAAA,EAClC;AAAA,EACA,KAAK,MAAM;AACP,UAAM,EAAE,SAAS,QAAQ,UAAU,QAAQ,IAAI,MAAM,QAAQ,SAAS,OAAO,UAAU,+BAAO;AAC9F,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,YAAQ,cAAc;AACtB,QAAI,MAAM,OAAO,MAAM,SAAS;AAC5B,cAAQ,IAAI;AAAA,IAChB,WACS,SAAS;AACd,YAAM,QAAQ,MAAM,OAAO,MAAM;AAAA,QAC7B,GAAG,CAAC;AAAA,QACJ,GAAG,CAAC;AAAA,MACR,GAAG,WAAW,SAASH;AACvB,cAAQ,UAAU,SAAS,IAAI,GAAG,IAAI,GAAG,UAAU,WAAW,KAAK;AAAA,IACvE;AACA,YAAQ,cAAcC;AAAA,EAC1B;AAAA,EACA,gBAAgB;AACZ,WAAOC;AAAA,EACX;AAAA,EACA,MAAM,KAAK,WAAW;AAClB,UAAM,UAAU,UAAU;AAC1B,QAAI,CAAC,QAAQ,WAAW,CAAC,KAAK,QAAQ,WAAW;AAC7C;AAAA,IACJ;AACA,eAAW,aAAa,QAAQ,SAAS;AACrC,YAAM,KAAK,QAAQ,UAAU,SAAS;AAAA,IAC1C;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,QAAI,SAAS,UAAU,WAAW,SAAS,UAAU,UAAU;AAC3D;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB,WAAK,QAAQ,SAAS,CAAC;AAAA,IAC3B;AACA,UAAM,YAAY,SAAS;AAC3B,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,QAAQ,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU,QAAQ,EAAE,WAAW,UAAU,GAAG;AACrG,QAAI,CAAC,OAAO;AACR,WAAK,KAAK,eAAe,SAAS,EAAE,KAAK,MAAM;AAC3C,aAAK,UAAU,QAAQ;AAAA,MAC3B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,aAAa,WAAW,UAAU;AAC9B,QAAI,SAAS,UAAU,WAAW,SAAS,UAAU,UAAU;AAC3D;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB,WAAK,QAAQ,SAAS,CAAC;AAAA,IAC3B;AACA,UAAM,SAAS,KAAK,QAAQ,QAAQ,YAAY,SAAS;AACzD,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,UAAM,QAAQ,SAAS,aAAa,GAAG,QAAQ,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU,QAAQ,EAAE,WAAW,UAAU,GAAG;AACzH,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,eAAe,UAAU,gBAAgB,MAAM;AACrD,QAAI,MAAM,SAAS;AACf,iBAAW,MAAM;AACb,aAAK,aAAa,WAAW,QAAQ;AAAA,MACzC,CAAC;AACD;AAAA,IACJ;AACA,UAAM,YAAY;AACd,UAAI;AACJ,UAAI,MAAM,WAAW,OAAO;AACxB,mBAAW,MAAM,kBAAkB,OAAO,WAAW,OAAO,QAAQ;AAAA,MACxE,OACK;AACD,mBAAW;AAAA,UACP;AAAA,UACA,MAAM;AAAA,UACN,SAAS,MAAM;AAAA,UACf,KAAK,MAAM;AAAA,UACX,SAAS,MAAM;AAAA,UACf,cAAc,MAAM;AAAA,UACpB,QAAQ;AAAA,UACR,OAAO,UAAU,SAAS,UAAU,SAC9B,UAAU,QAAQ,UAAU,SAC3B,MAAM,SAASC;AAAA,UACtB;AAAA,UACA,QAAQ,UAAU;AAAA,QACtB;AAAA,MACJ;AACA,UAAI,CAAC,SAAS,OAAO;AACjB,iBAAS,QAAQ;AAAA,MACrB;AACA,YAAM,OAAO,UAAU,QAAQ,SAAS,WAAW,QAAQ,UAAU,SAAS,SAAS,YAAY,aAAa;AAAA,QAC5G,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACJ;AACA,eAAS,QAAQ,WAAW;AAC5B,eAAS,YAAY,WAAW;AAChC,eAAS,aAAa,WAAW;AAAA,IACrC,GAAG;AAAA,EACP;AACJ;;;ACjIO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,MAAM;AAAA,EACf;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,QAAQ,QAAW;AACxB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,KAAK;AAAA,IAC7B;AACA,QAAI,KAAK,QAAQ,QAAW;AACxB,WAAK,MAAM,KAAK;AAAA,IACpB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AAAA,EACJ;AACJ;;;AC5BO,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YAAY,QAAQ;AAChB,SAAK,KAAK;AACV,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,MAAM,YAAY;AACd,UAAM,QAAQ,QAAQ;AACtB,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,YAAY,SAAS,QAAQ;AACzB,QAAI,EAAC,iCAAQ,UAAS;AAClB;AAAA,IACJ;AACA,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,CAAC;AAAA,IACvB;AACA,UAAM,iBAAiB,QAAQ;AAC/B,eAAW,QAAQ,OAAO,SAAS;AAC/B,YAAM,WAAW,eAAe,KAAK,OAAK,EAAE,SAAS,KAAK,QAAQ,EAAE,QAAQ,KAAK,GAAG;AACpF,UAAI,UAAU;AACV,iBAAS,KAAK,IAAI;AAAA,MACtB,OACK;AACD,cAAM,UAAU,IAAI,QAAQ;AAC5B,gBAAQ,KAAK,IAAI;AACjB,uBAAe,KAAK,OAAO;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc;AACV,WAAO;AAAA,EACX;AACJ;;;AC5BA,IAAM,YAAY;AAClB,SAAS,qBAAqB,QAAQ;AAClC,MAAI,OAAO,WAAW;AAClB;AAAA,EACJ;AACA,SAAO,YAAY,OAAO,SAAS;AAC/B,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK;AACzB,YAAM,IAAI,MAAM,GAAG,WAAW,2BAA2B;AAAA,IAC7D;AACA,QAAI,CAAC,OAAO,QAAQ;AAChB,aAAO,SAAS,CAAC;AAAA,IACrB;AACA,QAAI,OAAO,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,KAAK,QAAQ,EAAE,WAAW,KAAK,GAAG,GAAG;AAC1E;AAAA,IACJ;AACA,QAAI;AACA,YAAM,QAAQ;AAAA,QACV,KAAK,KAAK,OAAO;AAAA,QACjB,MAAM,KAAK,QAAQ,KAAK;AAAA,QACxB,QAAQ,KAAK;AAAA,QACb,MAAM,KAAK,IAAI,UAAU,KAAK,IAAI,SAAS,SAAS;AAAA,QACpD,OAAO;AAAA,QACP,SAAS;AAAA,QACT,cAAc,KAAK;AAAA,QACnB,OAAO,KAAK,SAAS,KAAK,SAAS,KAAK,QAAQ,KAAK,SAAS;AAAA,MAClE;AACA,aAAO,OAAO,KAAK,KAAK;AACxB,UAAI;AACJ,UAAI,KAAK,KAAK;AACV,oBAAY;AAAA,MAChB,OACK;AACD,oBAAY,KAAK,eAAe,mBAAmB;AAAA,MACvD;AACA,YAAM,UAAU,KAAK;AAAA,IACzB,QACM;AACF,YAAM,IAAI,MAAM,GAAG,WAAW,IAAI,KAAK,QAAQ,KAAK,GAAG,YAAY;AAAA,IACvE;AAAA,EACJ;AACJ;AACA,eAAsB,eAAe,QAAQ,UAAU,MAAM;AACzD,SAAO,aAAa,OAAO;AAC3B,uBAAqB,MAAM;AAC3B,QAAM,YAAY,IAAI,qBAAqB,MAAM;AACjD,QAAM,OAAO,UAAU,WAAW,OAAO;AACzC,QAAM,OAAO,SAAS,IAAI,YAAY,MAAM,GAAG,OAAO;AAC1D;;;ACnDO,IAAM,YAAN,cAAwB,gBAAgB;AAAA,EAC3C,cAAc;AACV,UAAM;AACN,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,UAAM,KAAK,IAAI;AACf,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACdO,IAAM,eAAN,cAA2B,gBAAgB;AAAA,EAC9C,cAAc;AACV,UAAM;AACN,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,UAAM,KAAK,IAAI;AACf,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACZO,IAAM,OAAN,MAAW;AAAA,EACd,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,QAAQ,IAAI,UAAU;AAC3B,SAAK,WAAW,IAAI,aAAa;AAAA,EACrC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,SAAK,MAAM,KAAK,KAAK,KAAK;AAC1B,SAAK,SAAS,KAAK,KAAK,QAAQ;AAAA,EACpC;AACJ;;;AClBA,IAAM,SAAS;AAAf,IAAkB,gBAAgB;AAAlC,IAAsC,SAAS;AAA/C,IAAkD,gBAAgB;AAC3D,SAAS,WAAW,UAAU,OAAO,YAAY;AACpD,MAAI,CAAC,SAAS,MAAM;AAChB;AAAA,EACJ;AACA,QAAM,OAAO,SAAS;AACtB,MAAI,cAAc;AAClB,MAAI,SAAS,UAAU;AACnB,SAAK,aAAa,MAAM;AACxB,QAAI,KAAK,aAAa,SAAS,KAAK,OAAO;AACvC,oBAAc;AACd,eAAS,WAAW;AACpB,WAAK,YAAY;AACjB,WAAK,OAAO;AAAA,IAChB,OACK;AACD;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,KAAK,aAAa,eAAe;AACjC;AAAA,EACJ;AACA,MAAI,SAAS,UAAU;AACnB;AAAA,EACJ;AACA,MAAI,aAAa;AACb,SAAK,OAAO;AAAA,EAChB,OACK;AACD,SAAK,QAAQ,MAAM;AAAA,EACvB;AACA,MAAI,KAAK,OAAO,KAAK,UAAU;AAC3B;AAAA,EACJ;AACA,OAAK,OAAO;AACZ,MAAI,SAAS,KAAK,QAAQ,QAAQ;AAC9B,aAAS,KAAK;AAAA,EAClB;AACA,MAAI,SAAS,KAAK,UAAU,QAAQ;AAChC,aAAS,QAAQ;AACjB;AAAA,EACJ;AACA,QAAM,aAAa,cAAc,eAAe,WAAW,KAAK,GAAG,cAAc,cAAc,eAAe,WAAW,KAAK;AAC9H,WAAS,SAAS,IAAI,cAAc,UAAU;AAC9C,WAAS,SAAS,IAAI,cAAc,WAAW;AAC/C,WAAS,WAAW;AACpB,OAAK,YAAY;AACjB,OAAK,OAAO;AACZ,WAAS,MAAM;AACf,QAAM,cAAc,SAAS,QAAQ;AACrC,MAAI,aAAa;AACb,SAAK,QAAQ,cAAc,YAAY,MAAM,KAAK,IAAI;AACtD,SAAK,WAAW,cAAc,YAAY,SAAS,KAAK,IAAI;AAAA,EAChE;AACJ;;;ACpDA,IAAMC,UAAS;AAAf,IAAkBC,YAAW;AAA7B,IAAgCC,iBAAgB;AACzC,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,WAAW;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,YAAY,KAAK,WAAW,mBAAmB,SAAS,SAAS,cAAc,iBAAiB;AACtG,QAAI,CAAC,aAAa;AACd;AAAA,IACJ;AACA,aAAS,OAAO;AAAA,MACZ,OAAO,UAAU,OAAO,eAChB,cAAc,YAAY,MAAM,KAAK,KAAK,YAAY,MAAM,OAAOD,YAAW,UAAU,KACxF,UAAU,OAAO,eACjB,wBACFD;AAAA,MACN,WAAWA;AAAA,MACX,UAAU,UAAU,OAAO,eACnB,cAAc,YAAY,SAAS,KAAK,KAAK,YAAY,SAAS,OAAOC,YAAW,UAAU,KAC9F,UAAU,OAAO,eACjB,wBACFD;AAAA,MACN,MAAMA;AAAA,MACN,OAAO,YAAY;AAAA,IACvB;AACA,QAAI,SAAS,KAAK,YAAYA,SAAQ;AAClC,eAAS,KAAK,WAAWE;AAAA,IAC7B;AACA,QAAI,SAAS,KAAK,SAASF,SAAQ;AAC/B,eAAS,KAAK,QAAQE;AAAA,IAC1B;AACA,QAAI,SAAS,MAAM;AACf,eAAS,WAAW,SAAS,KAAK,QAAQF;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,CAAC,SAAS;AAAA,EACrB;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,KAAK,CAAC,SAAS,MAAM;AAC7C;AAAA,IACJ;AACA,eAAW,UAAU,OAAO,KAAK,UAAU,OAAO,IAAI;AAAA,EAC1D;AACJ;;;ACtDA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,QAAQ,OAAO,cAAc;AACzD,WAAO,QAAQ,QAAQ,IAAI,YAAY,SAAS,CAAC;AAAA,EACrD,GAAG,OAAO;AACd;;;ACNO,SAASG,UAAS,MAAM;AAC3B,QAAM,EAAE,SAAS,UAAU,OAAO,IAAI,MAAM,YAAY,SAAS,WAAW,UAAU;AACtF,UAAQ,OAAO,CAAC,QAAQ,OAAO;AAC/B,UAAQ,OAAO,QAAQ,OAAO;AAC9B,UAAQ,WAAU,uCAAW,QAAO;AACxC;;;ACJA,IAAMC,SAAQ;AACP,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,SAAK,aAAa,CAAC,MAAM;AAAA,EAC7B;AAAA,EACA,KAAK,MAAM;AACP,IAAAC,UAAS,IAAI;AAAA,EACjB;AAAA,EACA,gBAAgB;AACZ,WAAOD;AAAA,EACX;AACJ;;;ACXA,eAAsB,cAAc,QAAQ,UAAU,MAAM;AACxD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,WAAW,GAAG,OAAO;AACnD;;;ACHA,IAAME,QAAO;AACN,IAAM,gBAAN,MAAoB;AAAA,EACvB,OAAO;AAAA,EACP;AAAA,EACA,UAAU,UAAU;AAChB,WAAQ,CAAC,MAAM,KACX,CAAC,SAAS,aACV,SAAS,UAAU,cAAc,cAAc,OAAO,QAAQ,SAAS;AAAA,EAC/E;AAAA,EACA,KAAK,UAAU;AACX,UAAM,YAAY,SAAS,WAAW,UAAU,UAAU,eAAe,kBAAkB,QAAQ,cAAc,OAAO,QAAQ;AAChI,QAAI,MAAM,KAAK,CAAC,gBAAgB,QAAQ;AACpC;AAAA,IACJ;AACA,UAAM,gBAAgB,gBAAgB,OAAO,WAAW,UAAU,cAAc,MAAM;AACtF,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AACA,UAAM,aAAa,UAAU,OAAO,MAAM,eAAe;AAAA,MACrD,GAAG,WAAW,QAAQA;AAAA,MACtB,GAAG,WAAW,SAASA;AAAA,IAC3B,GAAG,iBAAiB,gBAAgB,QAAQ,SAAS,SAAS,UAAU,IAAI,eAAe,iBAAiB;AAAA,MACxG,IAAI,SAAS,IAAI,aAAa,KAAK;AAAA,MACnC,IAAI,SAAS,IAAI,aAAa,KAAK;AAAA,IACvC,GAAG,EAAE,OAAO,IAAI;AAChB,WAAO,MAAM,eAAe,IAAI,OAAO,KAAK;AAC5C,WAAO,MAAM,eAAe,IAAI,OAAO,KAAK;AAAA,EAChD;AACJ;;;AC5BA,eAAsB,kBAAkB,QAAQ,UAAU,MAAM;AAC5D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,YAAY,MAAM;AACpC,WAAO,QAAQ,QAAQ,IAAI,cAAc,CAAC;AAAA,EAC9C,GAAG,OAAO;AACd;;;ACLA,IAAM,gBAAgB;AAAtB,IAA4BC,YAAW;AAChC,IAAMC,aAAN,cAAwB,wBAAwB;AAAA,EACnD,YAAY,WAAW;AACnB,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,SAAS,IAAI;AACT,UAAM,YAAY,KAAK;AACvB,QAAI,GAAG,oBAAoB,QAAW;AAClC,SAAG,kBAAkB,cAAc,GAAG,QAAQ,KAAK,QAAQ,QAAQ,IAAI,UAAU,OAAO;AAAA,IAC5F;AACA,UAAM,WAAW,GAAG,iBAAiB,OAAO,GAAG,YAAY,GAAG,QAAQ,UAAU,UAAU,SAAS,YAAY,MAAM,QAAQ;AAC7H,eAAW,MAAM,OAAO;AACpB,UAAI,OAAO,MAAM,CAAC,GAAG,QAAQ,KAAK,QAAQ,UAAU,GAAG,aAAa,GAAG,UAAU;AAC7E;AAAA,MACJ;AACA,YAAM,OAAO,GAAG,YAAY,GAAG,EAAE,IAAI,GAAG,IAAI,aAAa,MAAM,IAAI,GAAG,SAAS,GAAG,QAAQ,KAAK,QAAQ,QAAQ,KAAK,MAAM,OAAO,IAAI,gBAAgB,KAAK,MAAM,OAAO,IAAI,gBAAgB,WAAW,GAAG,KAAK,QAAQ,GAAG,KAAK,OAAO,WAAWD,YAAW;AAC3P,SAAG,SAAS,KAAK,KAAK;AACtB,SAAG,SAAS,KAAK,KAAK;AACtB,SAAG,SAAS,KAAK,KAAK;AACtB,SAAG,SAAS,KAAK,KAAK;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,SAAS,QAAQ,KAAK,QAAQ;AAAA,EACzC;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC/BA,eAAsB,gCAAgC,QAAQ,UAAU,MAAM;AAC1E,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,oBAAoB,eAAa;AACxD,WAAO,QAAQ,QAAQ,IAAIE,WAAU,SAAS,CAAC;AAAA,EACnD,GAAG,OAAO;AACd;;;ACLA,IAAMC,SAAO;AAAb,IAAkBC,gBAAe;AAAjC,IAAqC,kBAAkB;AACvD,SAAS,aAAa,IAAI,IAAI,IAAI,IAAI,OAAO,YAAY;AACrD,QAAM,SAAS,MAAO,GAAG,QAAQ,WAAW,OAAO,QAAQ,MAAM,SAAUA,eAAc,iBAAiB,EAAE;AAC5G,KAAG,KAAK,SAAS,SAASD;AAC1B,KAAG,KAAK,SAAS;AACjB,MAAI,MAAM,YAAY;AAClB,OAAG,KAAK,QAAQ;AAChB,OAAG,QAAQ;AAAA,EACf;AACJ;AACO,SAAS,OAAO,IAAI,IAAI,OAAO,YAAY;AAC9C,QAAM,KAAK,GAAG,UAAU,GAAG,KAAK,GAAG,UAAU;AAC7C,MAAI,OAAO,UAAa,OAAO,QAAW;AACtC,OAAG,QAAQ;AAAA,EACf,WACS,OAAO,UAAa,OAAO,QAAW;AAC3C,OAAG,QAAQ;AAAA,EACf,WACS,OAAO,UAAa,OAAO,QAAW;AAC3C,QAAI,MAAM,IAAI;AACV,mBAAa,IAAI,IAAI,IAAI,IAAI,OAAO,UAAU;AAAA,IAClD,OACK;AACD,mBAAa,IAAI,IAAI,IAAI,IAAI,OAAO,UAAU;AAAA,IAClD;AAAA,EACJ;AACJ;;;AC1BA,IAAM,iBAAiB,CAAC,MAAM;AAC1B,MAAI,EAAE,sBAAsB,QAAW;AACnC,MAAE,oBAAoB,cAAc,EAAE,QAAQ,WAAW,QAAQ;AAAA,EACrE;AACA,MAAI,EAAE,SAAS,SAAS,EAAE,mBAAmB;AACzC,MAAE,SAAS,SAAS,EAAE;AAAA,EAC1B;AACJ;AACO,SAAS,OAAO,IAAI,IAAI;AAC3B,eAAa,6BAA6B,EAAE,GAAG,6BAA6B,EAAE,CAAC;AAC/E,iBAAe,EAAE;AACjB,iBAAe,EAAE;AACrB;;;ACZO,SAAS,QAAQ,IAAI,IAAI;AAC5B,MAAI,CAAC,GAAG,eAAe,CAAC,GAAG,aAAa;AACpC,WAAO,IAAI,EAAE;AAAA,EACjB;AACA,MAAI,GAAG,UAAU,MAAM,UAAa,GAAG,UAAU,MAAM,QAAW;AAC9D,OAAG,QAAQ;AAAA,EACf,WACS,GAAG,UAAU,MAAM,UAAa,GAAG,UAAU,MAAM,QAAW;AACnE,OAAG,QAAQ;AAAA,EACf,WACS,GAAG,UAAU,MAAM,UAAa,GAAG,UAAU,MAAM,QAAW;AACnE,UAAM,UAAU,GAAG,UAAU,KAAK,GAAG,UAAU,IAAI,KAAK;AACxD,YAAQ,QAAQ;AAAA,EACpB;AACJ;;;ACXO,SAAS,iBAAiB,IAAI,IAAI,OAAO,YAAY;AACxD,UAAQ,GAAG,QAAQ,WAAW,MAAM;AAAA,IAChC,KAAK,cAAc,QAAQ;AACvB,aAAO,IAAI,IAAI,OAAO,UAAU;AAChC;AAAA,IACJ;AAAA,IACA,KAAK,cAAc,QAAQ;AACvB,aAAO,IAAI,EAAE;AACb;AAAA,IACJ;AAAA,IACA,KAAK,cAAc,SAAS;AACxB,cAAQ,IAAI,EAAE;AACd;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACjBA,IAAME,WAAS;AACR,IAAM,WAAN,cAAuB,wBAAwB;AAAA,EAClD,YAAY,WAAW;AACnB,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,SAAS,IAAI,OAAO;AAChB,QAAI,GAAG,aAAa,GAAG,UAAU;AAC7B;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,WAAW,OAAO,GAAG,YAAY,GAAG,UAAU,GAAG,UAAU,GAAG,QAAQ,UAAU,UAAU,SAAS,YAAY,MAAM,UAAUA,QAAM;AAC5J,eAAW,MAAM,OAAO;AACpB,UAAI,OAAO,MACP,CAAC,GAAG,QAAQ,WAAW,UACvB,GAAG,QAAQ,WAAW,SAAS,GAAG,QAAQ,WAAW,QACrD,GAAG,aACH,GAAG,UAAU;AACb;AAAA,MACJ;AACA,YAAM,OAAO,GAAG,YAAY,GAAG,UAAU,GAAG,UAAU;AACtD,UAAI,KAAK,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK,MAAM,KAAK,CAAC,CAAC,IAAI,UAAU,SAAS;AACvE;AAAA,MACJ;AACA,YAAM,OAAO,YAAY,MAAM,IAAI,GAAG,QAAQ,UAAU;AACxD,UAAI,OAAO,OAAO;AACd;AAAA,MACJ;AACA,uBAAiB,IAAI,IAAI,OAAO,UAAU,OAAO,UAAU;AAAA,IAC/D;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,WAAO,SAAS,QAAQ,WAAW;AAAA,EACvC;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;ACvCA,eAAsB,mCAAmC,QAAQ,UAAU,MAAM;AAC7E,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,cAAc,uBAAuB,eAAa;AAC3D,WAAO,QAAQ,QAAQ,IAAI,SAAS,SAAS,CAAC;AAAA,EAClD,GAAG,OAAO;AACd;;;ACLA,IAAMC,WAAS;AACR,IAAM,aAAN,cAAyB,OAAO;AAAA,EACnC,YAAY,GAAG,GAAG,QAAQ,YAAY;AAClC,UAAM,GAAG,GAAG,MAAM;AAClB,SAAK,aAAa;AAClB,SAAK,aAAa,EAAE,GAAG,WAAW;AAAA,EACtC;AAAA,EACA,SAAS,OAAO;AACZ,UAAM,EAAE,OAAO,OAAO,IAAI,KAAK,YAAY,EAAE,GAAG,EAAE,IAAI;AACtD,WAAQ,MAAM,SAAS,KAAK,KACxB,MAAM,SAAS,EAAE,GAAG,IAAI,OAAO,EAAE,CAAC,KAClC,MAAM,SAAS,EAAE,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,KAC9C,MAAM,SAAS,EAAE,GAAG,GAAG,IAAI,OAAO,CAAC;AAAA,EAC3C;AAAA,EACA,WAAW,OAAO;AACd,QAAI,MAAM,WAAW,KAAK,GAAG;AACzB,aAAO;AAAA,IACX;AACA,UAAM,OAAO,OAAO,SAAS,OAAO,SAAS;AAAA,MACzC,GAAG,MAAM,SAAS,IAAI,KAAK,WAAW;AAAA,MACtC,GAAG,MAAM,SAAS,IAAI,KAAK,WAAW;AAAA,IAC1C;AACA,QAAI,OAAO,WAAW,QAAW;AAC7B,YAAM,eAAe,IAAI,OAAO,OAAO,GAAG,OAAO,GAAG,OAAO,SAASA,QAAM;AAC1E,aAAO,MAAM,WAAW,YAAY;AAAA,IACxC,WACS,KAAK,SAAS,QAAW;AAC9B,YAAM,SAAS,IAAI,UAAU,OAAO,GAAG,OAAO,GAAG,KAAK,KAAK,QAAQA,UAAQ,KAAK,KAAK,SAASA,QAAM;AACpG,aAAO,MAAM,WAAW,MAAM;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AACJ;;;AChCO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,QAAQ,IAAI,aAAa;AAC9B,SAAK,MAAM,QAAQ;AACnB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,SAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AACvD,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;ACnBO,IAAM,gBAAN,MAAoB;AAAA,EACvB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AAAA,IAC3D;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACpBO,IAAM,QAAN,MAAY;AAAA,EACf,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,QAAQ,IAAI,aAAa;AAC9B,SAAK,MAAM,QAAQ;AACnB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,SAAS,IAAI,YAAY;AAC9B,SAAK,YAAY,IAAI,cAAc;AACnC,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,OAAO,QAAW;AACvB,WAAK,KAAK,KAAK;AAAA,IACnB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,SAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AACvD,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA,IACzB;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,SAAK,OAAO,KAAK,KAAK,MAAM;AAC5B,SAAK,UAAU,KAAK,KAAK,SAAS;AAClC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA,IACtB;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;AClDA,IAAMC,eAAc;AAApB,IAAuB,gBAAgB;AAAvC,IAA0CC,UAAS;AAAA,EAC/C,GAAG;AAAA,EACH,GAAG;AACP;AAHA,IAGGC,eAAc;AACjB,SAAS,gBAAgB,MAAM,MAAM,aAAa,YAAY,MAAM;AAChE,QAAM,EAAE,IAAI,IAAI,SAAS,IAAI,aAAa,MAAM,IAAI;AACpD,MAAI,CAAC,QAAQ,YAAY,aAAa;AAClC,WAAO;AAAA,EACX;AACA,QAAM,WAAW;AAAA,IACb,GAAG,KAAK,IAAI,EAAE;AAAA,IACd,GAAG,KAAK,IAAI,EAAE;AAAA,EAClB,GAAG,gBAAgB;AAAA,IACf,GAAG,KAAK,IAAI,SAAS,GAAG,WAAW,QAAQ,SAAS,CAAC;AAAA,IACrD,GAAG,KAAK,IAAI,SAAS,GAAG,WAAW,SAAS,SAAS,CAAC;AAAA,EAC1D;AACA,SAAO,KAAK,KAAK,cAAc,KAAKF,eAAc,cAAc,KAAKA,YAAW;AACpF;AACO,IAAM,SAAN,cAAqB,wBAAwB;AAAA,EAChD,YAAY,WAAW,QAAQ;AAC3B,UAAM,SAAS;AACf,SAAK,YAAY,QAAM;AACnB,UAAI,CAAC,GAAG,QAAQ,OAAO;AACnB;AAAA,MACJ;AACA,YAAMG,aAAY,KAAK,gBAAgB,eAAe,GAAG,QAAQ;AACjE,UAAI,YAAY,aAAa,OAAO,SAC9BA,WAAU,UAAU,aACpBA,WAAU,UAAU,YAAY,IAAI,aAAa,EAAE;AACzD,UAAI,WAAW;AACX;AAAA,MACJ;AACA,YAAM,WAAW,aAAa;AAC9B,kBAAY,mBAAmB,KAAK,SAAS,UAAU,aAAa,OAAO,aAAa,OAAO;AAC/F,UAAI,aAAa,OAAO,QAAW;AAC/B,QAAAA,WAAU,UAAU,aAAa;AAAA,MACrC,OACK;AACD,QAAAA,WAAU,UAAU,YAAY,IAAI,aAAa,IAAI,SAAS;AAAA,MAClE;AAAA,IACJ;AACA,SAAK,iBAAiB;AACtB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,OAAO;AACH,SAAK,eAAe,UAAU,aAAa;AAC3C,SAAK,eAAe,UAAU,cAAc,oBAAI,IAAI;AAAA,EACxD;AAAA,EACA,SAAS,IAAI;AACT,QAAI,CAAC,GAAG,QAAQ,OAAO;AACnB;AAAA,IACJ;AACA,OAAG,QAAQ,CAAC;AACZ,UAAM,OAAO,GAAG,YAAY,GAAG,YAAY,KAAK,WAAW,aAAa,UAAU,OAAO;AACzF,QAAI,KAAK,IAAIF,QAAO,KAAK,KAAK,IAAIA,QAAO,KAAK,KAAK,IAAI,WAAW,SAAS,KAAK,IAAI,WAAW,QAAQ;AACnG;AAAA,IACJ;AACA,UAAM,WAAW,GAAG,QAAQ,OAAO,aAAa,SAAS,SAAS,cAAc,GAAG,OAAO,iBAAiBC,cAAa,OAAO,SAAS;AACxI,QAAI;AACJ,QAAI,MAAM;AACN,cAAQ,IAAI,WAAW,KAAK,GAAG,KAAK,GAAG,aAAa,UAAU;AAAA,IAClE,OACK;AACD,cAAQ,IAAI,OAAO,KAAK,GAAG,KAAK,GAAG,WAAW;AAAA,IAClD;AACA,UAAM,QAAQ,UAAU,UAAU,SAAS,MAAM,KAAK;AACtD,eAAW,MAAM,OAAO;AACpB,YAAM,WAAW,GAAG,QAAQ;AAC5B,UAAI,OAAO,MACP,EAAC,qCAAU,WACX,SAAS,OAAO,SAAS,MACzB,GAAG,YACH,GAAG,aACH,CAAC,GAAG,SACJ,GAAG,MAAM,KAAK,OAAK,EAAE,gBAAgB,EAAE,KACvC,GAAG,MAAM,KAAK,OAAK,EAAE,gBAAgB,EAAE,GAAG;AAC1C;AAAA,MACJ;AACA,YAAM,OAAO,GAAG,YAAY;AAC5B,UAAI,KAAK,IAAID,QAAO,KAAK,KAAK,IAAIA,QAAO,KAAK,KAAK,IAAI,WAAW,SAAS,KAAK,IAAI,WAAW,QAAQ;AACnG;AAAA,MACJ;AACA,YAAM,WAAW,gBAAgB,MAAM,MAAM,aAAa,YAAY,QAAQ,SAAS,IAAI;AAC3F,UAAI,WAAW,aAAa;AACxB;AAAA,MACJ;AACA,YAAM,eAAe,gBAAgB,WAAW,eAAe;AAC/D,WAAK,UAAU,EAAE;AACjB,SAAG,MAAM,KAAK;AAAA,QACV,aAAa;AAAA,QACb,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAnGxB;AAoGQ,WAAO,CAAC,GAAC,cAAS,QAAQ,UAAjB,mBAAwB;AAAA,EACrC;AAAA,EACA,qBAAqB,YAAY,SAAS;AACtC,QAAI,CAAC,QAAQ,OAAO;AAChB,cAAQ,QAAQ,IAAI,MAAM;AAAA,IAC9B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,MAAM,KAAK,iCAAQ,KAAK;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,EACR;AACJ;;;AC/GA,eAAsB,qBAAqB,QAAQ,UAAU,MAAM;AAC/D,QAAM,OAAO,cAAc,kBAAkB,OAAO,cAAc;AAC9D,WAAO,QAAQ,QAAQ,IAAI,OAAO,WAAW,MAAM,CAAC;AAAA,EACxD,GAAG,OAAO;AACd;;;ACJO,SAAS,aAAa,SAAS,IAAI,IAAI,IAAI;AAC9C,UAAQ,UAAU;AAClB,UAAQ,OAAO,GAAG,GAAG,GAAG,CAAC;AACzB,UAAQ,OAAO,GAAG,GAAG,GAAG,CAAC;AACzB,UAAQ,OAAO,GAAG,GAAG,GAAG,CAAC;AACzB,UAAQ,UAAU;AACtB;AACO,SAAS,aAAa,QAAQ;AACjC,MAAI,QAAQ;AACZ,QAAM,EAAE,OAAO,KAAK,QAAQ,aAAa,SAAS,YAAY,OAAO,gBAAgB,WAAW,SAAS,MAAM,IAAI;AACnH,MAAI,YAAY,OAAO,GAAG,KAAK,aAAa;AACxC,aAAS,SAAS,OAAO,GAAG;AAC5B,YAAQ;AAAA,EACZ,WACS,MAAM,MAAM;AACjB,QAAI;AACJ,QAAI;AACJ,UAAM,QAAQ;AAAA,MACV,GAAG,IAAI,IAAI,WAAW;AAAA,MACtB,GAAG,IAAI;AAAA,IACX;AACA,UAAM,KAAK,aAAa,OAAO,KAAK;AACpC,QAAI,GAAG,YAAY,aAAa;AAC5B,YAAM,KAAK,MAAM,IAAK,GAAG,KAAK,GAAG,KAAM,MAAM;AAC7C,YAAM,EAAE,GAAG,GAAG,GAAG,GAAG;AACpB,YAAM,EAAE,GAAG,WAAW,OAAO,GAAG,GAAG;AAAA,IACvC,OACK;AACD,YAAM,QAAQ;AAAA,QACV,GAAG,IAAI;AAAA,QACP,GAAG,IAAI,IAAI,WAAW;AAAA,MAC1B;AACA,YAAM,KAAK,aAAa,OAAO,KAAK;AACpC,UAAI,GAAG,YAAY,aAAa;AAC5B,cAAM,KAAK,MAAM,IAAK,GAAG,KAAK,GAAG,KAAM,MAAM;AAC7C,cAAM,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG;AAC7B,cAAM,EAAE,GAAG,IAAI,GAAG,EAAE;AACpB,cAAM,EAAE,GAAG,IAAI,GAAG,WAAW,OAAO;AAAA,MACxC,OACK;AACD,cAAM,QAAQ;AAAA,UACV,GAAG,IAAI,IAAI,WAAW;AAAA,UACtB,GAAG,IAAI,IAAI,WAAW;AAAA,QAC1B;AACA,cAAM,KAAK,aAAa,OAAO,KAAK;AACpC,YAAI,GAAG,YAAY,aAAa;AAC5B,gBAAM,KAAK,MAAM,IAAK,GAAG,KAAK,GAAG,KAAM,MAAM;AAC7C,gBAAM,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG;AAC7B,gBAAM,EAAE,GAAG,IAAI,GAAG,GAAG;AACrB,gBAAM,EAAE,GAAG,IAAI,IAAI,WAAW,OAAO,GAAG,IAAI,IAAI,WAAW,OAAO;AAAA,QACtE;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,OAAO,KAAK;AACZ,eAAS,SAAS,OAAO,GAAG;AAC5B,eAAS,SAAS,KAAK,GAAG;AAC1B,cAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,CAAC,OAAO;AACR;AAAA,EACJ;AACA,UAAQ,YAAY;AACpB,MAAI,eAAe,QAAQ;AACvB,YAAQ,2BAA2B,eAAe;AAAA,EACtD;AACA,UAAQ,cAAc,gBAAgB,WAAW,OAAO;AACxD,QAAM,EAAE,OAAO,IAAI;AACnB,MAAI,OAAO,QAAQ;AACf,UAAM,cAAc,gBAAgB,QAAQ,OAAO,KAAK;AACxD,QAAI,aAAa;AACb,cAAQ,aAAa,OAAO;AAC5B,cAAQ,cAAc,gBAAgB,WAAW;AAAA,IACrD;AAAA,EACJ;AACA,UAAQ,OAAO;AACnB;AACO,SAAS,iBAAiB,QAAQ;AACrC,QAAM,EAAE,SAAS,MAAM,MAAM,MAAM,gBAAgB,eAAe,gBAAgB,IAAI;AACtF,eAAa,SAAS,MAAM,MAAM,IAAI;AACtC,MAAI,eAAe,QAAQ;AACvB,YAAQ,2BAA2B,eAAe;AAAA,EACtD;AACA,UAAQ,YAAY,gBAAgB,eAAe,eAAe;AAClE,UAAQ,KAAK;AACjB;AACO,SAAS,WAAW,KAAK;AAC5B,MAAI,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACxB,SAAO,IAAI,KAAK,GAAG;AACvB;AACO,SAAS,iBAAiB,WAAW,YAAY;AACpD,QAAM,MAAM,WAAW,UAAU,IAAI,OAAK,EAAE,EAAE,CAAC;AAC/C,MAAI,MAAM,WAAW,IAAI,GAAG;AAC5B,MAAI,QAAQ,QAAW;AACnB,UAAM,UAAU;AAChB,eAAW,IAAI,KAAK,GAAG;AAAA,EAC3B;AACA,SAAO;AACX;;;ACjGA,IAAMG,cAAa;AAAnB,IAAsB,WAAW;AAAjC,IAAoCC,eAAc;AAAlD,IAAqDC,SAAO;AAA5D,IAAiE,eAAe;AACzE,IAAM,eAAN,MAAmB;AAAA,EACtB,YAAY,WAAW,QAAQ;AAC3B,SAAK,gBAAgB,CAAC,IAAI,SAAS;AAC/B,YAAM,iBAAiB,GAAG,QAAQ;AAClC,UAAI,EAAC,iDAAgB,SAAQ;AACzB;AAAA,MACJ;AACA,YAAMC,aAAY,KAAK,YAAY,UAAUA,WAAU,eAAe,KAAK,KAAK,aAAa,OAAO,GAAG,YAAY,GAAG,OAAO,GAAG,YAAY;AAC5I,UAAI,UAAU,KAAK;AACnB,MAAAA,WAAU,OAAO,KAAK,SAAO;AAZzC;AAagB,YAAI;AACJ,cAAM,WAAU,QAAG,QAAQ,YAAX,mBAAoB;AACpC,YAAI,mCAAS,QAAQ;AACjB,gBAAM,cAAc,QAAQ,WAAW,aAAa,gBAAgB,KAAK,SAAS,QAAQ,KAAK,GAAG,YAAY,UAAU,IAAI;AAC5H,cAAI,aAAa,YAAY;AACzB,wBAAY;AACZ,sBAAU,cAAc,QAAQ,OAAO;AAAA,UAC3C;AAAA,QACJ;AACA,YAAI,CAAC,WAAW;AACZ,gBAAM,YAAY,eAAe,OAAO,SAClCA,WAAU,UAAU,YAAY,IAAI,eAAe,EAAE,IACrDA,WAAU,UAAU;AAC1B,sBAAY,aAAa,IAAI,IAAI,SAAS;AAAA,QAC9C;AACA,YAAI,CAAC,WAAW;AACZ;AAAA,QACJ;AACA,cAAM,QAAQ,GAAG,OAAO,cAAc,UAAU,cAAc,GAAG,OAAO,iBAAiBF,cAAa,EAAE,eAAe,IAAI;AAC3H,qBAAa;AAAA,UACT,SAAS;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP,KAAK;AAAA,UACL,QAAQ,KAAK;AAAA,UACb;AAAA,UACA,YAAYE,WAAU,OAAO;AAAA,UAC7B,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AACA,SAAK,oBAAoB,CAAC,IAAI,OAAO,UAAU;AAC3C,YAAM,eAAe,GAAG,QAAQ;AAChC,UAAI,EAAC,6CAAc,SAAQ;AACvB;AAAA,MACJ;AACA,YAAM,kBAAkB,aAAa;AACrC,UAAI,CAAC,gBAAgB,QAAQ;AACzB;AAAA,MACJ;AACA,YAAMA,aAAY,KAAK,YAAY,UAAUA,WAAU,eAAe,KAAK,MAAM,aAAa,KAAK,MAAM,aAAa,kBAAkB,gBAAgB,YAAY,MAAM,UAAU,MAAM,WAAWD;AACrM,UAAI,mBAAmBF,aAAY;AAC/B;AAAA,MACJ;AACA,MAAAG,WAAU,OAAO,KAAK,SAAO;AACzB,cAAM,OAAO,GAAG,YAAY,GAAG,OAAO,GAAG,YAAY,GAAG,OAAO,GAAG,YAAY,GAAG,gBAAgB,GAAG,OAAO,iBAAiBF;AAC5H,YAAI,YAAY,MAAM,IAAI,IAAI,iBAC1B,YAAY,MAAM,IAAI,IAAI,iBAC1B,YAAY,MAAM,IAAI,IAAI,eAAe;AACzC;AAAA,QACJ;AACA,YAAI,gBAAgB,gBAAgB,KAAK,SAAS,gBAAgB,KAAK;AACvE,YAAI,CAAC,eAAe;AAChB,gBAAM,YAAY,aAAa,OAAO,SAChCE,WAAU,UAAU,YAAY,IAAI,aAAa,EAAE,IACnDA,WAAU,UAAU;AAC1B,0BAAgB,aAAa,IAAI,IAAI,SAAS;AAAA,QAClD;AACA,YAAI,CAAC,eAAe;AAChB;AAAA,QACJ;AACA,yBAAiB;AAAA,UACb,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA,gBAAgB,QAAQ;AAAA,UACxB;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AACA,SAAK,iBAAiB,CAAC,SAAS,IAAI,MAAM,YAAY;AAxF9D;AAyFY,YAAM,KAAK,KAAK;AAChB,UAAI,IAAE,aAAQ,UAAR,mBAAe,UAAU,aAAU,QAAG,QAAQ,UAAX,mBAAkB,UAAU,UAAS;AAC1E;AAAA,MACJ;AACA,YAAM,YAAW,QAAG,UAAH,mBAAU,OAAO,OAAK;AACnC,cAAM,WAAW,KAAK,kBAAkB,IAAI,EAAE,WAAW,GAAG,WAAW;AACvE,eAAQ,GAAG,QAAQ,SACf,YAAY,GAAG,QAAQ,MAAM,aAC7B,QAAQ,UAAU,OAAK,EAAE,gBAAgB,EAAE,WAAW,KAAK;AAAA,MACnE;AACA,UAAI,EAAC,qCAAU,SAAQ;AACnB;AAAA,MACJ;AACA,iBAAW,UAAU,UAAU;AAC3B,cAAM,KAAK,OAAO,aAAa,eAAe,KAAK,sBAAsB,IAAI,IAAI,EAAE;AACnF,YAAI,eAAe,QAAQ,MAAM,UAAU,WAAW;AAClD;AAAA,QACJ;AACA,aAAK,kBAAkB,IAAI,MAAM,MAAM;AAAA,MAC3C;AAAA,IACJ;AACA,SAAK,oBAAoB,CAAC,IAAI,OAAO;AACjC,aAAO,iBAAiB,CAAC,IAAI,EAAE,GAAG,KAAK,OAAO,KAAK;AAAA,IACvD;AACA,SAAK,wBAAwB,CAAC,IAAI,IAAI,OAAO;AACzC,aAAO,iBAAiB,CAAC,IAAI,IAAI,EAAE,GAAG,KAAK,OAAO,SAAS;AAAA,IAC/D;AACA,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,MACV,OAAO,oBAAI,IAAI;AAAA,MACf,WAAW,oBAAI,IAAI;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,aAAa,SAAS,UAAU;AAC5B,UAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,QAAI,EAAC,+BAAO,SAAQ;AAChB;AAAA,IACJ;AACA,UAAM,UAAU,MAAM,OAAO,OAAK,QAAQ,UACrC,QAAQ,MAAM,aAAa,gBACxB,KAAK,kBAAkB,UAAU,EAAE,WAAW,KAAK,QAAQ,MAAM,UAAU;AACnF,eAAW,QAAQ,SAAS;AACxB,WAAK,eAAe,SAAS,UAAU,MAAM,OAAO;AACpD,UAAI,KAAK,UAAUH,gBAAe,SAAS,OAAO,cAAc,YAAY,UAAU;AAClF,aAAK,cAAc,UAAU,IAAI;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,OAAO;AACT,SAAK,OAAO,QAAQ,oBAAI,IAAI;AAC5B,SAAK,OAAO,YAAY,oBAAI,IAAI;AAChC,UAAM,QAAQ,QAAQ;AAAA,EAC1B;AAAA,EACA,gBAAgB,UAAU;AACtB,aAAS,QAAQ,CAAC;AAClB,QAAI,CAAC,SAAS,QAAQ,OAAO;AACzB;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,WAAW,OAAO,YAAY,EAAE,OAAO,IAAI,UAAU,EAAE,UAAU,MAAM,IAAI,SAAS,QAAQ;AAC/G,WAAO,gBAAgB,WAAW;AAClC,WAAO,aAAa,QAAQ;AAAA,EAChC;AAAA,EACA,kBAAkB,UAAU;AACxB,aAAS,QAAQ,CAAC;AAAA,EACtB;AACJ;;;AC1JO,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,QAAQ;AAChB,SAAK,KAAK;AACV,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,UAAU,WAAW;AACjB,WAAO,QAAQ,QAAQ,IAAI,aAAa,WAAW,KAAK,OAAO,CAAC;AAAA,EACpE;AAAA,EACA,cAAc;AAAA,EACd;AAAA,EACA,cAAc;AACV,WAAO;AAAA,EACX;AACJ;;;ACbA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,QAAM,SAAS,IAAI,YAAY,MAAM;AACrC,QAAM,OAAO,UAAU,QAAQ,OAAO;AAC1C;;;ACFA,eAAsB,8BAA8B,QAAQ,UAAU,MAAM;AACxE,SAAO,aAAa,OAAO;AAC3B,QAAM,qBAAqB,QAAQ,OAAO;AAC1C,QAAM,gBAAgB,QAAQ,OAAO;AACzC;;;ACLA,IAAM,QAAQ;AAAd,IAAmBI,UAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AAAzC,IAA4C,cAAc;AACnD,SAAS,YAAY,MAAM,OAAO,MAAM;AAC3C,QAAM,EAAE,QAAQ,IAAI,MAAM,YAAY,KAAK,MAAM,YAAY,KAAK,MAAM,aAAa,eAAe,KAAK,MAAM,YAAY,KAAK,MAAM,aAAa,uBAAwB,SAAS,eAAe,eAAgB,cAAc,gBAAgB,KAAK,KAAK,SAAS,oBAAoB;AACxR,MAAI,CAAC,SAAS;AACV;AAAA,EACJ;AACA,UAAQ,UAAU;AAClB,UAAQ,UAAU,MAAM,GAAG,MAAM,CAAC;AAClC,UAAQ,OAAOA,QAAO,GAAGA,QAAO,CAAC;AACjC,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAQ,OAAO,KAAK,QAAQA,QAAO,CAAC;AACpC,YAAQ,UAAU,KAAK,QAAQA,QAAO,CAAC;AACvC,YAAQ,OAAO,aAAa;AAAA,EAChC;AACJ;;;ACbA,IAAM,eAAe;AACd,IAAM,oBAAN,MAAwB;AAAA,EAC3B,KAAK,MAAM;AACP,UAAM,EAAE,UAAU,OAAO,IAAI,MAAM,QAAQ,KAAK,UAAU,UAAU,MAAM,GAAG,OAAO,KAAK,aAAa,UAAU,MAAM;AACtH,gBAAY,MAAM,OAAO,IAAI;AAAA,EACjC;AAAA,EACA,cAAc,UAAU;AACpB,UAAM,UAAU,SAAS;AACzB,WAAO,KAAK,MAAM,eAAc,mCAAS,UAAS,YAAY,CAAC;AAAA,EACnE;AACJ;;;ACXA,IAAM,oBAAoB;AAA1B,IAA+B,UAAU;AAAzC,IAA+C,cAAc;AACtD,IAAM,gBAAN,cAA4B,kBAAkB;AAAA,EACjD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,aAAa,CAAC,SAAS;AAAA,EAChC;AAAA,EACA,UAAU,UAAU,QAAQ;AACxB,WAAO;AAAA,MACH,GAAG,CAAC,UAAU,SAAS,QAAQ;AAAA,MAC/B,GAAG,CAAC,UAAU,UAAU;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,aAAa,UAAU,QAAQ;AAC3B,UAAMC,SAAQ,SAAS;AACvB,WAAO;AAAA,MACH,OAAO;AAAA,QACH,aAAa;AAAA,QACb,WAAWA;AAAA,MACf;AAAA,MACA,QAAS,SAAS,WAAYA,SAAQ;AAAA,IAC1C;AAAA,EACJ;AACJ;;;ACtBA,IAAMC,WAAU;AAAhB,IAAsBC,SAAQ;AAA9B,IAAiCC,WAAS;AACnC,IAAM,iBAAN,cAA6B,kBAAkB;AAAA,EAClD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,aAAa,CAAC,UAAU;AAAA,EACjC;AAAA,EACA,UAAU,UAAU,QAAQ;AACxB,WAAO;AAAA,MACH,GAAG,CAAC;AAAA,MACJ,GAAG,SAASF;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,gBAAgB;AACZ,WAAOC;AAAA,EACX;AAAA,EACA,aAAa,UAAU,QAAQ;AAC3B,UAAM,WAAW,SAASC;AAC1B,WAAO;AAAA,MACH,OAAO;AAAA,QACH,aAAa;AAAA,QACb,WAAW;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ;;;ACxBA,eAAsB,wBAAwB,QAAQ,UAAU,MAAM;AAClE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,cAAc,GAAG,OAAO;AACtD;AACA,eAAsB,kBAAkB,QAAQ,UAAU,MAAM;AAC5D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,eAAe,GAAG,OAAO;AACvD;AACA,eAAsB,iBAAiB,QAAQ,UAAU,MAAM;AAC3D,SAAO,aAAa,OAAO;AAC3B,QAAM,wBAAwB,QAAQ,OAAO;AAC7C,QAAM,kBAAkB,QAAQ,OAAO;AAC3C;;;ACbO,IAAM,kBAAN,MAAsB;AAAA,EACzB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACvBO,IAAM,SAAN,cAAqB,gBAAgB;AAAA,EACxC,cAAc;AACV,UAAM;AACN,SAAK,YAAY,IAAI,gBAAgB;AACrC,SAAK,YAAY,gBAAgB;AACjC,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,UAAM,KAAK,IAAI;AACf,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,SAAK,UAAU,KAAK,KAAK,SAAS;AAClC,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACrBA,IAAMC,WAAS;AAAf,IAAkBC,YAAW,KAAK,KAAKD;AAAvC,IAA+CE,YAAW;AAA1D,IAA6D,cAAc;AACpE,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,WAAW;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,gBAAgB,SAAS,QAAQ;AACvC,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AACA,aAAS,SAAS;AAAA,MACd,QAAQ,cAAc,UAAU;AAAA,MAChC,OAAO,SAAS,cAAc,cAAc,KAAK,CAAC;AAAA,MAClD,KAAK;AAAA,MACL,KAAKD;AAAA,IACT;AACA,aAAS,eAAe,cAAc;AACtC,QAAI,kBAAkB,cAAc;AACpC,QAAI,oBAAoB,gBAAgB,QAAQ;AAC5C,YAAM,QAAQ,KAAK,MAAM,UAAU,IAAID,QAAM,GAAG,WAAW;AAC3D,wBAAkB,QAAQ,WAAW,gBAAgB,mBAAmB,gBAAgB;AAAA,IAC5F;AACA,YAAQ,iBAAiB;AAAA,MACrB,KAAK,gBAAgB;AAAA,MACrB,KAAK;AACD,iBAAS,OAAO,SAAS,gBAAgB;AACzC;AAAA,MACJ,KAAK,gBAAgB;AACjB,iBAAS,OAAO,SAAS,gBAAgB;AACzC;AAAA,IACR;AACA,UAAM,kBAAkB,cAAc;AACtC,QAAI,gBAAgB,QAAQ;AACxB,eAAS,OAAO,QAAQE,YAAW,cAAc,gBAAgB,KAAK;AACtE,eAAS,OAAO,WACX,cAAc,gBAAgB,KAAK,IAAI,cAAe,KAAK,UAAU,OAAO;AACjF,UAAI,CAAC,gBAAgB,MAAM;AACvB,iBAAS,OAAO,YAAY,UAAU;AAAA,MAC1C;AAAA,IACJ;AACA,aAAS,WAAW,SAAS,OAAO;AAAA,EACxC;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,SAAS,SAAS,QAAQ;AAChC,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AACA,WAAO,CAAC,SAAS,aAAa,CAAC,SAAS,aAAa,CAAC,CAAC,OAAO,SAAS,OAAO,UAAU,UAAU,OAAO;AAAA,EAC7G;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS,IAAI,OAAO;AAAA,IAChC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO,KAAK,iCAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,aAAS,aAAa,CAAC,CAAC,SAAS;AACjC,QAAI,CAAC,SAAS,QAAQ;AAClB;AAAA,IACJ;AACA,oBAAgB,UAAU,SAAS,QAAQ,OAAO,YAAY,MAAM,KAAK;AACzE,aAAS,WAAW,SAAS,OAAO;AAAA,EACxC;AACJ;;;ACrEA,eAAsB,kBAAkB,QAAQ,UAAU,MAAM;AAC5D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,UAAU,eAAa;AACnD,WAAO,QAAQ,QAAQ,IAAI,cAAc,SAAS,CAAC;AAAA,EACvD,GAAG,OAAO;AACd;;;ACNA,IAAM,mBAAmB;AAAzB,IAA4B,YAAY,KAAK,KAAK,gBAAgB;AAAlE,IAAqEC,WAAS;AACvE,SAAS,WAAW,MAAM;AAC7B,QAAM,EAAE,SAAS,OAAO,IAAI,MAAM,cAAc,SAAS,WAAW,gBAAgB,cAAcA;AAClG,UAAQ,KAAK,CAAC,aAAa,CAAC,aAAa,eAAe,aAAa;AACzE;;;ACHA,IAAMC,SAAQ;AACP,IAAM,eAAN,MAAmB;AAAA,EACtB,cAAc;AACV,SAAK,aAAa,CAAC,QAAQ,QAAQ;AAAA,EACvC;AAAA,EACA,KAAK,MAAM;AACP,eAAW,IAAI;AAAA,EACnB;AAAA,EACA,gBAAgB;AACZ,WAAOA;AAAA,EACX;AACJ;;;ACXA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,aAAa,GAAG,OAAO;AACrD;;;ACJA,IAAM,eAAe;AAArB,IAAwBC,UAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AACvC,SAAS,SAAS,MAAM;AAC3B,QAAM,EAAE,SAAS,UAAU,OAAO,IAAI,MAAMC,SAAQ,SAAS,OAAO,QAAQ,SAAS,aAAa;AAClG,UAAQ,OAAOD,QAAO,GAAGA,QAAO,IAAI,MAAM;AAC1C,WAAS,IAAI,GAAG,IAAIC,QAAO,KAAK;AAC5B,YAAQ,OAAO,KAAK,KAAKA,MAAK;AAC9B,YAAQ,OAAOD,QAAO,GAAGA,QAAO,IAAI,SAAS,KAAK;AAClD,YAAQ,OAAO,KAAK,KAAKC,MAAK;AAC9B,YAAQ,OAAOD,QAAO,GAAGA,QAAO,IAAI,MAAM;AAAA,EAC9C;AACJ;;;ACRA,IAAME,gBAAe;AAArB,IAAwBC,gBAAe;AAChC,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,SAAK,aAAa,CAAC,MAAM;AAAA,EAC7B;AAAA,EACA,KAAK,MAAM;AACP,aAAS,IAAI;AAAA,EACjB;AAAA,EACA,cAAc,UAAU;AACpB,UAAM,OAAO,SAAS;AACtB,WAAO,KAAK,MAAM,eAAc,6BAAM,UAASA,aAAY,CAAC;AAAA,EAChE;AAAA,EACA,aAAa,WAAW,UAAU;AAC9B,UAAM,OAAO,SAAS;AACtB,aAAS,YAAY,eAAc,6BAAM,UAASD,aAAY;AAAA,EAClE;AACJ;;;ACjBA,eAAsB,cAAc,QAAQ,UAAU,MAAM;AACxD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,WAAW,GAAG,OAAO;AACnD;;;ACHA,IAAME,kBAAiB;AAChB,IAAM,qBAAN,MAAyB;AAAA,EAC5B,YAAY,WAAW,QAAQ;AAC3B,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,UAAU;AAPnB;AAQQ,UAAM,YAAY,KAAK,YAAY,UAAU,SAAS;AACtD,UAAM,SAAS,yBAAyB,QAAQ,QAAQ,SAAS,IAAI,QAAQ,gBAAgB;AAC7F,aAAS,cAAc,cAAc,OAAO,KAAK,IAAI,UAAU,OAAO;AACtE,aAAS,gBAAgB,cAAc,OAAO,WAAWA,eAAc;AACvE,aAAS,mBAAkB,YAAO,UAAP,mBAAc;AACzC,UAAM,iBAAiB,gBAAgB,KAAK,SAAS,OAAO,KAAK,KAAK,SAAS,aAAa;AAC5F,QAAI,gBAAgB;AAChB,eAAS,cAAc,uBAAuB,gBAAgB,SAAS,iBAAiB,UAAU,OAAO,YAAY;AAAA,IACzH;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,QAAQ,SAAS,iBAAiB,EAAE,YAAY,IAAI;AAC1D,WAAQ,CAAC,SAAS,aACd,CAAC,SAAS,YACV,CAAC,CAAC,WACA,2CAAa,EAAE,WAAU,UAAa,YAAY,EAAE,WACjD,2CAAa,EAAE,WAAU,UAAa,YAAY,EAAE,WACpD,2CAAa,EAAE,WAAU,UAAa,YAAY,EAAE;AAAA,EACjE;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,gBAAY,SAAS,aAAa,KAAK;AAAA,EAC3C;AACJ;;;AChCA,eAAsB,uBAAuB,QAAQ,UAAU,MAAM;AACjE,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,eAAe,eAAa;AACxD,WAAO,QAAQ,QAAQ,IAAI,mBAAmB,WAAW,MAAM,CAAC;AAAA,EACpE,GAAG,OAAO;AACd;;;ACmBA,eAAsB,SAAS,QAAQ,UAAU,MAAM;AACnD,SAAO,aAAa,OAAO;AAC3B,QAAM,kBAAkB,QAAQ,KAAK;AACrC,QAAM,+BAA+B,QAAQ,KAAK;AAClD,QAAM,8BAA8B,QAAQ,KAAK;AACjD,QAAM,8BAA8B,QAAQ,KAAK;AACjD,QAAM,+BAA+B,QAAQ,KAAK;AAClD,QAAM,4BAA4B,QAAQ,KAAK;AAC/C,QAAM,6BAA6B,QAAQ,KAAK;AAChD,QAAM,4BAA4B,QAAQ,KAAK;AAC/C,QAAM,8BAA8B,QAAQ,KAAK;AACjD,QAAM,+BAA+B,QAAQ,KAAK;AAClD,QAAM,4BAA4B,QAAQ,KAAK;AAC/C,QAAM,gCAAgC,QAAQ,KAAK;AACnD,QAAM,mCAAmC,QAAQ,KAAK;AACtD,QAAM,8BAA8B,QAAQ,KAAK;AACjD,QAAM,qBAAqB,QAAQ,KAAK;AACxC,QAAM,eAAe,QAAQ,KAAK;AAClC,QAAM,eAAe,QAAQ,KAAK;AAClC,QAAM,cAAc,QAAQ,KAAK;AACjC,QAAM,iBAAiB,QAAQ,KAAK;AACpC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,cAAc,QAAQ,KAAK;AACjC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,kBAAkB,QAAQ,KAAK;AACrC,QAAM,uBAAuB,QAAQ,KAAK;AAC1C,QAAM,UAAU,QAAQ,OAAO;AACnC;;;ACnDA,IAAMC,WAAS;AAAf,IAAkBC,SAAO;AAClB,SAAS,SAAS,MAAM;AAC3B,QAAM,EAAE,SAAS,UAAU,QAAQ,QAAQ,IAAI,MAAM,YAAY,SAAS;AAC1E,MAAI,CAAC,WAAW;AACZ;AAAA,EACJ;AACA,QAAM,WAAW,UAAU;AAC3B,MAAI,aAAa,QAAW;AACxB;AAAA,EACJ;AACA,MAAI,SAAS,SAAS,QAAW;AAC7B,aAAS,OAAO,yBAAyB,UAAU,SAAS,eAAe;AAAA,EAC/E;AACA,QAAM,OAAO,SAAS,MAAM,QAAQ,UAAU,SAAS,IAAI,SAAS,UAAU,UAAU,OAAO,OAAO,KAAK,MAAM,MAAM,IAAID,UAAQ,OAAO,UAAU,QAAQ,WAAW,OAAO,SAAS;AACvL,QAAM,QAAQ,6BAAM,MAAM;AAC1B,MAAI,CAAC,OAAO;AACR;AAAA,EACJ;AACA,UAAQ,OAAO,GAAG,KAAK,IAAI,MAAM,IAAI,IAAI,OAAO,IAAI;AACpD,UAAQ,cAAc;AACtB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,IAAAE,UAAS,SAAS,MAAM,CAAC,GAAG,QAAQ,SAAS,GAAG,IAAI;AAAA,EACxD;AACA,UAAQ,cAAc;AAC1B;AACA,SAASA,UAAS,SAAS,MAAM,QAAQ,SAAS,OAAO,MAAM;AAC3D,QAAM,UAAU,KAAK,SAAS,SAASD,QAAM,MAAM;AAAA,IAC/C,GAAG,CAAC;AAAA,IACJ,GAAG,SAASA;AAAA,EAChB,GAAG,WAAW,SAASD;AACvB,MAAI,MAAM;AACN,YAAQ,SAAS,MAAM,IAAI,GAAG,IAAI,IAAI,WAAW,KAAK;AAAA,EAC1D,OACK;AACD,YAAQ,WAAW,MAAM,IAAI,GAAG,IAAI,IAAI,WAAW,KAAK;AAAA,EAC5D;AACJ;;;ACnCO,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,SAAK,aAAa,CAAC,QAAQ,aAAa,QAAQ,gBAAgB;AAAA,EACpE;AAAA,EACA,KAAK,MAAM;AACP,aAAS,IAAI;AAAA,EACjB;AAAA,EACA,MAAM,KAAK,WAAW;AAClB,UAAM,UAAU,UAAU,eAAe,EAAE,WAAW,IAAI;AAC1D,QAAI,WAAW,KAAK,OAAK,UAAU,GAAG,QAAQ,UAAU,MAAM,IAAI,CAAC,GAAG;AAClE,YAAM,eAAe,WAChB,IAAI,OAAK,QAAQ,UAAU,MAAM,QAAQ,CAAC,CAAC,EAC3C,KAAK,OAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;AACjC,gCAA0B,cAAc,WAAS;AAC7C,iBAAS,KAAK,SAAS,MAAM,MAAM,MAAM,MAAM,CAAC;AAAA,MACpD,CAAC;AACD,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,aAAa,WAAW,UAAU;AAC9B,QAAI,CAAC,SAAS,SAAS,CAAC,KAAK,WAAW,SAAS,SAAS,KAAK,GAAG;AAC9D;AAAA,IACJ;AACA,UAAM,YAAY,SAAS;AAC3B,QAAI,cAAc,QAAW;AACzB;AAAA,IACJ;AACA,UAAM,WAAW,UAAU;AAC3B,QAAI,aAAa,QAAW;AACxB;AAAA,IACJ;AACA,aAAS,OAAO,yBAAyB,UAAU,SAAS,eAAe;AAAA,EAC/E;AACJ;;;AClCA,eAAsB,cAAc,QAAQ,UAAU,MAAM;AACxD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,WAAW,GAAG,OAAO;AACnD;;;ACJO,IAAI;AAAA,CACV,SAAUG,gBAAe;AACtB,EAAAA,eAAc,WAAW,IAAI;AAC7B,EAAAA,eAAc,kBAAkB,IAAI;AACpC,EAAAA,eAAc,QAAQ,IAAI;AAC9B,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;;;ACJjC,IAAM,gBAAN,MAAoB;AAAA,EACvB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;;;ACtBO,IAAM,OAAN,cAAmB,gBAAgB;AAAA,EACtC,cAAc;AACV,UAAM;AACN,SAAK,YAAY,IAAI,cAAc;AACnC,SAAK,YAAY,cAAc;AAC/B,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,KAAK,MAAM;AACP,UAAM,KAAK,IAAI;AACf,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,SAAK,UAAU,KAAK,KAAK,SAAS;AAClC,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AACJ;;;ACrBA,IAAMC,YAAW;AAAjB,IAAoBC,WAAS;AAA7B,IAAgCC,YAAW,KAAK,KAAKD;AAArD,IAA6DE,YAAW;AACjE,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,WAAW;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,mBAAmB,UAAU;AARjC;AASQ,UAAM,SAAO,cAAS,SAAT,mBAAe,WAAU,SAAS;AAC/C,WAAO;AAAA,MACH,GAAG,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,eAAe;AAAA,MACrD,GAAG,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,eAAe;AAAA,IACzD;AAAA,EACJ;AAAA,EACA,KAAK,UAAU;AAfnB;AAgBQ,UAAM,cAAc,SAAS,QAAQ;AACrC,QAAI,CAAC,aAAa;AACd;AAAA,IACJ;AACA,aAAS,OAAO;AAAA,MACZ,QAAQ,YAAY;AAAA,MACpB,OAAO,SAAS,cAAc,YAAY,KAAK,CAAC;AAAA,MAChD,cAAc,UAAU,KAAK,OAAOH,YAAW,CAACA;AAAA,MAChD,cAAc,UAAU,KAAK,OAAOA,YAAW,CAACA;AAAA,MAChD,KAAK;AAAA,MACL,KAAKE;AAAA,IACT;AACA,QAAI,gBAAgB,YAAY;AAChC,QAAI,kBAAkB,cAAc,QAAQ;AACxC,YAAM,QAAQ,KAAK,MAAM,UAAU,IAAID,QAAM,GAAG,WAAW;AAC3D,sBAAgB,QAAQ,WAAW,cAAc,mBAAmB,cAAc;AAAA,IACtF;AACA,YAAQ,eAAe;AAAA,MACnB,KAAK,cAAc;AAAA,MACnB,KAAK;AACD,iBAAS,KAAK,SAAS,gBAAgB;AACvC;AAAA,MACJ,KAAK,cAAc;AACf,iBAAS,KAAK,SAAS,gBAAgB;AACvC;AAAA,IACR;AACA,UAAM,iBAAgB,cAAS,QAAQ,SAAjB,mBAAuB;AAC7C,QAAI,+CAAe,QAAQ;AACvB,eAAS,KAAK,QAAQD,YAAW,cAAc,cAAc,KAAK;AAClE,eAAS,KAAK,WACT,cAAc,cAAc,KAAK,IAAIG,YAAY,KAAK,UAAU,OAAO;AAC5E,UAAI,CAAC,cAAc,MAAM;AACrB,iBAAS,KAAK,YAAY,UAAU;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU,UAAU;AApDxB;AAqDQ,UAAM,iBAAgB,cAAS,QAAQ,SAAjB,mBAAuB;AAC7C,WAAO,CAAC,SAAS,aAAa,CAAC,SAAS,YAAY,CAAC,EAAC,+CAAe;AAAA,EACzE;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,MAAM;AACf,cAAQ,OAAO,IAAI,KAAK;AAAA,IAC5B;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,KAAK,KAAK,iCAAQ,IAAI;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,MAAM,OAAO,UAAU,OAAO;AAC1B,QAAI,CAAC,KAAK,UAAU,QAAQ,KAAK,CAAC,SAAS,MAAM;AAC7C;AAAA,IACJ;AACA,oBAAgB,UAAU,SAAS,MAAM,OAAO,YAAY,MAAM,KAAK;AACvE,UAAM,QAAQ,QAAQ;AAAA,EAC1B;AACJ;;;ACtEA,eAAsB,gBAAgB,QAAQ,UAAU,MAAM;AAC1D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,QAAQ,eAAa;AACjD,WAAO,QAAQ,QAAQ,IAAI,YAAY,SAAS,CAAC;AAAA,EACrD,GAAG,OAAO;AACd;;;ACLO,IAAM,gBAAN,MAAoB;AAAA,EACvB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK,KAAK;AAAA,IAC3D;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,cAAc,KAAK,OAAO;AAAA,IAC7C;AAAA,EACJ;AACJ;;;ACtBO,IAAM,UAAN,MAAc;AAAA,EACjB,cAAc;AACV,SAAK,QAAQ,IAAI,cAAc;AAC/B,SAAK,YAAY,IAAI,cAAc;AAAA,EACvC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,SAAK,MAAM,KAAK,KAAK,KAAK;AAC1B,SAAK,UAAU,KAAK,KAAK,SAAS;AAAA,EACtC;AACJ;;;ACZO,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,QAAQ;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,eAAe,UAAU,SAAS,QAAQ,SAAS;AAC/C,UAAM,WAAW,SAAS,SAAS,iBAAiB,SAAS;AAC7D,QAAI,CAAC,gBAAgB;AACjB,aAAO,CAAC;AAAA,IACZ;AACA,UAAM,UAAU,eAAe,WAAW,YAAY,QAAQ,UAAU,UAAU,IAAI,QAAQ,WAAW,gBAAgB,SAAS,QAAQ,QAAQ,UAAU,GAAG,kBAAkB,UAAU,SAAS,iBAAiB,cAAc,aAAa,mBAAmB,YAAY,cAAc,QAAQ,OAAO,IAAI,iBAAiB,SAAS,aAAa,gBAAgB,KAAK,SAAS,QAAQ,KAAK,GAAG,eAAe,aAAa,gBAAgB,YAAY,gBAAgB,IAAI,QAAW,MAAM,CAAC,GAAG,eAAe,aAAa;AAClgB,QAAI,OAAO,eAAe,eAAe;AACzC,QAAI,SAAS,eAAe,eAAe;AAC3C,WAAO;AAAA,EACX;AAAA,EACA,MAAM,OAAO;AACT,UAAM,QAAQ,QAAQ;AAAA,EAC1B;AAAA,EACA,UAAU,UAAU;AAChB,UAAM,WAAW,SAAS,SAAS,iBAAiB,SAAS;AAC7D,QAAI,CAAC,gBAAgB;AACjB,aAAO;AAAA,IACX;AACA,WAAO,eAAe,UAAU;AAAA,EACpC;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,SAAS;AAClB,cAAQ,UAAU,IAAI,QAAQ;AAAA,IAClC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,QAAQ,KAAK,iCAAQ,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,MAAM,SAAS;AACX,UAAM,QAAQ,QAAQ;AAAA,EAC1B;AACJ;;;ACpCA,eAAsB,mBAAmB,QAAQ,UAAU,MAAM;AAC7D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,WAAW,MAAM;AAC7C,WAAO,QAAQ,QAAQ,IAAI,eAAe,MAAM,CAAC;AAAA,EACrD,GAAG,OAAO;AACd;;;ACLO,IAAM,cAAN,MAAkB;AAAA,EACrB,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,cAAc,KAAK,IAAI;AAAA,IACvC;AAAA,EACJ;AACJ;;;ACfO,IAAM,SAAN,MAAa;AAAA,EAChB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,QAAQ,IAAI,YAAY;AAAA,EACjC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,IAAI,GAAG;AACd;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK,QAAQ;AAAA,IAC/C;AACA,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,QAAW;AAC1B,UAAI,SAAS,KAAK,KAAK,GAAG;AACtB,aAAK,MAAM,KAAK,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,MACzC,OACK;AACD,cAAM,aAAa,KAAK;AACxB,YAAI,WAAW,QAAQ,QAAW;AAC9B,eAAK,MAAM,KAAK,EAAE,OAAO,WAAW,CAAC;AAAA,QACzC,OACK;AACD,eAAK,MAAM,KAAK,KAAK,KAAK;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AChCA,IAAM,kBAAkB;AAAxB,IAA2BC,WAAS;AAApC,IAAuCC,YAAW,KAAK,KAAKD;AAA5D,IAAoE,iBAAiB;AAC9E,SAAS,aAAa,UAAU,OAAO;AAC1C,QAAM,EAAE,QAAQ,cAAc,IAAI,SAAS,SAAS,EAAE,OAAO,IAAI;AACjE,MAAI,EAAC,+CAAe,WAAU,CAAC,QAAQ;AACnC;AAAA,EACJ;AACA,QAAM,aAAa,OAAO,aAAa,MAAM,QAAQ,YAAY,OAAO,YAAY,MAAM,QAAQ,WAAY,cAAc,SAAS,OAAO,kBAAkB,mBAAmB,MAAM,WAClL,wBAAwB,iBAAiB,MAAMC,WAAU,EAAE,SAAS,IAAI;AAC7E,SAAO,SAAS;AAChB,MAAI,OAAO,QAAQ,KAAK;AACpB,WAAO,SAAS;AAAA,EACpB;AACA,WAAS,KAAK,WAAW,KAAK,IAAI,OAAO,KAAK;AAC9C,WAAS,KAAK,WAAW,KAAK,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC;AAC5D;;;ACZA,IAAMC,WAAS;AAAf,IAAkBC,YAAW,KAAK,KAAKD;AAAvC,IAA+CE,YAAW;AAA1D,IAA+DC,mBAAkB;AAAjF,IAAqFC,mBAAkB;AAChG,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,WAAW;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,KAAK,UAAU;AACX,UAAM,YAAY,SAAS,QAAQ;AACnC,QAAI,uCAAW,QAAQ;AACnB,eAAS,SAAS;AAAA,QACd,OAAO,UAAU,IAAIH;AAAA,QACrB,YAAY,cAAc,UAAU,MAAM,KAAK,IAAIC;AAAA,QACnD,WAAW,cAAc,UAAU,MAAM,IAAI,IAAIC;AAAA,MACrD;AAAA,IACJ,OACK;AACD,eAAS,SAAS;AAAA,QACd,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW;AAAA,MACf;AAAA,IACJ;AACA,aAAS,OAAO,iBACZ,eAAc,uCAAW,aAAYC,gBAAe,IAAI,KAAK,UAAU,OAAO;AAAA,EACtF;AAAA,EACA,UAAU,UAAU;AA3BxB;AA4BQ,WAAO,CAAC,SAAS,aAAa,CAAC,SAAS,YAAY,CAAC,GAAC,cAAS,QAAQ,WAAjB,mBAAyB;AAAA,EACnF;AAAA,EACA,YAAY,YAAY,SAAS;AAC7B,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS,IAAI,OAAO;AAAA,IAChC;AACA,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO,KAAK,iCAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,OAAO;AACpB,QAAI,CAAC,KAAK,UAAU,QAAQ,GAAG;AAC3B;AAAA,IACJ;AACA,iBAAa,UAAU,KAAK;AAAA,EAChC;AACJ;;;AC3CA,eAAsB,kBAAkB,QAAQ,UAAU,MAAM;AAC5D,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,mBAAmB,UAAU,eAAa;AACnD,WAAO,QAAQ,QAAQ,IAAI,cAAc,SAAS,CAAC;AAAA,EACvD,GAAG,OAAO;AACd;;;ACMA,eAAsB,SAAS,QAAQ,UAAU,MAAM;AACnD,SAAO,aAAa,OAAO;AAC3B,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,gBAAgB,QAAQ,KAAK;AACnC,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,kBAAkB,QAAQ,KAAK;AACrC,QAAM,cAAc,QAAQ,KAAK;AACjC,QAAM,6BAA6B,QAAQ,KAAK;AAChD,QAAM,oBAAoB,QAAQ,KAAK;AACvC,QAAM,mBAAmB,QAAQ,KAAK;AACtC,QAAM,wBAAwB,QAAQ,KAAK;AAC3C,QAAM,wBAAwB,QAAQ,KAAK;AAC3C,QAAM,SAAS,QAAQ,OAAO;AAClC;",
  "names": ["AbsorberClickMode", "double", "container", "DestroyMode", "EmitterClickMode", "half", "_a", "_b", "minLifeCount", "container", "defaultIndex", "double", "squareExp", "half", "Sides", "RollMode", "double", "doublePI", "maxAngle", "half", "double", "minVelocity", "doublePI", "spinFactor", "double", "doublePI", "minAngle", "sides", "maxAngle", "minAngle", "RgbIndexes", "HslIndexes", "defaultAlpha", "minVelocity", "minVelocity", "minVelocity", "minVelocity", "RgbIndexes", "defaultAlpha", "half", "double", "identity", "minRadius", "attractFactor", "squareExp", "half", "double", "minRadius", "bounceMode", "bounce", "ProcessBubbleType", "minDistance", "double", "half", "container", "lineStyle", "minDistance", "minDistance", "container", "container", "container", "minDistance", "minRadius", "half", "container", "minRadius", "defaultOpacity", "increment", "DisposalMethod", "GIFDataHeaders", "origin", "half", "increment", "double", "defaultAlpha", "sides", "defaultRatio", "noTime", "identity", "infiniteValue", "drawLine", "sides", "drawLine", "half", "identity", "Attractor", "Attractor", "half", "absorbFactor", "double", "double", "squarePower", "origin", "minDistance", "container", "minOpacity", "minDistance", "half", "container", "origin", "sides", "yFactor", "sides", "double", "double", "doublePI", "identity", "double", "sides", "origin", "sides", "defaultInset", "defaultSides", "defaultOpacity", "double", "half", "drawLine", "TiltDirection", "identity", "double", "doublePI", "maxAngle", "double", "doublePI", "double", "doublePI", "maxAngle", "moveSpeedFactor", "defaultDistance"]
}
